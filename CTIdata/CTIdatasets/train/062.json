{
    "event_id": "062",
    "claim": "The MuddyWater campaign was first sighted in 2017 when it targeted the Saudi government using an attack involving PowerShell scripts deployed via Microsoft Office Word macro.",
    "original_label": "true",
    "label": "true",
    "explain": "The MuddyWater campaign was first sighted in 2017 when it targeted the Saudi government using an attack involving PowerShell scripts deployed via Microsoft Office Word macro. In March 2018, we provided a detailed analysis of another campaign that bore the hallmarks of MuddyWater. In May 2018, we found a new sample (Detected as W2KM_DLOADR.UHAOEEN) that may be related to this campaign. Like the previous campaigns, these samples again involve a Microsoft Word document embedded with a malicious macro that is capable of executing PowerShell (PS) scripts leading to a backdoor payload. One notable difference in the analyzed samples is that they do not directly download the Visual Basic Script(VBS) and PowerShell component files, and instead encode all the scripts on the document itself. The scripts will then be decoded and dropped to execute the payload without needing to download the component files. As mentioned earlier, our analysis of the sample revealed characteristics that likely connect it to the MuddyWater campaign, in particular: The sample we analyzed was a Word document used as a lure for unsuspecting victims. However, unlike the samples from the previous campaigns, the lure document deals with a different subject matter. Instead of using government or telecommunications-related documents, the new lure document presents itself as a reward or promotion, which could indicate that the targets are no longer limited to specific industries or organizations. The document is designed to trick users into enabling the macro to view its full content. However, the macro’s true purpose is to allow it to execute malicious routines without the user’s knowledge. Once the macro is enabled, it will use the Document_Open() event to automatically execute the malicious routine if either a new document using the same template is opened or when the template itself is opened as a document0. The malicious macro’s code snippet uses three main functions, specifically: Analysis of the code revealed a PowerShell script capable of decoding the contents of the malicious document, which results in the execution of yet another encoded PowerShell script.This will then result in more readable PowerShell scripts capable of dropping various components in the %Application Data%\\Microsoft\\CLR\\* directory. The main PowerShell file invoker.ps1 uses these components to run the final payload, PRB-Backdoor, previously analyzed by other security researchers in May 2018.PRB-Backdoor is a backdoor that takes its name from the function used in the final PowerShell script payload, as seen in the figure below.The backdoor communicates with its Command-and-Control (C&C server), hxxp://outl00k[.]net, to send and receive the following commands:Given the use of lure documents designed with social engineering in mind, it is likely that the attackers use phishing or spam to target users who are unaware of these documents’ malicious nature. Awareness can effectively mitigate or stop these kinds of attacks from being successful. The first step is to be able to identify phishing attacks and distinguish legitimate emails from malicious ones. Telltale signs of social engineering include “too-good-to-be-true” offers and messages that lack context. In general, users should always practice caution when it comes to email. This includes avoiding clicking on links or downloading any documents unless certain that these are legitimate. Trend Micro™ Deep Discovery™ provides detection, in-depth analysis, and proactive response to today’s stealthy malware, and targeted attacks in real time. It provides a comprehensive defense tailored to protect organizations against targeted attacks and advanced threats through specialized engines, custom sandboxing, and seamless correlation across the entire attack lifecycle, allowing it to detect threats even without any engine or pattern update. Trend Micro™ Hosted Email Security is a no-maintenance cloud solution that delivers continuously updated protection to stop spam, malware, spear phishing, ransomware, and advanced targeted attacks before they reach the network. Trend Micro™ Deep Discovery™ Email Inspector and InterScan™ Web Security prevent malware from ever reaching end users. At the endpoint level, Trend Micro™ Smart Protection Suites deliver several capabilities that minimize the impact of these attacks. These solutions are powered by the Trend Micro XGen™ security, which provides a cross-generational blend of threat defense techniques against a full range of threats for data centers, cloud environments, networks, and endpoints. It features high-fidelity machine learning to secure the gateway and endpoint data and applications, and protects physical, virtual, and cloud workloads.\n\n\n",
    "reports": [
        {
            "link": "https://www.mandiant.com/resources/blog/iranian-threat-group-updates-ttps-in-spear-phishing-campaign/",
            "content": "It is still apparent their heavy focus on layered obfuscation and preference for PowerShell. My focus in this blog is to look at what changed in terms of the techniques used by the group to achieve their objective which can be summarized as the following: The POWERSTATS payload that this group relies on is heavily obfuscated. Once decoded you will be presented with the more familiar Invoke\u0002Expression/Invoke/Obfuscation PowerShell script that MuddyWater relies on. Since my last blog颅post on MuddyWater operations, they seem to have been continuing their activities and as expected developing/changing some of their tactics and techniques. The code is first embedded within the macro code as a double Base64 encoded variable. This continues to shows that MuddyWater group are continuously evolving their techniques.",
            "domain": "www.mandiant.com",
            "tokenized": [
                {
                    "sent": "It is still apparent their heavy focus on layered obfuscation and preference for PowerShell.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "My focus in this blog is to look at what changed in terms of the techniques used by the group to achieve their objective which can be summarized as the following: The POWERSTATS payload that this group relies on is heavily obfuscated.",
                    "is_evidence": 0
                },
                {
                    "sent": "Once decoded you will be presented with the more familiar Invoke\u0002Expression/Invoke/Obfuscation PowerShell script that MuddyWater relies on.",
                    "is_evidence": 0
                },
                {
                    "sent": "Since my last blog颅post on MuddyWater operations, they seem to have been continuing their activities and as expected developing/changing some of their tactics and techniques.",
                    "is_evidence": 0
                },
                {
                    "sent": "The code is first embedded within the macro code as a double Base64 encoded variable.",
                    "is_evidence": 0
                },
                {
                    "sent": "This continues to shows that MuddyWater group are continuously evolving their techniques.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://securelist.com/muddywater/88059/",
            "content": "Comparing the earlier MuddyWater campaign with this new one reveals some distinct similiarities: In addition to the common characteristics seen above, the campaigns also use similar obfuscation processes, as are the internal variables after deobfuscation. Given the number of similarities, we can assume that there is a connection between these new attacks and the MuddyWater campaign. One of them is the VBS script, however, the second file is a base64 encoded text file, which, after decoding, results in the Powershell file, as in the previous campaign. Our research found malicious delivery documents (Detected by Trend Micro as JS_VALYRIA.DOCT and W2KM_VALYRIA.DOCT) containing text and file names in the Tajik language attempting to target individuals working for government organizations and telecommunication companies in Tajikistan. Some examples of the lure documents used in the campaign can be seen below:After enabling the macros and the payload executes, two files – an obfuscated Visual Basic script (Detected by Trend Micro as VBS_VALYRIA.DOCT), and an obfuscated PowerShell script (Detected by Trend Mico as TROJ_VALYRIA.PS) — are created in the ProgramData directory placed in randomly-named directories. Third party security researchers named the MuddyWater campaign as such because of the difficulties in attributing the attacks.",
            "domain": "securelist.com",
            "tokenized": [
                {
                    "sent": "Comparing the earlier MuddyWater campaign with this new one reveals some distinct similiarities: In addition to the common characteristics seen above, the campaigns also use similar obfuscation processes, as are the internal variables after deobfuscation.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Given the number of similarities, we can assume that there is a connection between these new attacks and the MuddyWater campaign.",
                    "is_evidence": 0
                },
                {
                    "sent": "One of them is the VBS script, however, the second file is a base64 encoded text file, which, after decoding, results in the Powershell file, as in the previous campaign.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Our research found malicious delivery documents (Detected by Trend Micro as JS_VALYRIA.DOCT and W2KM_VALYRIA.DOCT) containing text and file names in the Tajik language attempting to target individuals working for government organizations and telecommunication companies in Tajikistan.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Some examples of the lure documents used in the campaign can be seen below:After enabling the macros and the payload executes, two files – an obfuscated Visual Basic script (Detected by Trend Micro as VBS_VALYRIA.DOCT), and an obfuscated PowerShell script (Detected by Trend Mico as TROJ_VALYRIA.PS) — are created in the ProgramData directory placed in randomly-named directories.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Third party security researchers named the MuddyWater campaign as such because of the difficulties in attributing the attacks.",
                    "is_evidence": 0,
                    "is_repeat": 0
                }
            ]
        },
        {
            "link": "https://www.trendmicro.com/en_us/research/18/c/campaign-possibly-connected-muddywater-surfaces-middle-east-central-asia.html/",
            "content": "Below is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information and then receives commands supported by the malware. Multiple documents used in the attacks also contain embedded paths from their authors’ machines. The deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes. The initial infection starts with macro-enabled Office 97-2003 Word files whose macros are usually password-protected to hinder static analysis. The malicious decoy documents used in the attacks suggest they are geopolitically motivated, targeting sensitive personnel and organizations. The new spear-phishing docs used by MuddyWater rely on social engineering to persuade users to enable macros.",
            "domain": "www.trendmicro.com",
            "tokenized": [
                {
                    "sent": "Below is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information and then receives commands supported by the malware.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Multiple documents used in the attacks also contain embedded paths from their authors’ machines.",
                    "is_evidence": 0
                },
                {
                    "sent": "The deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes.",
                    "is_evidence": 0
                },
                {
                    "sent": "The initial infection starts with macro-enabled Office 97-2003 Word files whose macros are usually password-protected to hinder static analysis.",
                    "is_evidence": 0
                },
                {
                    "sent": "The malicious decoy documents used in the attacks suggest they are geopolitically motivated, targeting sensitive personnel and organizations.",
                    "is_evidence": 0
                },
                {
                    "sent": "The new spear-phishing docs used by MuddyWater rely on social engineering to persuade users to enable macros.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://sec0wn.blogspot.com/2018/03/a-quick-dip-into-muddywaters-recent.html/",
            "content": "A brief timeline of this activity is shown in Figure 1.The first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macro-based document that dropped a VBS file and an INI file. Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it. From January 2018 to March 2018, through FireEye’s Dynamic Threat Intelligence, we observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macro-based documents to individuals in Asia and the Middle East. One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3.The second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution. Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources. We believe the infection vector for all of the attacks involved in this campaign are macro-based documents sent as an email attachment.",
            "domain": "sec0wn.blogspot.com",
            "tokenized": [
                {
                    "sent": "A brief timeline of this activity is shown in Figure 1.The first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macro-based document that dropped a VBS file and an INI file.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it.",
                    "is_evidence": 0
                },
                {
                    "sent": "From January 2018 to March 2018, through FireEye’s Dynamic Threat Intelligence, we observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macro-based documents to individuals in Asia and the Middle East.",
                    "is_evidence": 0
                },
                {
                    "sent": "One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3.The second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.",
                    "is_evidence": 0
                },
                {
                    "sent": "We believe the infection vector for all of the attacks involved in this campaign are macro-based documents sent as an email attachment.",
                    "is_evidence": 0
                }
            ]
        }
    ]
}