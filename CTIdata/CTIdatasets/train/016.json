{
    "event_id": "016",
    "claim": "The campaign operators retained their focus on diplomatic entities this time in Europe and spread the initial dropper as a spoofed visa application",
    "original_label": "true",
    "label": "true",
    "explain": "You may remember that in autumn 2019 we published a story about how a COMpfun successor known as Reductor infected files on the fly to compromise TLS traffic. If you’re wondering whether the actor behind the malware is still developing new features, the answer is yes. Later in November 2019 our Attribution Engine revealed a new Trojan with strong code similarities. Further research showed that it was obviously using the same code base as COMPFun. The campaign operators retained their focus on diplomatic entities, this time in Europe, and spread the initial dropper as a spoofed visa application. It is not clear to us exactly how the malicious code is being delivered to a target. The legitimate application was kept encrypted inside the dropper, along with the 32- and 64-bit next stage malware. We observed an interesting C2 communication protocol utilizing rare HTTP/HTTPS status codes (check IETF RFC 7231, 6585, 4918). Several HTTP status codes (422-429) from the Client Error class let the Trojan know what the operators want to do. After the control server sends the status “Payment Required” (402), all these previously received commands are executed. The authors keep the RSA public key and unique HTTP ETag in encrypted configuration data. Created for web content caching reasons, this marker could also be used to filter unwanted requests to the C2, e.g., those that are from network scanners rather than targets. Besides the aforementioned RSA public key to communicate with the C2, the malware also uses a self-generated AES-128 key. We should mention here once again that the COMPfun malware was initially documented by G-DATA in 2014; and although the company did not identify which APT was using the malware. Based mostly on victimology, we were able to associate it with the Turla APT with medium-to-low level of confidence. ts functions include the ability to acquire the target’s geolocation, gathering host- and network-related data, keylogging and screenshots. In other words, it’s a normal full-fledged Trojan that is also capable of propagating itself to removable devices. As in previous malware from the same authors, all the necessary function addresses resolve dynamically to complicate analysis. To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption. To hide data locally, the Trojan implements LZNT1 compression and one-byte XOR encryption. ts functions include the ability to acquire the target’s geolocation, gathering host- and network-related data, keylogging and screenshots. In other words, it’s a normal full-fledged Trojan that is also capable of propagating itself to removable devices. As in previous malware from the same authors, all the necessary function addresses resolve dynamically to complicate analysis. To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption. To hide data locally, the Trojan implements LZNT1 compression and one-byte XOR encryption. The following files are dropped to the disk in addition to the original application that the malware tries to mimic: The dropper urges users to run the file as administrator (using messages such as “need to run as admin”), then drops a version corresponding to the host’s architecture and sets the file system timestamp to 2013.12.20 22:31. Interestingly, the dropper’s abilities aren’t limited to PE lures; as an alternative, this stage is also able to use .doc and .pdf files. In such cases, the dropper will open the files using the “open” shell command instead of running the legitimate spoofed executable application.The analysis below is based on the 32-bit sample from the table above. The legitimate ExplorerFrame.dll.mui is a language resource for the ExplorerFrame.dll file used by Windows Explorer. As usual in this malware family’s code, a huge number of short standalone functions return all the readable strings. This is done to complicate analysis by not allowing the strings to be visible at a glance for researchers. The module’s preparation stage dynamically resolves all required Windows API function addresses into corresponding custom structures. Afterwards the malware uses indirect function calls only. The module obtains the processor architecture (32- or 64-bit) and Windows OS version. It includes a number of anti-analysis checks for virtual machine-related devices (VEN_VMWARE, VBOX_HARDDISK, Virtual_DVD_ROM, etc.) to avoid controlled execution. It also notes which security products are running on the host (Symantec, Kaspersky, Dr.Web, Avast). Before every communication with the C2, the malware checks if software such as debuggers (WinDbg, OllyDbg, Visual Studio) and host (Process Explorer or Monitor, etc.) or network monitoring (Wireshark, TCPView, etc.) programs are running. It also checks for internet connectivity and does not attempt to communicate if the checks fail. The DLL also checks for potentially available launch processes that it can inject itself into. In the case of PaymentRequired, this could be system, security product or browser processes. Then the malware forms the corresponding code to drop files, delete files, etc. The last step in the initialization procedure is to decrypt and decompress the configuration file. Decryption is done via a one-byte XOR using the 0xAA key, followed by decompression using the LZNT1 algorithm. From the configuration, the malware parses the RSA public key, ETag and IP addresses to communicate with its control servers. Firstly, the module generates the following: The module then chooses a process to inject the code into, in order of decreasing priority, starting from Windows (cmd.exe, smss.exe), security-related applications (Symantec’s nis.exe, Dr.Web’s spideragent.exe) and browsers (IE, Opera, Firefox, Yandex browser, Chrome). The main thread checks if the C2 supports TLS in its configuration. If it does, communication will be over HTTPS and port 443; otherwise, the HTTP protocol and port 80 are used. The first GET request sent contains an ETag “If-Match” header that is built using data from its decrypted configuration. ETags are normally used by web servers for caching purposes in order to be more efficient and save bandwidth by not resending redundant information if an ETag value matches. The implementation of ETags means the C2 may ignore all requests that are not sent from its intended targets if they don’t have the required ETag value.If initialization is successful, the malware starts one more thread for dispatching Windows messages, looking for removable devices related to a WM_DEVICECHANGE event. The module runs its own handlers in the event of a USB device being plugged into or unplugged from the host.The user’s activity is monitored using several hooks. All of them gather the target’s data independently of any C2 command. Keystrokes are encrypted using the RSA public key stored in the configuration data and sent once every two seconds, or when moreа than 512 bytes are recorded. These 512 characters also include left mouse button clicks (written as the “MSLBTN” string) and Windows title bar texts. For clipboard content, the module calculates an MD5 hash and if it changes, encrypts the clipboard content with the same RSA public key and then sends it. In a separate thread, the Trojan takes a bitmap screenshot using the GDIPlus library, compresses it with the LZNT1 algorithm, encrypts it using the key from the configuration data and sends it to the control server. A screenshot will be taken of the target and sent anyway, independently of any C2 command. There are several choices – albeit not major additional technical ones – that the malware author made which we consider to be noteworthy. The COM-hijacking-based persistence method injects its corresponding code and structure as a parameter into a legitimate process’s memory. The malware geolocates victims using legitimate web services: geoplugin.net/json.gp, ip-api.com/json and telize.com/geoip. The unusual thread synchronization timeout calculation in the HTTP status thread is peculiar. Mathematically, the partial sum of the series is precisely:This series, in the case of a full sum, is just a representation of the exponent. The developers probably used the exponent to make timeouts in the communication thread more unpredictable and grow at a fast rate, and the compiler calculated it this way. We saw innovative approaches from the COMpfun developers twice in 2019. First, they bypassed TLS encrypted traffic via PRNG system function patching, and then we observed a unique implementation of C2 communications using uncommon HTTP status codes. The malware operators retained their focus on diplomatic entities and the choice of a visa-related application – stored on a directory shared within the local network – as the initial infection vector worked in their favor. The combination of a tailored approach to their targets and the ability to generate and execute their ideas certainly makes the developers behind COMPFun a strong offensive team.\n\n\n",
    "reports": [
        {
            "link": "https://web-assets.esetstatic.com/wls/2020/05/ESET_Turla_ComRAT.pdf/",
            "content": "It is not clear to us exactly how the malicious code is being delivered to a target. The goal is probably to make the malware’s HTTP requests to its C&C appear to be from a process that would be expected to connect to the internet and make HTTP requests. The legitimate application was kept encrypted inside the dropper, along with the 32- and 64-bit next stage malware. To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption. You may remember that in autumn 2019 we published a story about how a COMpfun successor known as Reductor infected files on the fly to compromise TLS traffic.",
            "domain": "web-assets.esetstatic.com",
            "tokenized": [
                {
                    "sent": "It is not clear to us exactly how the malicious code is being delivered to a target.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "The goal is probably to make the malware’s HTTP requests to its C&C appear to be from a process that would be expected to connect to the internet and make HTTP requests.",
                    "is_evidence": 0
                },
                {
                    "sent": "The legitimate application was kept encrypted inside the dropper, along with the 32- and 64-bit next stage malware.",
                    "is_evidence": 0
                },
                {
                    "sent": "To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption.",
                    "is_evidence": 0
                },
                {
                    "sent": "You may remember that in autumn 2019 we published a story about how a COMpfun successor known as Reductor infected files on the fly to compromise TLS traffic.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/?fbclid=IwAR1kJQ1vBjLuom_3JXSb5FjH8p2zB83vRzBoCLszoL9y6vNvbg9XmJpEz-k/",
            "content": "According to ESET telemetry, the following websites were compromised: We have indications that these websites were compromised since at least the beginning of 2019. Figure 4 is an overview of the compromise process from initially visiting one of the compromised Armenian websites to the delivery of a malicious payload. It was documented in 2017 by researchers from Bitdefender, and a more recent version was documented by Telsy in May 2019. The backdoor communicates with its hardcoded C&C server via HTTP. The various pieces of JavaScript used there are almost identical to those in this campaign, but the targets and payloads are different.n this specific operation, Turla has compromised at least four Armenian websites, including two belonging to the government. Turla operators leveraged unknown access methods to these websites to insert a piece of malicious JavaScript code.",
            "domain": "www.welivesecurity.com",
            "tokenized": [
                {
                    "sent": "According to ESET telemetry, the following websites were compromised: We have indications that these websites were compromised since at least the beginning of 2019.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Figure 4 is an overview of the compromise process from initially visiting one of the compromised Armenian websites to the delivery of a malicious payload.",
                    "is_evidence": 0
                },
                {
                    "sent": "It was documented in 2017 by researchers from Bitdefender, and a more recent version was documented by Telsy in May 2019.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "The backdoor communicates with its hardcoded C&C server via HTTP.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "The various pieces of JavaScript used there are almost identical to those in this campaign, but the targets and payloads are different.n this specific operation, Turla has compromised at least four Armenian websites, including two belonging to the government.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Turla operators leveraged unknown access methods to these websites to insert a piece of malicious JavaScript code.",
                    "is_evidence": 0,
                    "is_repeat": 0
                }
            ]
        },
        {
            "link": "https://www.telsy.com/en/turla-venomous-bear-updates-its-arsenal-newpass-appears-on-the-apt-threat-scene/",
            "content": "Below, we report a simple scheme of the described infection chain, highlighting the three components of this new threat: the dropper, the loader and the agent. In this specific case, attackers enabled the Service method that allows the malware to interact with the SCManager to create a new service named Adobe Update Module pointing to the path of the loader. It is responsible for exfiltrating information from the infected machine, sending it to the command-and-control and downloading new commands to be executed. NewPass is quite a complex malware composed by different components that rely on an encoded file to pass information and configuration between each other. There are at least three components of the malware: a dropper, that deploys the binary file; a loader library, that is able to decode the binary file extracting the last component, responsible for performing specific operations, such as communicate with the attackers’ command and control server (the “agent”). This payload is hidden into the configuration file after a section of random bytes used by the attackers to change the hash value of the file at every infection.",
            "domain": "www.telsy.com",
            "tokenized": [
                {
                    "sent": "Below, we report a simple scheme of the described infection chain, highlighting the three components of this new threat: the dropper, the loader and the agent.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "In this specific case, attackers enabled the Service method that allows the malware to interact with the SCManager to create a new service named Adobe Update Module pointing to the path of the loader.",
                    "is_evidence": 0
                },
                {
                    "sent": "It is responsible for exfiltrating information from the infected machine, sending it to the command-and-control and downloading new commands to be executed.",
                    "is_evidence": 0
                },
                {
                    "sent": "NewPass is quite a complex malware composed by different components that rely on an encoded file to pass information and configuration between each other.",
                    "is_evidence": 0
                },
                {
                    "sent": "There are at least three components of the malware: a dropper, that deploys the binary file; a loader library, that is able to decode the binary file extracting the last component, responsible for performing specific operations, such as communicate with the attackers’ command and control server (the “agent”)",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "This payload is hidden into the configuration file after a section of random bytes used by the attackers to change the hash value of the file at every infection.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://www.welivesecurity.com/2020/12/02/turla-crutch-keeping-back-door-open/",
            "content": "After finding multiple tools belonging to the Iron Tiger threat actor (which we now track as Earth Smilodon), it is likely that the new malware families that we found during the Operation DRBControl investigation came from the same threat actor. However, we continue seeing samples that feature the “older” behaviors, which suggests that different groups — or possibly subgroups of Iron Tiger — are using this HyperBro Malware Family. In December 2020, we found a sample that we identified as one belonging to the SysUpdate malware family, also named Soldier, FOCUSFJORD, and HyperSSL. The Iron Tiger APT group has used the HyperBro malware family since at least 2017. This suggests that different groups (or subgroups of Iron Tiger) are also using this malware family in their attacks.",
            "domain": "www.welivesecurity.com",
            "tokenized": [
                {
                    "sent": "Crutch is able to bypass some security layers by abusing legitimate infrastructure – here Dropbox – in order to blend into normal network traffic while exfiltrating stolen documents and receiving commands from its operators.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "From 2015 to mid-2019, the malware architecture used a backdoor communicating with Dropbox and a drive monitor without network capabilities.",
                    "is_evidence": 0
                },
                {
                    "sent": "It has compromised many governments, especially diplomatic entities, all around the world, operating a large malware arsenal that we have described in the last years.",
                    "is_evidence": 0
                },
                {
                    "sent": "It includes a backdoor that communicates with a hardcoded Dropbox account using the official HTTP API.",
                    "is_evidence": 0
                },
                {
                    "sent": "The main malicious activity is the staging, compression and exfiltration of documents and various files, as shown in Figure 1.",
                    "is_evidence": 0
                },
                {
                    "sent": "We were not able to uncover how the malicious script arrived on the machine, but we believe it was through another implant although a phishing document cannot be excluded.",
                    "is_evidence": 0
                }
            ]
        }
    ]
}