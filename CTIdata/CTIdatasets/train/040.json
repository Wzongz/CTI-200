{
    "event_id": "040",
    "claim": "This report describes in detail some of the new malware used by this group in the organizations they target.",
    "original_label": "true",
    "label": "true",
    "explain": "It seems the past few years have shown an increase in supply-chain attacks to distribute malware. Is this a reality, or because the industry is getting better at detecting and documenting them? Regardless of the answer, one of the groups that has been shown to be quite effective at conducting supply-chain attacks is the Winnti Group. Not only they have compromised multiple high-profile targets, but in each case, they were able to stay under the radar for many months before they were found and disrupted. This report describes in detail some of the new malware used by this group in the organizations they target. Another one of their backdoors, ShadowPad, was also updated recently. This report will also expose the new techniques they use to hide their payloads. By analyzing their tools and techniques, ESET researchers were able to infer some relationships between each reported supply-chain incident.When reading the multiple reports on the Winnti Group activities, it is sometime difficult to realize that some discuss about the same malware family or component. This report tries to use existing names as much as possible, by using the name as it was first reported. We understand that some of the names are different due to the naming schemes used by different vendors or the fact that the visibility during research couldn’t allow mapping an analysis to a specific existing name. There is also the problem of tools versus the name of the operation, which sometimes bear the same name. It is worth spending some time to define the terms we are going to use. There are currently two open court cases in the US against the alleged perpetrator behind this group. The first one, dated October 26th 2017, not long after the NetSarang incident, is a civil case filed by Microsoft. Without going into attribution, it describes how the ShadowPad malware operates and how it uses legitimate web sites to store the address of its C&C server. The second one has more details about attribution. The indictment was filed by US federal attorneys, in the District Court of Southern California, in October 2018. It accuses ten Chinese individuals of compromising companies mostly in the aerospace and technology industry. According to the indictment, the intentions were to steal intellectual property from the victims. The incidents they describe go from 2010 to 2015, where they used the Sakula, PlugX, and Winnti malware in the different organizations. Some of their attacks involved compromising the DNS registrar to change the nameservers of their target. We cannot be certain that the same individuals are behind the supply-chain attacks, but given that they were using the same toolset, they probably belong to the same organization.This shows that the group may have lot of different intents. For example, there is no explanation we can think of to target the gaming industry to perform espionage operations. This is one of the reasons ESET researchers and researchers for other vendors tend to agree that the Winnti Group may not be monolithic; it is plausible that there are multiple subgroups and that operations are not conducted by the same group that is authoring the malware they use. Based on ESET’s telemetry and public reporting, it seems they focus their efforts to compromise private organizations in Asia, with South Korea being one of the most targeted countries. During the course of our research, we were able to find different malware artifacts using the same techniques or code. To better visualize the full picture, we have created a diagram showing the relationships between all of them.Some of the components shown in this graphic have already been documented before. This report will dig into the new or updated ones. It will also describe techniques that are used and are important because they allow to link several incidents together. In our previous research [1] on the Winnti Group, we discussed a custom packer used in payloads embedded in compromised videogames and gaming application. It uses a unique structure seen in Figure 1 to embed a PE file. In addition to an RC4 key and the encrypted PE, this structure contains encrypted metadata such as path to the embedded PE file and a launch type value. The packer’s configuration structure is shown in Figure 2.The RC4 key (which is XOR-ed with 0x37) contained in the structure is used to decrypt the PE as well as the encrypted file name and path. The launch type value can be either 1 or 2 and indicates to the unpack-ing code, to be able to load it properly, whether the PE is an executable or a DLL. It’s interesting to note that the RC4 key contains only digits. It is also worth noting that there are 32- and 64-bits versions of this packer. Examples of the packer’s configuration found in video-games and gaming apps discussed in our previous blogpost [1] are shown in Table 1.After analyzing the custom packer used by the Winnti Group, we started hunting for more executable files with this packer, in the hope of unearthing other compromised software used in supply-chain attacks. What we’ve found is not exactly what we were looking for to begin with. Instead of finding compromised software, we discovered a new listening-mode modular backdoor that uses the same packer. We believe its author call it PortReuse. This is not a random name: this backdoor injects into a running process already listening on a TCP port, “reusing” an already open port. It hooks the receiving function and waits for a “magic” packet to trigger the malicious behavior. The legitimate traffic is forwarded to the real application, so it is effectively not blocking any legitimate activity on the compromised server. This type of backdoor is sometimes called a passive network implant. As we mentioned, this backdoor is using the same packing structure as the one used in 2018. It’s actually using it in a recursive way: packed components also contain packed components. The metadata of the packed PE files are actually interesting here: the file name field contains meaningful values and even absolute paths in some cases. In this report, we will be describing each component using the names the malware authors have given to these components.The PortReuse backdoor exhibits a modular architecture, since all its components are separate processes communicating through named pipes, as shown in Figure 3. This allows reusing existing binary components and replacing only the components that need customization. For instance, we have seen multiple PortReuse variants with a different NetAgent but using the same SK3. ProcTran and UserFunction exist in 32- and 64-bits versions but can communicate with any SK3 regardless of its version, since they share a common protocol through the named pipe.There is no C&C server in the backdoor. We have only seen NetAgent listening on open sockets. The attacker needs to connect directly to the compromised host. Only a single file is written to disk to start PortReuse. All other components exist in memory only. The initial launch file was found in different formats:InnerLoader is the first component to be decrypted and launched. As InnerLoader.dll is found packed with the custom packer, we were able to extract the packer metadata. The metadata from the packer, including absolute file path when it was packed, is shown in Table 2.As shown in the absolute file path, the name of the project from which InnerLoader belongs is called PortReuse. InnerLoader will look for a given process to inject two payloads. In the case of the .NET injector, InnerLoader targets a process called GameServer_NewPoker.exe and in the case of the VBS injector it will look for a process listening on port 53 (DNS). These payloads are, again, packed using the same packer and are called NetAgent and SK3 according the packer configuration. These packer configurations are shown in Table 3. NetAgent is the module responsible for handling TCP hooking. Depending on the NetAgent version, two different hooking techniques are used. NetAgent will hook either WSARecv or NtDeviceIoControlFile. In both cases, the hook will first check if the received packet complies to a given magic packet format as already seen in the case of the Winnti malware.This allows blending into the network traffic to avoid detection. A request to the backdoor must have the specific transaction ID to trigger which, in normal circumstances, should be chosen at random by DNS clients. After having received the magic packet, the hook will start forwarding network traffic through the named pipe “Microsoft Ole Object {30000-7100-12985-00000-00002}” to the SK3 module. Until the magic packet is received, the hook passes the execution to the hooked function. One of the NetAgent variants also tries to hide its activity by disabling Event Tracing for Windows (ETW) for the injected process by patching the beginning of EtwEventWrite function with “MOV RAX, 0; RET” which will then always blindly return zero as shown in Figure 6.The communication between the backdoor and its client is RC4-encrypted using the key “CreateThread” and XOR-encoded with 0x77. The SK3 module is responsible for decrypting and processing the traffic forwarded by NetAgent through the named pipe. The decrypted command format is CMD_ID CMD_ARGS where CMD_ID is an integer. The list of the supported commands is shown in Table 4.In addition to the variants using NetAgent to handle the network hook and forwarding the traffic through a named pipe to SK3, we also found PortReuse variants where NetAgent and SK3 were merged in one single module responsible for both, it uses a Windows Server API functionality to route requests for a given URL to the backdoor by using the following UrlPrefix: When routing traffic, the strong wildcard (+) matches all possible host names and will always be applied first, since it takes precedence over the weak wildcard (*) and explicit hostnames [7]. Every connection to this URL will then be redirected to SK3. The decompiled procedure used to register a UrlPrefix is shown in Figure 7:The PortReuse backdoor is targeting various commonly used ports such as 53 (DNS over TCP), 80, 443, 3389 (Remote Desktop Protocol), and 5985 (Windows Remote Management). One of the variants we found is also port-agnostic: it parses the TCP header and triggers only if the source port is less than 22. The backdoor must first be injected into a running process that, in order to install the networking hook, is already listening on the targeted port. In Table 7 are shown various targets of the PortReuse backdoor along with their filenames from the custom packer and the port reuse technique used:It is worth noting that the Winnti malware used a kernel driver to hijack network communications while in that case the port reuse technique allows the backdoor to operate from userland.Since the “magic” used to trigger the PortReuse code is now known, we can use it to find hosts connected to the Internet that could be compromised by this backdoor. In the case of the variants injecting in IIS it can be achieved by performing a GET request and inspecting the Server and Content-Length headers. Since, based on all the samples we have analyzed, performing such a request does not produce any side effects, we asked the help of Censys to perform an Internet-wide scan so to identify potential victims. Thanks to the Censys team, we were able to identify eight IP addresses that replied with an HTTP response matching the signature of PortReuse. We found that all eight of these IP addresses belonged to a single organization: a major mobile hardware and software manufacturer based in Asia. We notified the company and are working with the victim to remediate. It is possible that the Winnti Group was planning a devastating supply-chain attack by compromising this organization.In addition to the Winnti malware, organizations targeted by Winnti were found to be compromised with a VMProtected DLL. Kaspersky mentions this VMProtected technique in the detailed article about ShadowHammer [5]. These VMProtected samples are actually responsible for decrypting a payload that is either embedded in its PE file overlay or read from [Drive]:\\$Recycle.Bin\\COM1:NULL.DAT. This file (NULL.DAT) is an NTFS Alternate Data Stream (ADS) on a file named “COM1”, which has the special meaning of being the first serial port it is a reserved name not to be used as a filename [8]. This makes working with the file a bit more difficult than usual. To be able to read COM1 from the command prompt, its path needs to be prefixed with “\\.\\”. Regardless of the location of the payload, the key derivation and decryption algorithms are always the same. The payloads are encrypted using RC5 in ECB mode and the decryption key is derived from the volume ID of the targeted machine as follows：In most of the VMProtected samples we found, the string used to derive the decryption key from the volume ID is the same (“f@Ukd!rCto R$.”). In some more recent cases the derivation string was “d37lo{r”. Once decrypted, the payload is position-independent codes executed in a separate thread. The derivation string, key derivation from the volume ID and RC5 implementation are the same as used in Win64/Winnti.BN, which is the known second stage of the compromised videogames and gaming applications and are used to decrypt the third stage. Unlike the samples we are looking at here, Win64/ Winnti.BN is not packed with VMProtect, but uses exactly the same key derivation and encryption algorithm. ESET researchers were able to decrypt several payloads packed using this custom VMProtected packer. We found that the payload was either the PortReuse backdoor or the ShadowPad malware [4].The PortReuse backdoors dropped by the VMProtected samples were all using the UrlPrefix technique on various ports and the Server header of the backdoor response was Microsoft-IIS/ 10.0 Microsoft-HTTPAPI/2.0. The backdoor was observed to be in use at least two organizations. Considering that the PortReuse backdoor was found in VMProtected droppers similar to what was previously described by Kaspersky with Operation ShadowHammer [5], in addition to the fact that the same decryption algorithm is used by the 2nd stage from the compromised video-games and also by the gaming application uncovered by ESET, strongly suggests that Operation ShadowHammer and these supply-chain attacks are connected and that the PortReuse backdoor is part of the Winnti Group arsenal.As mentioned previously, some of the payloads dropped by the VMProtected samples were similar to the ShadowPad malware, using the same plugin architecture with identical module ID, similar embedded configurations and encryption schemes. Interestingly, if we look at the modules timestamps, we can see that public webpages to retrieve the C&C server instead of DGA (Domain Generation Algorithm) started to be used from at least the 25th August 2017, less than two weeks after the publication on the NetSarang compromise by Kaspersy [4]. The Module IDs along with their names and timestamps from various samples are shown in Table 8, Table 9 and Table 10. In addition to these ShadowPad variants using the same IDs as described in [4], we found an updated version with modules that, according to their timestamps, were compiled in 2019 according to their timestamps, with additional obfuscations and using random module IDs. The Config module maintains an encrypted string pool that contains two URLs of a public profile or publicly posted document on legitimate websites, which are used to retrieve and decrypt the real C&C server URL. In addition to these URL, the string pool contains a string similar to a campaign identifier that was related to the targeted victims. In previous versions of the backdoor, the string pool starts at offset 0x56 relative to the beginning of the configuration block, while for the updated version, the offset is 0x5c. The algorithm to decrypt the C&C address is similar to the one used in older versions of ShadowPad. First, the string enclosed between consecutive ‘$’ delimiters from the publicly posted document is extracted. Then each character is decremented by 0x61 (‘a’) and each resulting pair of four bits is then concatenated into a byte and the resulting buffer decrypted using the decryption routine that is also used to decrypt the strings from rest of the code. The string decryption algorithms used differ between samples, but follows a pattern similar to the following Python transcription:Unfortunately, the attackers cleaned all the page content before we had access to the malware samples. However, two documents hosted on Google Docs contained information in the document history that enabled us to list the C&C servers they used for that campaign. The supported protocols to contact the C&C server are HTTP, HTTPS, UDP, TCP and DNS.These VMProtected samples persist on the system by using a DLL hijacking technique [7] similar to what was used by the 2nd stage of the CCleaner backdoor as described by CrowdStrike [8]. The DLL has an exported function that is used to copy itself to C:\\Windows\\System32\\TSVIPSrv.DLL. It will then be loaded when the SessionEnv service which tries to load TSVIPSrv.DLL from the System32 directory.Some of the victims in the gaming industry were found to be compromised by different Winnti variants installed using the same dropper named Install.exe and Install64.exe for the 32- and 64-bits versions respectively.The decryption key was always the same regardless of the Winnti variant dropped or the victim, and the decryption algorithm used by Install.exe is AES-256-CTR. This dropper has been used since at least mid-2017 and is still in use as of the time of writing.The PlugX-like encryption algorithm is similar to the one mentioned in the Operation ShadowHammer blogpost, which suggests another link between the ShadowHammer campaign and the campaigns against in the video game industry previously uncovered by ESET. Moreover, Trend Micro also mentioned the use of PlugX-like encryption for the Winnti GitHub abuse campaign [9].Winnti is also known to use custom AceHash builds [11]. 32- and 64-bit signed builds of this password dumper were also found among several victims compromised by Winnti variants installed from the Install.exe dropper, sometimes in conjunction with Mimikatz.In our previous research [1], we mentioned that the 2nd stage delivered to the victims appends the extension .mui to its DLL path, reads that file and decrypts it using RC5 by deriving the decryption key from the volume ID of the victim’s hard drive. The RC5 and key derivation implementation are the same as the one used in the ShadowPad VMProtected launcher. The string “f@Ukd!rCto R$.” is used to derive the decryption key from the volume ID ID – the same key used by the PortReuse and ShadowPad VMProtected launcher. These findings add another connection between operation ShadowHammer and compromise campaign in the video-game industry. We were able to obtain and decrypt the .mui files loaded by Win64/Winnti.BN. They were actually XMRig executables, again packed using the same custom packer as the one used to pack the 1st stage of compromised games as well as the PortReuse backdoor. where wcnapi.mui is the configuration file provided to XMRig. Unfortunately, we do not have a sample of the configuration file. In any event, this sheds some light on the financial motivation behind this campaign. Even though we observed only XMRig as final payload, we cannot exclude the possibility that attackers may have sent different payload to victims of interest based on the MAC addresses collected by the 1st stage.The Winnti group is capable of breaching large organizations via many different means. Given how complex the backdoor and methods they use are, we think they have significant resources and time allocated to malicious activities. There are a lot of discussions among malware researchers regarding attribution. More specifically, whether or not the different attacks, both espionage and for financial gain, are performed by the same people or organization. Given the amount of work required, we know these attacks aren’t performed by a single individual. The perpetrators running the different operations may or may not be the authors of the actual malware we see. They may share tools among different teams and what we see is only a representation of what they accomplish as a team. Or is it multiple teams? The fact that clustering is hard here doesn’t mean we can’t link the different incidents. Given the code and techniques they reuse, we can make strong correlations between incidents. However, by looking only at samples and events, it would be speculation to try to find out how the organization actually works. Who profits from financial gain? Do they mine cryptocurrencies to finance their own activities or do they use the same malware outside of their work hours? There is currently no evidence that would help answer these questions with certainty. The Winnti Group is still very active in 2019 and continues to target both gaming and other industries. The update to the ShadowPad malware shows they are still developing and using it. The relatively new PortReuse malware also shows they update their arsenal and give themselves an additional way to compromise their victims for a long period of time.\n\n\n",
    "reports": [
        {
            "link": "https://www.fireeye.com/blog/threat-research/2019/10/lowkey hunting-for-the-missing- volume-serial-id.html/",
            "content": "At Exatrack, we are fond of rootkit analysis and detection. In our case, DllMain starts by checking this argument against 0: If this module is loaded by an analysis framework the value will be set at 0 and the malware will do nothing. Our Analysis is based on the following sample: https://www.virustotal.com/gui/file/92c37c829dac8f6d277ae4b72b926e82f54ed8fc1b61885d7d7d9 2fd8417b99f/analysis This analysis aims to identify the major functionalities of the rootkit as well as a part of the userland’s capabilities. The rootkit also has stealth capacities that may not be used anymore because of PatchGuard. The tweet is about a Winnti rootkit that was just sent on VirusTotal. This paper will talk about our analysis based on a twitter post by Florian Roth to identify (and analyze) a signed rootkit, with unrevoked certificate and unknown from VirusTotal.",
            "domain": "www.fireeye.com",
            "tokenized": [
                {
                    "sent": "At Exatrack, we are fond of rootkit analysis and detection.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "In our case, DllMain starts by checking this argument against 0: If this module is loaded by an analysis framework the value will be set at 0 and the malware will do nothing.",
                    "is_evidence": 0
                },
                {
                    "sent": "Our Analysis is based on the following sample: https://www.virustotal.com/gui/file/92c37c829dac8f6d277ae4b72b926e82f54ed8fc1b61885d7d7d9 2fd8417b99f/analysis This analysis aims to identify the major functionalities of the rootkit as well as a part of the userland’s capabilities.",
                    "is_evidence": 0
                },
                {
                    "sent": "The rootkit also has stealth capacities that may not be used anymore because of PatchGuard.",
                    "is_evidence": 0
                },
                {
                    "sent": "The tweet is about a Winnti rootkit that was just sent on VirusTotal.",
                    "is_evidence": 0
                },
                {
                    "sent": "This paper will talk about our analysis based on a twitter post by Florian Roth to identify (and analyze) a signed rootkit, with unrevoked certificate and unknown from VirusTotal.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://www.fireeye.com/blog/threat-research/2019/10/messagetap-who-is-reading-your-text-messages.html/",
            "content": "It uses an identical packer to that used with the payload embedded in compromised video games uncovered by ESET in March 2019. Mathieu Tartare 21 Oct 2019 - 11:30AM For a while, ESET researchers have been tracking the activities of the Winnti Group, active since at least 2012 and responsible for high-profile supply-chain attacks against the video game and software industry. Recently, we discovered a previously undocumented backdoor targeting Microsoft SQL (MSSQL) that allows attackers to maintain a very discreet foothold inside compromised organizations. The skip-2.0 backdoor is an interesting addition to the Winnti Group’s arsenal, sharing a great deal of similarities with the group’s already known toolset, and allowing the attacker to achieve persistence on an MSSQL Server. This backdoor bears multiple similarities to the PortReuse backdoor, another tool used by the Winnti Group that was first documented by ESET in October 2019, such as the use of the same custom packer and VMProtected launcher, which is why we attribute this backdoor to the Winnti Group. We recently published a white paper updating our understanding of the arsenal of the Winnti Group, and that exposed a previously undocumented backdoor of theirs called PortReuse.",
            "domain": "www.fireeye.com",
            "tokenized": [
                {
                    "sent": "It uses an identical packer to that used with the payload embedded in compromised video games uncovered by ESET in March 2019.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Mathieu Tartare 21 Oct 2019 - 11:30AM For a while, ESET researchers have been tracking the activities of the Winnti Group, active since at least 2012 and responsible for high-profile supply-chain attacks against the video game and software industry.",
                    "is_evidence": 0
                },
                {
                    "sent": "Recently, we discovered a previously undocumented backdoor targeting Microsoft SQL (MSSQL) that allows attackers to maintain a very discreet foothold inside compromised organizations.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "The skip-2.0 backdoor is an interesting addition to the Winnti Group’s arsenal, sharing a great deal of similarities with the group’s already known toolset, and allowing the attacker to achieve persistence on an MSSQL Server.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "This backdoor bears multiple similarities to the PortReuse backdoor, another tool used by the Winnti Group that was first documented by ESET in October 2019, such as the use of the same custom packer and VMProtected launcher, which is why we attribute this backdoor to the Winnti Group.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "We recently published a white paper updating our understanding of the arsenal of the Winnti Group, and that exposed a previously undocumented backdoor of theirs called PortReuse.",
                    "is_evidence": 0,
                    "is_repeat": 0
                }
            ]
        },
        {
            "link": "https://www.welivesecurity.com/2019/10/21/winnti-group-skip2-0-microsoft-sql-server-backdoor/",
            "content": "APT41 and multiple other threat groups attributed to Chinese state-sponsored actors have increased their targeting of upstream data entities since 2017. Finally, the malware parses and extracts SMS message data from the network traffic: FireEye Mandiant recently discovered a new malware family used by APT41 (a Chinese APT group) that is designed to monitor and save SMS traffic from specific phone numbers, IMSI numbers and keywords for subsequent theft. Further, four additional telecommunications entities were targeted in 2019 by separate threat groups with suspected Chinese state-sponsored associations. If found, the malware XORs the contents and stores the data in a path with the following format:The configuration files provide context into the targets of this information gathering and monitoring campaign. With this background, let's dig more into the malware itself.",
            "domain": "www.welivesecurity.com",
            "tokenized": [
                {
                    "sent": "APT41 and multiple other threat groups attributed to Chinese state-sponsored actors have increased their targeting of upstream data entities since 2017.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "Finally, the malware parses and extracts SMS message data from the network traffic:",
                    "is_evidence": 0
                },
                {
                    "sent": "FireEye Mandiant recently discovered a new malware family used by APT41 (a Chinese APT group) that is designed to monitor and save SMS traffic from specific phone numbers, IMSI numbers and keywords for subsequent theft.",
                    "is_evidence": 0
                },
                {
                    "sent": "Further, four additional telecommunications entities were targeted in 2019 by separate threat groups with suspected Chinese state-sponsored associations.",
                    "is_evidence": 0
                },
                {
                    "sent": "If found, the malware XORs the contents and stores the data in a path with the following format:The configuration files provide context into the targets of this information gathering and monitoring campaign.",
                    "is_evidence": 0
                },
                {
                    "sent": "With this background, let's dig more into the malware itself.",
                    "is_evidence": 0
                }
            ]
        },
        {
            "link": "https://exatrack.com/public/winnti_EN.pdf/",
            "content": "Additional malware family names are used in the blog post and briefly described. For a complete overview of malware used by APT41 please refer to the Technical Annex section of our APT41 report. It has been briefly mentioned by Kaspersky as “unknown backdoor”. One of the related samples is DEADEYE.APPEND (MD5: 37e100dd8b2ad8b301b130c2bca3f1ea), which has been previously analyzed by Kaspersky (https://securelist.com/operation-shadowhammer-a-high-profile-supply-chain-attack/90380/). The malware is capable of registry or service persistence, self\u0002removal, plug-in execution, and network connection forwarding. They contain meaningful names and provide a first hint on how the backdoor operates.",
            "domain": "exatrack.com",
            "tokenized": [
                {
                    "sent": "Additional malware family names are used in the blog post and briefly described.",
                    "is_evidence": 0,
                    "is_repeat": 0
                },
                {
                    "sent": "For a complete overview of malware used by APT41 please refer to the Technical Annex section of our APT41 report.",
                    "is_evidence": 0
                },
                {
                    "sent": "It has been briefly mentioned by Kaspersky as “unknown backdoor”.",
                    "is_evidence": 0
                },
                {
                    "sent": "One of the related samples is DEADEYE.APPEND (MD5: 37e100dd8b2ad8b301b130c2bca3f1ea), which has been previously analyzed by Kaspersky (https://securelist.com/operation-shadowhammer-a-high-profile-supply-chain-attack/90380/).",
                    "is_evidence": 0
                },
                {
                    "sent": "The malware is capable of registry or service persistence, self\u0002removal, plug-in execution, and network connection forwarding.",
                    "is_evidence": 0
                },
                {
                    "sent": "They contain meaningful names and provide a first hint on how the backdoor operates.",
                    "is_evidence": 0
                }
            ]
        }
    ]
}