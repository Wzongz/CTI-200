In late January 2018, ASERT discovered a new modular malware framework we call “yty”. The framework shares a striking resemblance to the EHDevel framework. We believe with medium condence that a team we call internally as “Donot Team” is responsible for the new malware and will resume targeting of South Asia. In a likely e ort to disguise the malware and its operations, the authors coded several references into the malware for football—it is unclear whether they mean American football or soccer. The theme may allow the network tra c to y under the radar. While we believe this framework and its components are new, it shares many Tactics, Techniques, and Procedures (TTPs) and Indicators of Compromise (IOCs) with the EHDevel malware framework. In September 2017, Bitdefender released a white paper (https://labs.bitdefender.com/2017/09/ehdevel-the-story-of-a continuously-improving-advanced-threat-creation-toolkit/) describing EHDevel and some of the campaigns that used it. Some of the highlights of it included the following:We assess with medium condence that the yty framework is a replacement for the EHDevel framework and that the Donot Team may start using it in campaigns in a similar manner as EHDevel. The evolution from EHDevel to yty shows the threat actors are continually improving and modifying their malware framework, adding to their sophistication.The evolution from EHDevel to yty shows the threat actors are continually improving and modifying their malware framework, adding to their sophistication. The actors use false personas to register their domains instead of opting for privacy protection services. Depending on the registrar service chosen, this could be seen as another cost control measure. The actors often used typo-squatting to slightly alter a legitimate domain name. In contrast, the registration information used accurate spelling, possibly indicating the domain naming was intentional, typos included. Each unique registrant usually registered only a few domains, but mistakenly reused phone numbers or the registration data portrayed a similar pattern across domains. Looking at shared IP infrastructure, it was easy to see the registration patterns and expand the network used by the attackers. The Donot Team relies heavily on subdomains. Nearly every domain discovered through the course of this investigation had multiple, unique subdomains and every malware sample analyzed communicated to subdomains. In at least two instances, the domain never resolved to an IP address. Instead, the malware used subdomains, which lead to active infrastructure. Many of the sub-domains only navigated to the third level, but other samples used overly complex subdomain structures down to the sixth or seventh level. Looking at registration patterns and passive DNS, many of these domains resolve for as little as three days before going o ine. It is possible the attackers use these small windows to test their malware operations. Although we did not observe the original distribution of the core binary, we believe the group speci cally targeted Pakistani individuals based on the decoy documents observed. They appeared to be o cial Government of Pakistan memos, see Figure 1, above. Donot Team’s TTPs, infrastructure, and the malware code are strikingly similar to the EHDevel malware reported by BitDefender and is likely the same group of operators. Bitdefender noted that the EHDevel malware appeared similar to malware analyzed by Blue Coat Labs in their report “Snake in the Grass (https://github.com/aptnotes/data/ les/679036/Snake.In.The.Grass.-.Python based.Malware.Used.For.Targeted.Attacks.-.BLUE.COAT.LABS.pdf)”. The “Snake in the Grass” report also showed malware similarities and infrastructure overlap with Operation Hangover (also known as the Patchwork Group). While Arbor agrees that there are suspicious similarities between the Donot Team and Patchwork, we did not uncover de nitive evidence to link the two groups. Additionally, a malicious document associated with yty was tagged (https://twitter.com/HybridAnalysis/status/968958087712460800) by Hybrid Analysis as “Viceroy Tiger”, but there hasn’t been much recent public information on this group that we could nd to corroborate. yty Malware Framework Analysis One of the TTPs associated with the Donot Team is the use of modular/plugin based malware frameworks. We call the new malware framework “yty” (based on debugging strings in its components). The components of the framework are shown in Figure 2: The delivery mechanism for the XLS le is unknown, but evidence suggests it could be a test document as seen in Figure 4: At the time of analysis, we only elicited a “loose” response from the C2 server. Continued execution is reliant on eliciting a “win” response. If a “win” response does not occur, the malware continues beaconing until it receives the appropriate response. Once the correct response is seen, the malware downloads the next component from the same C2 using the following URL path: A secondary macro in circular.xls establishes persistence for the setup.exe download as seen in Figure 9.Using an HTML
element labeled “pcinfo”—possibly displayed verbatim in the C2 panel—the malware beacon message contains various pieces of system information outlined below:The response from the C2 is an odd string containing multiple pieces, delimited by various characters, but boils down to what plugins to download/run and their file sizes. The plugins for this framework were downloaded from the same URI path (“/football/download/2/”) where boothelp.exe was located. As of February 2018, we observed the following plugins:The response from the C2 is an odd string containing multiple pieces, delimited by various characters, but boils down to what plugins to download/run and their le sizes. The plugins for this framework were downloaded from the same URI path (“/football/download/2/”) where boothelp.exe was located. As of February 2018, we observed the following plugins:The URL path for this C2 references the “bigdata” string observed in the macro persistence mechanism. Some of the POST parameters are unclear, but contain the following items:This plugin is written in C++ and is a key logger. It checks/creates a mutex named “twotwo“, uses the Windows SetWindowsHookEx and SetWinEventHook APIs to perform its key logging, and then relies on abobe.exe to ex ltrate the captured key strokes. Figure 14 shows an example of ex ltrated key log data.The last plugin seen in this framework was mboard.exe. It is written in Golang and is packed with UPX. The purpose of this plugin is to gather various system information such as the following:The collected is saved into multiple les with a “qr” extension appended. They are then sent to the C2 via abobe.exe. An example showing the running process list being sent to the C2 is shown in Figure 17.