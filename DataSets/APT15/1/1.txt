The Ke3chang group, also known as APT15, is a threat group believed to be operating out of China. Its attacks were first reported in 2012, when the group used a remote access trojan (RAT) known as Mirage to attack high-profile targets around the world. However, the group’s activities were traced back to at least 2010 in FireEye’s 2013 report on operation Ke3chang – a cyberespionage campaign directed at diplomatic organizations and missions in Europe. The attackers resurfaced with malware dubbed TidePool, documented as part of a campaign spanning from 2012 to 2015, and later with the RoyalCLI and RoyalDNS backdoors, which were used to target the UK government from 2016 to 2017. In 2018, the Ke3chang group was spotted using an apparently updated version of the Mirage RAT, dubbed MirageFox. We have been tracking the malicious activities related to this threat actor and made several noteworthy discoveries. First, from 2015 to 2019, we detected new versions of known malware families attributed to the Ke3chang group – BS2005 (operation Ke3chang malware) and the RoyalDNS malware. Second, we identified a previously undocumented malware family with strong links to the Ke3chang group – a backdoor we named Okrum. We first detected Okrum, through ESET telemetry, in December 2016; it targeted diplomatic missions in Slovakia, Belgium, Chile, Guatemala and Brazil throughout 2017. In this paper, we will take a deep technical look at this previously undocumented malware family and the other Ke3chang malware families detected from 2015 to 2019. We will provide evidence that the latter are evolved versions of known malware families attributed to Ke3chang group and explain how Okrum is linked to them – in terms of code, modus operandi and shared targets. Note: New versions of operation Ke3chang malware from 2015-2019 are detected by ESET systems as Win32/ Ketrican, and collectively referred to across this paper as Ketrican backdoors/samples, marked with the relevant year. In 2015, we identified new suspicious activities in European countries. The group behind the attacks seemed to have a particular interest in Slovakia, where many of the discovered malware samples were detected; Croatia, the Czech Republic and other countries were also affected. Our technical analysis of the malware used in these attacks showed close ties to BS2005 backdoors from operation Ke3chang, previously documented by FireEye in 2013, and to a related TidePool malware family discovered by Palo Alto Networks in 2016 that targeted Indian embassies across the globe.The story continued in late 2016, when we discovered a new, previously unknown backdoor that we named Okrum. The malicious actors behind the Okrum malware were focused on the same targets in Slovakia that were previously targeted by Ketrican 2015 backdoors.Red lights started flashing when we discovered that the Okrum backdoor was used to drop a Ketrican backdoor, freshly compiled in 2017. In 2017, the same entities that were affected by the Okrum malware (and by the 2015 Ketrican backdoors) again became targets of the malicious actors. This time, the attackers used new versions of the RoyalDNS malware and a Ketrican 2017 backdoor. n 2018, we discovered a new version of the Ketrican backdoor that featured some code improvements .In March 2019, we detected a new Ketrican sample that has evolved from the 2018 Ketrican backdoor. It affected the same targets as the backdoor from 2018. This timeline of events shows that the attackers were focused on the same type of targets but were using different malicious toolsets to compromise them – exposing their previously unknown project, Okrum, in the process.In late 2016, we identified a previously unknown backdoor that we named Okrum. We discovered that the Okrum backdoor1 was used to deliver a Ketrican sample2 . This newly discovered Ketrican sample from 2017 has evolved from the Ke3chang group’s BS2005 malware family and is described in section 4.2. Moreover, the entities where we detected Okrum in 2017 were previously affected with backdoors known to be attributed to the Ke3chang group – another hint that Okrum is the work of the same threat actor. The following sections provide a deep technical analysis of the Okrum backdoor.The functionality of the Okrum backdoor is not unlike the other backdoors operated by the Ke3chang group. The commands allow the attackers to download and upload files, execute binaries or run shell commands. The backdoor can also update itself to a newer version and can adjust the time it sleeps after each backdoor command.The backdoor itself is a dynamic-link library that is installed and loaded by two earlier-stage components. During our investigation, the implementation of these two components was changed frequently. Every few months, the authors actively changed implementation of the loader and installer components, to avoid detection. At the time of this publication, ESET systems have detected seven different versions of the loader component and two versions of the installer, although the functionality remained the same. We have not been able to find the original attack vector and dropper of the malware, but we have identified several components used in the Okrum malware:Although the Stage 1 loaders have varied frequently, they are all responsible for loading the very same Okrum backdoor. The Stage 0 loader is an optional component that loads the Stage 1 loader into memory.The Stage 1 loader samples3 compiled in January 2016 are dynamic-link libraries with the backdoor bundled at the end of the file. The last four bytes of the file determine the size of the backdoor, which is encrypted using the RC4 algorithm and a hardcoded key. The following RC4 keys were used in the analyzed samples:The loader first checks to make sure the process is not being emulated or executed within a sandbox. Four tricks are employed, as Figure 3 illustrates:The later Stage 1 loader samples4 compiled at the end of 2016 and in 2017 take a different approach than the early samples. They no longer come bundled with the encrypted backdoor file; instead, the backdoor is embedded within a valid PNG file. When the file is viewed in an image viewer, a familiar image is displayed (as seen in Figure 4) but the loaders are able to locate an extra encrypted file that the user cannot see. This steganography technique is an attempt by the malicious actors to stay unnoticed and evade detection.The encrypted payload is embedded in the zTXt chunk. According to the PNG format specification, this section should contain compressed text – such as licensing information – that would normally be displayed in the image properties. The zTXt chunk is, however, not critical for displaying the image correctly, and thus a PNG parser can ignore it if it is malformed (as in this case). Therefore, the image can be rendered correctly even when a broken zTXt section is present. The payload is decrypted using Tiny Encryption Algorithm (TEA) with a hardcoded key, and loaded within the process of the loader. The same decryption key is hardcoded in all the loaders:While one of them is implemented as a service called Ntmssvc that needs a Service Installer, the others are standalone executables. Two of the loaders make use of forced exceptions and hide their payload in the exception handlers. All of the loaders are, however, responsible for locating, decrypting and loading the backdoor, as described above.The first of the installers we detected is a Service Installer for the Ntmssvc service. Due to the same service name and matching PE Timestamps, we assume this component is to be used with the Stage 1 loader implemented as a service5 . The component can be executed in two modes, determined by the command line argument (install or uninstall). It creates or removes a service called Ntmssvc that mimics the legitimate Removable Storage service but in fact, it loads one of the Okrum loaders on each system startup.The second installer has the same PE Timestamp as one of the Stage 1 loaders6, so it is reasonable to assume they are meant to be used together. This component installs the specified file to be executed with each system start. Exactly three command line arguments are expected:In mode 1, a new hidden task named tn is scheduled, that executes file fp with each user logon. In mode 2, a shortcut file named tn is created in a Startup folder that points to the specified file fp. In both cases, COM interfaces are used (IPersistFile, ITaskScheduler, ITaskService).The Stage 1 loader decrypts and loads the backdoor, using an unusual execution method. The DOS header of the backdoor executable is valid, but can also be interpreted as shellcode. This allows the Stage 1 component to load the backdoor DLL into its address space, and execute a JMP or CALL instruction to offset 0x00 of the DLL, which passes control to the shellcode. The shellcode first calls the reflective loader export that applies relocations and resolves imports. Then it calls the export with the payload that executes the actual backdoor. Interestingly, the PE header is valid, which also makes more common execution methods possible. If distributed in the original, unencrypted version, the backdoor could also be executed directly by having the DLL loaded by any executable. It would also be possible to inject it directly into another process using the reflective loader exported by the DLL. It is possible that these techniques were used by some older versions of the malware; however, we have only witnessed execution using the shellcode embedded in the DOS header, as illustrated in Figure 5.Okrum can impersonate a logged on user’s security context using a call to the ImpersonateLoggedOnUser API, in order to gain administrator privileges. It automatically collects the following information about the infected computer:It starts communication with the C&C server and negotiates an AES key used in further communication. If not successful, a hardcoded key is used. Then, it registers the victim with the server by sending the collected information. Finally, it starts a loop in which the compromised computer queries for a backdoor command and then interprets it locally.In client->server direction of the communication, the data is transmitted in the Cookie header (additional data can be included in the HTTP Message Body if files are transmitted). In server->client direction, the data is embedded in the Set-Cookie header. An example of a client->server HTTP request is illustrated in Figure 6. The URI is different for different types of requests, but the data is always transmitted within the Cookie header. The data always consists of a series of parameters and values, separated by an ampersand, e.g.: tm=01/09/2018 12:30:00&hn=My-Computer&un=JohnDoe&dm=my.dns. suffix&ip=127.0.0.1&os=Windows Server 2016&fg=finance Several parameters are supported and which of them are used depends on the type of the request. In the client >server direction, the parameters identify the victim and the query made to the server; in the other direction, they determine the backdoor commands and arguments. Just like in other backdoors attributed to the Ke3chang threat actor, a campaign name is always sent to the server as a part of the request, in order to help the operators keep track of the operation. In the Okrum samples we analyzed, we have encountered three campaign names:The data is always AES-CBC encrypted and base64 encoded. The AES key negotiated with the server is used in the communication. Malware operators are trying to hide the malicious traffic with the C&C server within regular network traffic by registering seemingly legitimate domain names. For example, the samples that were used against Slovak targets communicated with a domain name mimicking a Slovak map portal:Similarly, in a sample that was detected in a Spanish speaking country in South America, the operators used a domain name that translates as “missions support” in Spanish:The backdoor commands are determined by the ct parameter embedded in the message from the remote server. A custom hash of this value is computed and compared with a hardcoded table. After interpreting a command, Okrum sleeps for a configurable amount of time. The Okrum backdoor supports only basic commands, which indicates it is either a first-stage backdoor, or, more likely, the malware operators execute more complicated commands manually. The full list of backdoor commands can be found in Table 2.Since the Okrum backdoor is not very technically complex, most of the malicious activity must be performed by manually typing shell commands, or by executing other available tools and software. This is a common practice of the Ke3chang group, as had also been pointed out previously in the Intezer and NCC Group reports monitoring Ke3chang group activity. Not all of these tools are necessarily malicious – some of them are common utilities such as a RAR archiver; others are potentially unsafe applications that can be abused by the attackers. We have spotted tools for dumping passwords, enumerating network sessions and others. Information about all the utilities we have seen being used by the Okrum malware is listed in Table 3.Similar utilities were observed being used by other Ke3chang malware, which is described in the next section. For example, a Ketrican backdoor from 2017 used NetSess, NetE, ProcDump, PsExec, RAR archiver utility, and Get-PassHashes.From 2015 to 2019, we detected malware that evolved from the BS2005 backdoors from operation Ke3chang – the Ketrican backdoors – and a new version of the RoyalDNS malware. In this section, we will go through these newly discovered samples, compare them to the malware families previously attributed to Ke3chang group, and explain how Okrum fits into the picture.All of the analyzed Ketrican 2015 samples were backdoors supporting the same set of basic commands as malware used in operation Ke3chang, such as downloading and uploading files, executing files and shell commands, and sleeping for a configurable time. Likewise, each of the files has a hardcoded campaign name, the C&C server domain name and URI, as in the samples used in operation Ke3chang. The list of IoCs extracted from the Ketrican samples discovered in 2015 can be found in Table 4.In the rest of this part of the paper, we will point out the major similarities between the coding style of the malware used in operation Ke3chang and the Ketrican backdoor samples discovered by ESET in 2015. These share the main features with the BS2005 malware family, but in some places, they have clearly evolved.The first trait common to both BS2005 and some of the 2015 Ketrican samples is that they create a copy of the Windows Command Prompt (cmd.exe) in their working directories and then use it to interpret backdoor commands. Both BS2005 and Ketrican backdoors use similar command-line patterns to execute a file or shell command using their Command Prompt copy and redirect its output to a file, as seen in Figure 7.The files created by the malware are stored in a working directory in one of Windows special folders (e.g.Local Settings). The special folder location is updated in different versions of the backdoors from operation Ke3chang but the path to the folder is always retrieved by accessing the following registry key, rather than using the SHGetSpecialFolderLocation API function: [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders] The Shell Folders registry key is only supported by Windows for backwards compatibility and is not the recommended way to access these folders. It is a rather unusual technique to use this key and that links the samples used in operation Ke3chang to the samples discovered in 2015.One of the artifacts shared among the analyzed samples is a heuristic to detect an emulated environment or a sandbox. The GetTickCount function is called before and after a loop with 999,999,990 iterations of incrementing a value. If the returned value doesn’t change between calls, emulation or a sandbox is detected and the process terminates itself. According to the FireEye report, at least one of the BS2005 samples from operation Ke3chang contained the very same heuristic. We were able to locate the same heuristic in all Ketrican backdoors discovered in 2015, as Figure 8 depicts.Just like the BS2005 family, the 2015 Ketrican samples control the Internet Explorer browser process using the IWebBrowser2 COM interface, to make their network communication look legitimate. Data is encrypted and encoded, and sent using the HTTP protocol. The response from the server is an HTTP page with backdoor commands and arguments included in a hidden input field. This data is expected to have a specific format that varies across the samples, but the same pattern is used, as shown in Figure 9.In the BS2005 malware samples, a specific two-step transformation is used for the data before it is sent to a remote server. First, the data is encrypted with a custom algorithm and then it is URL-safe, base64 encoded, meaning that all “+” characters are replaced with “*” characters, which allows the data to be transmitted as a part of the URL. In one of the samples, the following encryption algorithm is used: The same transformation is used in other samples from operation Ke3chang, except that constants other than 0x27 are used. In the samples discovered in 2015, the malware authors continued with this practice, as shown in Figure 10. Ketrican 2015 backdoors also use the combination of encryption and this URL-safe, base64 encoding and similarly vary the encryption method.In some of the samples, a similar weak-encryption algorithm is used except that the constant is subtracted instead of being added. In yet other samples, the encryption algorithm has been changed to AES.Our conclusions about the backdoors discovered in 2015 were also confirmed in a later Palo Alto Networks report about a malware family they call TidePool, which included two of the samples we analyzed8. The Palo Alto Network researchers claim the TidePool malware family is an evolution of BS2005 malware family, which is in accordance with our findings. However, this fact alone would not be enough to attribute the malware samples detected in 2015 to the Ke3chang group, since we have to consider the possibility of malware reuse between different APT groups. As also stated in the FireEye report, the source code used in operation Ke3chang is likely shared among different developers or teams of developers. Thus, we cannot assume that anybody who uses this malware is automatically the Ke3chang group. Nevertheless, we can confirm that the threat actor behind the samples discovered in 2015 had the same objectives and targeted the same type of organizations as the Ke3chang threat actor – diplomatic organizations and missions. This leads us to believe the group behind the Ketrican samples ESET discovered in 2015 is indeed the same actor that was behind operation Ke3chang.The Ketrican samples from 2015 described in the previous section and Okrum samples from 2017 could easily look like being part of two independent operations targeted against the same organizations. However, we discovered a direct link between the two malware families - one of the Okrum backdoors9 was used to drop a 2017 Ketrican sample10. This dropped backdoor had a PE Timestamp set to Aug 08 2017 that, according to our telemetry, appears to be valid. Our analysis showed it was – again – an evolution of backdoors used in operation Ke3chang, exhibiting the same coding style with several improvements. At some point, the attackers appear to have switched the Okrum backdoor to a freshly compiled Ketrican sample. The samples detected in 2017 closely resemble BS2005 backdoors from operation Ke3chang. The same set of commands and methods of network communication are supported, and the main features remain unchanged.Again, the authors continued to update the same parts of code as we have witnessed before. The special folder used as a working directory was updated to a new value (from Local Appdata/Local Settings to Templates/AppData). Before the collected data is sent to a C&C server (using the very same technique as in the BS2005 malware), it undergoes the same transformation where encryption is combined with the same URL-safe base64 encoding. The encryption routine was updated to AES or RC4. The authors also continue to use campaign names to keep track of the ongoing operations and to identify victims. Table 5 lists the IoCs extracted from the Ketrican samples detected in 2017.In 2017, the entities affected by the Ketrican 2015 and Okrum backdoors were targeted with a variation of the RoyalDNS malware, which has already been attributed to the Ke3chang group. Its main characteristic is using the DNS protocol to communicate with the C&C server. The RoyalDNS sample from the NCC Group report was compiled on June 3, 2017 while the data in the PE header of the newly discovered sample point to a more recent date, September 25, 2017. Both of the samples export the same functions, as seen in Figure 11, and use the very same rare type of communication with the C&C server.To communicate with the C&C server, a list of locally configured DNS servers is retrieved, and then the malware queries for specific TXT records of a C&C domain. The response from the DNS server encapsulates the backdoor commands. An example of such a DNS query packet is illustrated in Figure 12. The new RoyalDNS sample uses a different domain name than the original one:In 2018, we discovered new Ketrican samples. Among all the versions of the Ketrican backdoors we’ve found, these have evolved the most. An option to load a DLL was added to the traditional set of supported commands. The encryption algorithm has been replaced with the XOR cipher (volume serial number of the C volume is used as the key). The 2018 Ketrican backdoors use the same method of network communication as the samples from the BS2005 family – a combination of an HTTP request made via an instance of IWebBrowser2 COM object and response HTML pages with hidden input fields. What is different is that instead of using the CoCreateInstance API function to create the COM object instance directly, a registration-free COM technique is used. Finally, the 2018 Ketrican backdoors share another feature common for Ke3chang group backdoors. They are known to modify specific registry keys and values in order to weaken some security settings of the compromised machine, which can help them further extend their malicious capabilities to provide those not available via the backdoor itself. For example, Internet Explorer Enhanced Security configuration can be disabled by setting the following registry value:By setting this value, prevention of script execution and other valuable protections are disabled. This is not a new feature; the same set of registry keys is changed in BS2005 and Tidepool malware families, and in the Ketrican samples discovered in 2015, 2017 and 2018. The samples from 2018 are, however, the first ones to use PowerShell scripts to modify the keys. The older versions of the malware used registry API functions or the reg.exe utility for that.In March 2019, we detected two new Ketrican samples, one of which was similar to the 2018 Ketrican backdoor, and the other that has evolved from it. The previous Ketrican samples and the samples detected in 2019 largely overlap in commands, network communication, and obfuscation. The 2019 version also modifies the same rare combination of registry values as all earlier Ketrican samples, which is explained in the section above. There is one noteworthy difference between the previous Ketrican samples and the 2019 ones: instead of executing a new cmd.exe process for each PowerShell command (i.e. to change every registry value), there is only one instance of the process, which communicates with the malware over anonymous pipes.The Ke3chang APT group (a.k.a. APT15) has rightfully been on the radar of security researchers because of its decade-long operation, targeting high-value victims such as diplomatic entities, and other geopolitical aspects associated with them. While ESET does not engage in attribution of these activities to a particular nation-state, we do attempt attribution of individual malware-driven cyberattacks to a particular APT group. In this paper we have documented the previously unknown malware, Okrum, detected by ESET in Slovakia, Belgium, Chile, Guatemala and Brazil, documented other suspected Ke3chang activity (using the Ketrican and RoyalDNS malware families), and provided evidence that drives us to the conclusion that all of this is indeed the work of the Ke3chang threat actor. Just like other known Ke3chang malware, Okrum is not technically complex, but we can certainly see that the malicious actors behind it were trying to remain undetected by using tactics such as embedding the malicious payload within a legitimate PNG image, employing several anti-emulation and anti-sandbox tricks, as well as making frequent changes in implementation. As for the analyzed Ketrican samples, these show visible evolution and code improvements from 2015 to 2019. What remains to be answered is how the malware was distributed to the victim machines. ESET will continue to track the malicious activities of the Ke3chang threat group.