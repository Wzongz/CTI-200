MuddyWater is a well-known threat actor group founded by Iran. “that has been active since 2017. They target groups across Middle East and Central Asia, primarily using spear phishing emails with malicious attachments. Most recently they were connected to a campaign in March that targeted” organizations in Turkey, Pakistan, and Tajikistan.[0] MuddyWater attacks are characterized by the use of a slowly evolving PowerShell-based first stage backdoor we call “POWERSTATS”. Despite broad scrutiny and reports on MuddyWater attacks, the activity continues with only incremental changes to the tools and techniques. [1] In June 26 2019 a group called “Green Leakers” on telegram published screenshots of the C2 admin panel as you can see below along with screenshot of the muddyc3 c2 source code . they announced that they are selling all the leaked tools for 0.5BTC. At that time i got the source code from github , so i tried the code to find that the core of the c2 which is powershell payload is messing ( the leaker didn’t include the payload in order to by all the tools ). so i didn’t have time to reverse engineer the source code and i left it. last week i got 3 days off from my work ( working in SOC will keep you for ever busy ) so i started analyzing the code which will be discussed below and i was able to understand how it works in order to create the messing powershell payload and make the c2 come to life. I didn’t just revive the C2 but also added more advanced functionality which will be released as separate tool soon. the web server has a list of urls for each module some of the URLs will work with GET and other with POST depending how the function configured. below is a summary of the functions i created an agent for it : This URL ( /cm/(.*) ) will accept GET request with agent ID in order to serve the commands for this agent ( from command queue ) , if the agent is not registered or if the C2 goes down then up and old agent reconnected, it will send REGISTER as response which will force the agent to register by sending request to /info/ URL as you will see below in agent code. also it will get the current time when the agent ask for command to determine when the last time agent probed to give information if the agent died or still alive.this part of code from powershell POC agent which will run in loop and keep probing the C2 for new commands using URL /cm/ Now if the command is REGISTER then it will contact URL /info/ to register and get the commands ( this is very important in order to not lose the agent when the C2 is down ). if the command is empty it will wait 2 seconds before probing again for command.at last the command will be executed using Invoke-Expression and the output data will be encoded in base64 then uploaded to URL /re/ which will be explained below this code from the powershell POC agent which will check if the command got from the C2 is load then it will get the second argument splited by space to request and download the required module. the request will be handled by the function load which will be explained below. the output of load function will include the module which will be executed by Invoke-Expression Now after we finished the analysis part of this article i will walk you through using muddyc3 with POC powershell agent. please note that this just POC and the full tool written on top of muddyc3 will be released soon. i finished implementing many cool features but i will wait until i add more and to be fully tested before the release.Thank you for reading my article . you can find the muddyc3 with payload.ps1 ( powershell agent POC ) here : Muddyc3-Revived i will release my tool which built on top of muddyc3 soon. right now it include below features and there is more am working on :