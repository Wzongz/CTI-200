IBM® X-Force® has been researching and tracking destructive malware in the Middle East, particularly in the industrial and energy sector. Since the first Shamoon attacks that started affecting organizations in the region in summer of 2012, we have been following the evolution of destructive, disk-wiping malware deployed to cause disruption. In recent analysis, X-Force Incident Response and Intelligence Services (IRIS) discovered new malware from the Wiper class, used in a destructive attack in the Middle East. We named this malware “ZeroCleare” per the program database (PDB) pathname of its binary file. According to our analysis, ZeroCleare was used to execute a destructive attack that affected organizations in the energy and industrial sectors in the Middle East. Based on the analysis of the malware and the attackers’ behavior, we suspect Iran-based nation state adversaries were involved to develop and deploy this new wiper. Given the evolution of destructive malware targeting organizations in the region, we were not surprised to find that ZeroCleare bears some similarity to the Shamoon malware. Taking a page out of the Shamoon playbook, ZeroCleare aims to overwrite the Master Boot Record (MBR) and disk partitions on Windows-based machines. As Shamoon did before it, the tool of choice in the attacks is EldoS RawDisk, a legitimate toolkit for interacting with files, disks, and partitions. Nation-state groups and cyber criminals frequently use legitimate tools in ways that a vendor did not intend to accomplish malicious or destructive activity. Using RawDisk with malicious intent enabled ZeroCleare’s operators to wipe the MBR and damage disk partitions on a large number of networked devices. To gain access to the device’s core, ZeroCleare used an intentionally vulnerable driver and malicious PowerShell/Batch scripts to bypass Windows controls. Adding these ‘living off the land’ tactics to the scheme, ZeroCleare was spread to numerous devices on the affected network, sowing the seeds of a destructive attack that could affect thousands of devices and cause disruption that could take months to fully recover from. These tactics resemble the way Shamoon was launched in attacks on Arabian Gulf targets in 2018. X-Force IRIS assesses that the ITG13 threat group, also known as APT34/OilRig, and at least one other group, likely based out of Iran, collaborated on the destructive portion of the attack. X-Force IRIS’s assessment is based on ITG13's traditional mission, which has not included executing destructive cyber-attacks in the past, the gap in time between the initial access facilitated by ITG13 and the last stage of the intrusion, as well as the different TTPs our team observed. To date, X-Force IRIS has not found any previous reporting on the "ZeroCleare" wiper, its indicators, or elements observed in this campaign. It is possible that it is a recently developed malware and that the campaign we analyzed is one of the first to use this version. X-Force IRIS has been following a marked increase in destructive attacks in the past year, having logged a whopping 200 percent increase in the amount of destructive attacks that our team has helped companies respond to over the past six months (comparing IBM incident response activities in the first half of 2019 versus the second half of 2018). Destructive attacks on the energy and industrial sectors have been a rising concern, especially in countries where the economy relies on oil and gas industries, like in some parts of the Middle East and Europe. While we have seen them more frequently in the Middle East, these attacks are not limited to any part of the world and can be launched by any offensive nationstate group seeking to adversely affect the economy of rival countries, or by cybercriminals that use destruction as a pressure tactic. Overall, destructive attacks we have been seeing affect organizations are being carried out by threat actors of varying motivations who could be employing destructive components in their attacks. Some pressure victims to pay them, others counterblow when they are not paid. When these attacks are carried out by nation state adversaries, they often have military objectives that can include accessing systems to deny access to, degrade, disrupt, deceive, or destroy the device/data.The ZeroCleare wiper is part of the final stage of the overall attack. It is designed to deploy two different ways adapted to 32-bit and 64-bit systems. The general flow of events on 64-bit machines includes using a vulnerable, signed driver and then exploiting it on the target device to allow ZeroCleare to bypass the Windows hardware abstraction layer and avoid some operating system safeguards that prevent unsigned drivers from running on 64-bit machines. This workaround has likely been used because 64-bit Windows based devices are protected with Driver Signature Enforcement (DSE). This control is designed to only allow drivers which have been signed by Microsoft to run on the device. Since ZeroCleare relies on the EldoS RawDisk driver, which is not a signed driver and would therefore not run by default, the attackers use an intermediary file named soy.exe to perform the workaround. They load a vulnerable but signed VBoxDrv driver which the DSE accepts and runs and then exploit it to load the unsigned driver, thereby avoiding DSE rejection of the EldoS driver. Once loaded, the vulnerable VBoxDrv driver is exploited to run shellcode on the kernel level. Post-exploitation, the driver was used to load the unsigned EldoS driver and proceed to the disk wiping phase. Having analyzed soy.exe, we determined it was a modified version of the Turla Driver Loader (TDL) of which purpose is to facilitate that very DSE bypass. The ZeroCleare attack is facilitated by a number of files that each fulfill a different role in the infection chain. Files we analyzed are either scripts or executables designed to spread and launch the ZeroCleare malware across the targeted infrastructure. ZeroCleare comes in two versions, one for each Windows architecture (32-bit and 64-bit), but while both exist, only the 64-bit worked. The 32-bit version was supposed to function by installing the EldoS RawDisk driver as a driver service before beginning the wiping process but caused itself to crash when attempting to access the service during the wiping process. Since only the 64-bit version worked, the analysis in this paper will refer to that version.The following table lists the files we analyzed as part of what enabled attackers to infect devices with ZeroCleare and spread through compromised networks. This file was identified as the new wiper that was deployed in destructive attacks to damage Windows-based devices. It was named ZeroCleare by IRIS per the file path of its PDB file. As mentioned earlier in this paper, ZeroCleare relies on the legitimate EldoS RawDisk driver that was previously used in Shamoon attacks to access and wipe the hard drive directly. Using this driver, which is an inherently legitimate tool, allows ZeroCleare attackers to bypass the Windows hardware abstraction layer and avoid the OS safeguards. To install the EldoS RawDisk driver, ZeroCleare uses another binary, Soy.exe, to load the driver on the targeted device and activate it. X-Force IRIS analyzed Soy.exe and found that it is a modified version of the Turla Driver Loader (TDL), which is designed to bypass x64 Windows Driver Signature Enforcement. The TDL application works by first installing a legitimate but vulnerable, signed, VirtualBox driver, vboxdrv.sys (in this case it is named saddrv.sys). Once loaded, this vulnerable driver can be exploited to run shellcode at the kernel level, which in this case is used to load the unsigned EldoS driver.In order to activate the disk management driver, the malware needed to open a file handle via a unique filename using the logical drive (For example, C:\). The file name's format requested by function CreateFileW must start with # followed by the license key issued to the developer by EldoS.The ClientUpdate.exe (x64) wiping function creates a buffer of random bytes and uses function DeviceIoControl to send the buffer to the RawDisk driver to write data to the disk and wipe the victim's hard drives. Similar to what the Shamoon malware does, this would overwrite the MBR, partitions, and files on the system with random junk data.Same as ClientUpdate.exe (x64), this file was also identified as the ZeroCleare wiper. As it is designed for 32-bit Windows systems, Driver Signature Enforcement does not prevent unsigned drivers from running. Therefore, this version of ZeroCleare does need to use Soy.exe or TDL, the latter being only applicable to 64-bit systems.Next, it attempts to activate the disk management device driver by opening a file handle via a unique filename using the logical drive (For example, C:\). The file name's format requested by function CreateFileW must start with # followed by the license key issued to the developer by EldoS. This 32-bit ZeroCleare version attempts to open the following filename:This version did not work properly. During analysis the sample crashed as the disk management driver had not been installed and was therefore not accessible. We can theorize that this may be a bug in the code. X-Force IRIS patched the 32-bit ZeroCleare sample in order to continue the analysis provided in this paper. Once it worked, we noted that this version’s wiping behavior was similar to that of ClientUpdate.exe (x64), which functioned by creating a buffer of random bytes and used the function DeviceIoControl to send the buffer to the RawDisk driver to write data that would wipe the victim's hard drive(s). Similar to what the Shamoon malware does, this would overwrite the MBR, partitions, and files on the system with random junk data.The file soy.exe had a special role in the overall kill chain of ZeroCleare attacks as it was necessary for the initial bypass of Windows OS controls. This file was identified as a customized version of the Turla Driver Loader (TDL), which is a driver loader application designed for bypassing Windows x64 Driver Signature Enforcement (DSE). DSE is a protective feature that was introduced in 64-bit versions of Windows 8 and 10, to prevent the loading of drivers unsigned by Microsoft. TDL works by first loading a legitimate, Microsoft-signed, VirtualBox VBoxDrv driver. However, a vulnerable version of the driver is intentionally used, and TDL can then exploit the vulnerability to run kernel-level shellcode and ultimately load other, unsigned drivers Before decoding the resources, soy.exe creates a mutex called Ptición de trabajo. It then attempts to access its resource section to read encoded resource 103 and uses XOR key 0XAAAAAAAAAAAAAAAA to decode it. Next, soy.exe writes the decoded content to a 64-bit file called elrawdsk.sys1 . This file was identified as the 64-bit version of the EldoS RawDisk driver, version 3.0.31. After that, soy.exe attempts to access resource 1 and uses XOR key 0XFFFFFFFFFFFFFFFF to decode it. The soy.exe sample then writes the decoded content to a 64-bit VirtualBox VBoxDrv.sys driver file called saddrv.sys2 , which is known to have privilege escalation and arbitrary code execution vulnerabilities. This file is a signed driver. Once the resources have been decoded, soy.exe tries to create and start a driver service with name VBoxDrv and saddrv.sys, in order to load the vulnerable VBoxDrv device driver. At this point, the soy.exe sample uses the Turla Driver Loader (TDL) method to exploit the vulnerability in the VirtualBox driver and load and execute the following shellcode:A batch file is a script file that’s typical to DOS, OS/2 and Microsoft Windows. It consists of a series of commands to be executed by the command-line interpreter, stored in a plain text file. On devices running Windows operating systems, a batch file would store commands in serial order. ZeroCleare attackers used at least seven batch files in the attack’s flow to add functionality.Batch script v.bat is designed to read a text file containing system hostnames. In this case, the file is called 'listfile.txt' although other names for this file have also been observed. For each hostname within the list, the script first copies the contents of directory "C:\Users\$USER \Desktop\UpdateTemp" to "\\$hostname\c$\Windows\Temp" and then attempts to run "cmd /c c:\Windows\Temp\cu.bat" using Windows Management Interface Command (WMIC), which is a simple command prompt tool that returns information about the system that’s running it.Once it is run by its predecessor (v.bat), the batch script cu.bat begins by switching to the directory C:\Windows\Temp. It checks for the existence of '%PROGRAMFILES(X86)%' to determine if it is running on a 64- or 32-bit system architecture. It will change to the 'x64' directory as needed, but otherwise the switch proceeds with the 'x86' directory. Once that’s established, cu.bat runs the file .\ClientUpdate.exe, which is the ZeroCleare malware.PowerShell is a task-based command-line shell and scripting language built on .NET. As such, it is part of every Windows operating system. While PowerShell is originally designed to help system administrators and power-users rapidly automate tasks that manage OS and its processes, it is also widely used by attackers that rely on ‘living off the land’ tactics. ZeroCleare attackers used some PowerShell scripts in the attack kill chain. Further detail follows.X-Force IRIS identified two PowerShell scripts with the name ClientUpdate.ps1. The first and shorter of the two appeared to be the parent of the second and larger script. The first, short script,3 takes as its parameter a decryption key and defines a variable $ClientData which contains a large quantity of AES-encrypted and Base64-encoded data. The script decodes this data with the decryption key, saves it in the current directory as _ClientUpdate.ps1, and executes it using PowerShell.exe. It passes the decryption key as a parameter. It then sleeps for 5 seconds before deleting the newly created script file. We were able to identify the decryption key from system artifacts and discovered that the $ClientData variable contained the larger version of the ClientUpdate.ps1 script. The second ClientUpdate.ps1 script4 is significantly longer and more complex. The overall purpose of this script is to spread the ZeroCleare malware as far as it can across the domain. This script sets out to do that by setting up a network of master and slave (agent) systems, with each agent responsible for copying and executing the malware onto a proportion of the target (client) systems. Domain controllers were specifically chosen as agents to facilitate the spreading, and the Active Directory PowerShell module 'Get-ADComputer' cmdlet was used to assemble lists of target and client systems. The script accepts a large variety of parameters, most of which are optional with the exception of Username, Password, and Decryption key.The script is multifunctional and can act in a master or slave capacity depending on the parameters originally passed to it.The way the script is laid out means that the same script can be used by master or agent systems with the parameters determining what function they should be performing. The main body of the script performs the following:Once it has done this for all systems in $AllDC, the ClientUpdate.ps1 PowerShell script then retrieves a list of all non-DC systems using the PowerShell module Get-ADComputer. It filters out those already present on its DC list and stores them as variable $AllClient. Next, the script divides up the client list and assigns portions to each of the initialized domain controller agents. The agents work to copy and execute the ZeroCleare malware onto each of their assigned clients. There are also functions to keep track of agent workloads and the number of failed and successful clients. A client is determined to have failed if the agent cannot connect to it and create a shared folder on it. As redundancy, a swapping mechanism is in place to pass failed clients to another agent to try to infect them. These agents do not appear to check the status of the drive wiping malware itself. A redundancy mechanism of sorts, or maybe a way to resuscitate deleted malware files, the ClientUpdate.ps1 script contains a number of AES-encrypted and base64-encoded files stored within an array called $UpdateTempContents. We decrypted the contents of $UpdateTempContents using the identified key and found that these files all matched samples we encountered previously in this attack, namely.Drilling into the first script, GPOClientUpdateCore.ps1, we inferred it was used for an UpdateDCGPO function within ClientUpdate.ps1 script. This function applies a group policy object (GPO) to the domain controllers5 . Within this function the script is copied to:The contents of this script are generated at runtime by the Generate-ClientController function of ClientUpdate.ps1. The generation function should result in the contents of $UpdateTempContents as found within ClientUpdate.ps1 that is copied to the next script, GPOClientUpdateCore.ps1. However, in the script we analyzed, this did not appear to work and $UpdateTempContents was empty. It could mean that the extraction and execution portions of this particular script sample failed. Drilling into the second script, ClientUpdateCore.ps1, we inferred it was used by the Master and Agent systems to copy to and execute on target clients. This script does the following:In the specific sample provided of ClientUpdateCore.ps1, the generation script appears to have not worked correctly and $UpdateTempContents is empty, meaning that the extraction and execution parts of the function would have failed.X-Force IRIS assesses that the ZeroCleare campaign included compromise and access by actors from the ITG13 group and at least one additional group, likely Iran-based threat actors. This assessment is based on ITG13's traditional mission, which has not included executing destructive cyber-attacks in the past, the gap in time between the initial access facilitated by ITG13, the last stage of the intrusion, as well as the different TTPs observed. Let’s look at the details of some of the resources used throughout the ZeroCleare attack and which can connect it with ITG13. For initial access, the IP address 193.111.152[.]13, which was associated with ITG13 in recent Oilrig/APT34 leaks, and as also reported by Palo Alto, was used to scan target networks and access accounts as early as the Fall of 2018.6 A different Iranian threat actor likely accessed accounts from that address in mid-2019 preceding disk wiping operations. One of the IP addresses used to access compromised network accounts in mid-2019 was 194.187.249[.]103, which is adjacent to another IP address, 194.187.249[.]102. That last IP address was used several months prior to the attack by the threat actor Hive0081 (aka xHunt).7 Additionally, while recent reporting indicates that the Russian threat actor IRIS tracks as ITG12 (aka Turla) had access to ITG13 tools and infrastructure potentially during this time frame, X-Force IRIS does not believe ITG12 was behind the ZeroCleare attack.8 During the destructive phase, ITG13 threat actors brute forced passwords to gain access to several network accounts, which were used to install the China Chopper and Tunna web shells after exploiting a SharePoint vulnerability. X-Force IRIS found an additional web shell named "extension.aspx", which shared similarities with the ITG13 tool known as TWOFACE/SEASHARPEE including the methods that were dynamically called from assembly, the use of AES encryption, as well as single letter variable names. The same threat actor also attempted to leverage legitimate remote access software, such as TeamViewer, and used an obfuscated version of Mimikatz to collect credentials from compromised servers. Regarding the ZeroCleare malware itself, while it shares some high-level similarities with Shamoon v3, specifically in how it used an EldoS RawDisk driver, X-Force IRIS assesses that ZeroCleare is dissimilar enough in its code and deployment mechanism to be considered distinct from the Shamoon malware family and treated as separate malware. While X-Force IRIS cannot attribute the activity observed during the destructive phase of the ZeroCleare campaign, we assess that high-level similarities with other Iranian threat actors, including the reliance on ASPX web shells and compromised VPN accounts, the link to ITG13 activity, and the attack aligning with Iranian objectives in the region, make it likely this attack was executed by one or more Iranian threat groups.Various links inferred from examining common TTPs and indicators of compromise as mentioned in the previous section make it possible that this wiper variant was built by Iranbased nation state attackers. Recent activity from that sphere includes the “Sakabota” backdoor activity, recently reported by X-Force IRIS, also tied to ITG13 (aka “Oilrig” and “APT34”), as well as the Lyceum campaign reported by Dell-EMC SecureWorks. In these campaigns, the top targets were Kuwaiti shipping and transportation organizations.Nation-state attackers have typically carried out destructive attacks against the energy sector, with historic focus especially oil and gas; however, destructive attacks can target any entity. Why has this sector been finding itself in the crosshairs of such activity? The key role oil and gas production and processing play on both the national and global level, represents a high-value target for state-sponsored adversarial actors. These types of attackers may be tasked with conducting anything from industrial espionage, to cyber kinetic attacks9 designed to disrupt the critical infrastructure of rival nations. Depending on the sophistication, scale, and frequency of attacks, cyber incidents in this space have the potential to disrupt critical services, damage or destroy highly specialized equipment, and ultimately inflict detrimental cascading effects upon global energy10 security and industries downstream.11, 12 While nation state attacks have been happening more in the past decade, it is since at least 2012 that Iranian state-sponsored threat actors have been leveraging cyber-attacks to inflict destructive, kinetic effects on their targets. 13 The use of cyber-based weapons in lieu of conventional military tactics presents Iran, in this case, with a low-cost, and potentially nonattributable means of conducting hostile, and even warlike activity. With attribution to one specific group becoming a challenge nowadays, working under the cyber cloak of anonymity can also allow Iran to evade sanctions and preserve its relations with international players who may support its economic and nuclear energy interests. 14 Looking at the geographical region hit by the ZeroCleare malware, it is not the first time the Middle East has seen destructive attacks target its energy sector. In addition to underpinning the economies of several Gulf nations, the Middle East petrochemical market, for example, hosts approximately 64.5% of the world’s proven oil reserves, making it a vital center of global energy architecture. 15, 16 Destructive cyberattacks against energy infrastructure in this arena therefore represent a high-impact threat to both the regional and international markets.When it comes to destructive attacks, the critical actions for security teams to take are early detection and escalation and coordinated response to contain and stop the spread. Here are some tips from our team that can help mitigate the risk of destructive malware.Each threat actor has different motivations, capabilities, and intentions, and threat intelligence can help provide insights that increase the efficacy of an organization’s preparedness and eventual response to an incident.Incorporate multiple layers of security controls across the entire Cyberattack Preparation and Execution Framework.In most attacks, adversarial actors leverage privileged accounts to expand their foothold in compromised networks. Limit the number of those accounts to a minimum and back them up with multi-factor authentication (MFA). Also, don’t allow one accounts to access all systems.Deploy Identity and Access Management (IAM) to apply business-process centric policies to what your users can access. That way, if their account is compromised, the attacker will have a harder time using it for access to other parts of the network. Leveraging IAM can also help baseline legitimate access and alert security teams when lateral movement could be abusing access to compromised accounts.Backing up systems is a foundational best practice, but ensuring the organization has effective backups of critical systems and testing these backups is more important than ever. Being able to use backups in recovery can make a significant difference in remediating destructive malware attacks.Use of a well-tailored tabletop exercise and a cyber range simulation can help ensure that your teams are indeed ready, on both the tactical and strategic levels, to manage a destructive malware incident. Rehearsed response plans require ongoing testing and adjustment, but they allow the IR team to carry out plans and be able to implement them effectively when the time comes to respond and remediate. For emergencies or if your organization is under attack, please call: X-FORCE EMERGENCY RESPONSE HOTLINE 888-241-9812 IBM X-Force studies and monitors the latest threat trends, advising customers and the general public about emerging and critical threats, and delivering security content to help protect IBM customers. From infrastructure, data and application protection to cloud and managed security services, IBM Security Services has the expertise to help safeguard your critical assets. IBM Security protects some of the most sophisticated networks in the world and employs some of the best minds in the business. Learn more at ibm.com/security.IBM, the IBM logo, ibm.com, and X-Force are trademarks of International Business Machines Corp., registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on the web at “Copyright and trademark information” at ibm.com/legal/copytrade.shtml. This document is current as of the initial date of publication and may be changed by IBM at any time. Not all offerings are available in every country in which IBM operates. The information in this document is provided “as is” without any warranty, express or implied, including without any warranties of merchantability, fitness for a particular purpose and any warranty or condition of non-infringement. IBM products are warranted according to the terms and conditions of the agreements under which they are provided.