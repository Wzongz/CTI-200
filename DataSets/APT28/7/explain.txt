The discovery of Stuxnet in the nuclear processing plant in Natanz, Iran laid the ground for a new family of cyber-attacks: advanced persistent threats. Although the term has since become highly popular, state-sponsored cyber-intelligence operations have been carried out since long before the advent of Stuxnet or Flamer; less known advanced persistent threats such as APT28 (or Sofacy) have been covertly running in Europe since 2007.When it was initially coined, the term “Advanced Persistent Threat” was used to define an attack that, unlike regular commercial-grade malware, would focus on a particular target, its network topology and defenses. The purpose of this type of attack is exfiltration of sensitive data over a long period of time or silently crippling their industrial processes. In recent years, APTs have started to define persistent attacks launched by foreign state adversaries that no security company or victim government would explicitly name for fear of economic or political repercussions. Another aspect that makes calling on attacking states is the difficulty in attribution: the Internet has no physical boundaries and the technical skills of the attacking parties can make it look as the attack was launched by a rival state. To connect the dots between an identified attack and the state actor(s) behind it, companies like Bitdefender look for solid evidence inside the APT code or in the used communication infrastructure. The following report is a technical investigation of some particularities in the APT28 payload implementation that allowed us to link the threat to its operators.Our recent investigation into the Sofacy operations revealed that the cyber-group is extremely active and focused on specific regions. The primary targets of APT28 are potential victims in several countries such as Ukraine, Spain, Russia, Romania, the United States and Canada. A particular interest was found for Ukraine. Between Tuesday, 10th of February and Saturday, 14th of February 2015, the APT28 team scanned 8,536,272 IPs for possible vulnerabilities. Coincidentally, during this period, in Minsk, the political leaders of Belarus, Russia, Germany, France and Ukraine were participating in a summit, discussing the ceasefire in the Donbass region in the east of Ukraine. After February 14th, the APT28 operators shifted their attention to Spain. The map of affected countries is illustrated in Figure 1. It is currently unknown what criteria the APT28 operators used to select targets, but our research identified that they are picked from a list of vulnerable IP addresses prepared beforehand. The same research shows all targets belong to different categories: political ([removed]), e-crime services, telecommunication services or aerospace industry. More information about the victims can be found in Appendix 1. We have reasons to believe that the operators of the APT28 network are either Russian citizens or citizens of a neighboring country that speak Russian. Our assumption is supported by different markers identified during analysis. When we first analyzed the pool of files we had collected on APT28, we counted the number of binaries compiled between 08:00 and 18:00 on working days (Monday to Friday) for every time zone. It was revealed that UTC+4 stands out, as 88% of files are compiled during this interval. Out of the other countries sharing the same time zone (Russia, Georgia, Azerbaijan), Russia is the only country that possesses the necessary skills and resources to pull off this kind of attack. In the graphic below (Figure 2) the samples are grouped by the hour they were compiled (UTC+4). It can be seen that most were compiled between 08:00 and 18:00. Another clue that supports the assumption that the authors are from a Russian-speaking country is found in a hacking tool designed to grant system privileges. This tool was found along with files related to APT28 files. The header of the file called xp.exe (78450806E56B1F224D00455EFCD04CE3) features a hardcoded path to a debug file (C:\Users\Пользователь\Desktop\cve-2014-4076\ cve-19abdba\Debug\CVE-2014-4076.pdb). The string Пользователь translates to users in Russian. We have reasons to believe that this file is part of the same APT28 attack since it had its modification/creation time modified to 14/04/2008, 16:00, just like most of the other APT28 files used in the attack. All files used in the attack were compiled after 2013. Changing the date was just a measure to throw off any victim who would perform a shallow search for new files, should they have any doubts about the security of their system. One of the main purposes of the server we analyzed is to automate the process of finding new victims that can be marked as “vulnerable.” This is done by exhaustively scanning and probing a pre-determined pool of IP addresses contained in a range. The server-side application has four main components, as follows: Rather than taking a “shotgun” approach, the APT28 victims are hand-picked. The script has a hard-coded list of IP classes; it iterates through these subnets and generates a list of random IPs within the range. If the operators scanned all IPs within the range, it would increase the chances of the attacked party noticing their systems are actively probed from the outside. After the random generation process completes, these IPs are added to the database. Each IP address is then given a priority level. At the time of writing, the database contains the 58,624 IPs related to the incident described in Appendix 1. All these IP addresses have the same priority level, set to 1. The scanning bots are individual systems, all situated in different networks. We presume this was a necessary approach to make the scanning process look organic. If a single IP or a set of IPs from the same network would scan entire subnets, it would raise suspicions or trip intrusion detection systems and their activity would likely be interrupted. To get their scan jobs, each bot would authenticate to the server via cookies. Upon successfully authenticating, the scan bot receives a list of maximum 16 IPs per request. For each IP, it will scan certain ports using the nmap tool (Appendix 1). If it finds open ports, it then contacts the server and the information retrieved by nmap is saved in the database. Subsequently, the respective IP address is marked as vulnerable. The process is described in the figure below (Figure 3): The APT28 group relies on three distinct attack vectors to infect their targets: spear phishing e-mails with crafted Word and Excel documents attached, phishing websites hosted on typosquatted domains and malicious iFrames leading to Java and Flash zero-day exploits. The client usually gets infected by accessing an URL hosting an exploit kit. Upon successful exploitation, a first stage dropper (in our case the name is runrun.exe) is written to the disk. Its main purpose is to drop a file (api-ms-win-downlevel-profile-l1-1-0.dll) and execute it using rundll32.exe. This, in turn, contacts the C&C server and downloads the second stage component. The second component is installed using the same method as described above. First, a dropper is executed (winloat.exe) which writes one of the key components of the attack (advstoreshell.dll) to the disk, along with a configuration file (msd). The configuration f ile contains essential information such as a list of three servers that the backdoor will try to contact (win*********ore.net ,micro********er.com and 1***.net), the interval between requests and a flag that indicates whether key logging should be activated or not. At this point, the attacker takes control of the machine and deploys different tools and components to achieve his goal. In the case we analyzed, the attacker downloaded 3 hacking tools: More information about the tools used is provided in Appendix 3. The first stage component and the second stage component are further discussed in Appendix 4 and Appendix 5, respectively. Finally, the additional module (pr.dll) is analyzed in Appendix 6. Right after deploying their payloads, the attacking party changed the time stamps of all the files downloaded by the second stage dropper to 14/04/2008, 16:00. This technique allowed the attackers to hide the files in case victims would suspect the attack and attempt to list new files written on the disk.The latest creation date is 13/05/2015, which hints at the date the attack happened. Given that it took almost an hour from the moment the f irst downloader got written to the disk to the arrival of the second stage downloader, this process was likely carried out manually by a human operator. An important observation is that all of the components, except one, had been compiled before the attack. “%allusersappdata%\ Pr.dll” is the only file that was compiled 5 hours after the compromise. This suggests this file was specifically built for the target. The victims we have identified belong to different industries and sectors. Our research shows that the attack targeted political figures, government institutions, telecommunication and e-crime services, as well as aerospace companies from Germany, Ukraine, Russia and Romania. Some of the victims could be identified by analyzing the information stored on the central server we have investigated. The stored information contained traces of stolen information in the form of e-mails. Some were reported by our internal systems. The e-mails we have identified on the central server revealed victims from the first two categories. On 13th May 2015 two .pst files named ‘C:\ProgramData\backup.pst’ and ‘C:\ProgramData\backup2.pst’ were copied to the server. The e-mails seem to be addressed to the [redacted]. On July 9th 2015, fourteen archives were copied on the server. Among them were two .dbx (Outlook Express database) files. The e-mails seem related to [redacted]. On June 18th the file “F:\Outlook Express\AC_VTS_ÐÊÒ.dbx” was transferd to the central server. The emails belong to [removed] Also on June 18th, the file “F:\Outlook Express\Kydla.dbx” was transfered on the server. The emails belong to [redacted] All these victims seem related to the aerospace industry or aircraft research programs. The context also supports the Russian origin, given the huge media coverage of the Russian “smartplane” PAK FA T-50 Fighter and America’s F-35. We presume the APT28 authors might have attempted to explore new technologies being developed in the aerospace industry for integration. Our internal services also flagged a number of computers as under attack, such as those belonging to [redacted]. In Romania, these flagged computers are part of government infrastructures or are closely related to the Romanian government. Analyzing the APT28 command and control server identified two ongoing attempts to find new victims. The process consists of scanning the ports of a large IP list, extracted from a database. The port scanning process is carried out via the free tool “nmap”. If one of the ports is found open, the IP is marked as “vulnerable” and the corresponding information is saved. The command used for probing is illustrated in figure below:The first attempt we have identified started on 10th of February 2015 when a list of 8.762.102 IPs were scanned. Out of this large list, 1.712.363 IPs were marked as “vulnerable.” The probing process lasted until February 14th. Most of the IPs were from Ukraine (8.536.272 scanned, 1.704.837 found vulnerable). The number of scanned IPs is exhaustive, almost equal to the total number of IPs allocated to Ukraine. Searching through the major events regarding Ukraine in that time frame, we realized that the probing took place during the summit in Minsk regarding the ceasefire in the Donbass region of Eastern Ukraine. On February 11, the leaders of Belarus, Russia, Germany, France and Ukraine met to negotiate the new set of peace measures that were announced on February 12 and signed on February 15. The targeted countries in these campaigns are illustrated in table below (Table 2):On February 14, a backup of the database was saved in a file (file.csv) and the attacker’s focus moved from Ukraine to Spain. On February 16, a new attempt to find new victims was made. The new database was loaded with 58,624 new IP addresses, out of which 6,146 were found vulnerable after probing. The targeted countries in this case are illustrated in Table 3: Since in this second attempt the set of IPs is rather small, we presume that this attack was highly targeted to specific institutions. By analyzing the target IP ranges, we were able to identify some of the victims. The decision logic related to which victims should be infected is unknown to us at the time of writing, but we presume the vulnerable targets are next engaged by a human attacker rather than in an automated way. The screening process for finding new possible victims is carried out via multiple bots managed by a central command and control server. The operational flow can be broken down as follows:Potential victims are identified by port-scanning a list of IPs belonging to different subnets. This list is generated by a script, gen_ip.py, which iterates through IP classes and randomly picks IPs for port-probing. At the time of writing, the script has 11 IP classes hardcoded, which leads us to believe that victim organizations are picked manually. The script generates random integer numbers that represent IPs belonging to these classes. The fact that it doesn’t iterate consecutively through all the IPs shows that the attackers have taken all precautions not to trigger alarms in the victims’ intrusion detection system - scanning all the IPs from a subnet may raise suspicions. All generated IPs are added to a database on the central server. Most of these IPs are from Spain and belong to political institutions ([redacted]), telecommunication companies and public affairs institutions. There are 9 bots, each one identified through a cookie (uid). This cookie is used by the bot to register on the main server. If the server has a reference to that cookie, the process continues. The priority (code_id) is set to 1 for all the bots. The info table column is empty for all the entries. The cookie column represents the authentication code, last_activity is the last date when the bot has reached the server, ip_addr is IP of the bot, and get_num column represents the number of connections done by the bot with the central server. This research also shows that the bots are duplicated and that there are two types of cookies: one using letters and numbers and one using only numbers. The activity of the first type is very poor (3 connection for each cookie), which leads us into believing that, over time, there were two versions of bots and plugins running in parallel. This can be explained also by the fact that the first type of cookie doesn’t appear in the sho_bot table. The machines used to scan the potential victims are in different networks. This helps the attackers conceal that scans originating from these IPs are part of the same operation. The table below shows the IPs of the bots found in the database at the time of writing (Table 7): This executable file can be either used with arguments passed via the command line or without. When executed without arguments, it attempts to contact the IP address: 176.**.***.10 on port 443. It can also be started with the following command line: The file uses an old version of the OpenSSL library (OpenSSL 1.0.1e). In fact, the reason this file is 1038 kilobytes in size is because of the inclusion of this library. The main purpose of the tool is to allow an attacker to contact systems behind a router, which otherwise would not be accessible from outside the network. The tool is built around a vulnerability discovered in 2014 (CVE-2014-4076) and works by sending a specially crafted package to the \\.\\ TCP device through the use of DeviceIoControl function. The vulnerability was fixed in late 2014. The tool works by receiving one executable file as argument. The tool will then run this executable file with system privileges. The file is compiled using the debug configuration. Because of this, a path to a pdb file is also hardcoded into the file. The path references C:\Users\Пользователь\Desktop\cve-2014-4076\cve-19abdba\Debug\CVE-2014-4076.pdb The string Пользователь means users in Russian. This is one of the reasons we suspect the authors are Russian speakers. This seems to be based on the source of a public tool (mimikatz) for dumping passwords out of WDigest through LSASS. More information about the tool can be found by visiting the author’s page: http://blog.gentilkiwi.com/mimikatz. The file was compiled on 05/05/2013 and does not contain any version info. This suggests the authors used a custom build. The tool receives a file as argument. The retrieved password will then be dumped into the file passed as argument.This is the first component that gets on the computer after infection. Its purpose is to contact the C&C server and ask for further instructions. The first stage payload is made of two items: a dropper and a first stage backdoor. The dropper, which in our case is named runrun. exe, has embedded the file api-ms-win-downlevel-profile-l1-1-0.dll in the data section. The dropper uses many custom encryption algorithms to protect itself from reverse-engineering. The following algorithm (Algorithm 1) is used to decrypt its APIs: The dropped file is a downloader that contacts the C&C to get the second stage component. It contacts the domain: www.msc****vw.com and the IP address: 91.***.**.249. The requests are performed via GET over HTTP. They are randomly generated. Each request has 1 to 5 groups of 1 to 6 randomly generated chars and numbers. Each group is separated by a slash. An example of a request is given below: The purpose of the second stage component is to open a backdoor to allow the attacker to assess the target and download additional components. As the First Stage Component, the important file is being installed using a dropper. (winloat.exe) The main steps followed by the dropper are: The most important component of APT28 is the backdoor, in this case, the file called advstoreshell.dll. This file reads the configuration f ile (msd) and contacts the C&C servers indicated in the configuration file. It can also read the configuration file from the registry. The configuration stored in the registry is probably obtained via update from one of the C&C servers. On the system we have analyzed, there were two configurations: When running a command using the cmd /c option, the output is saved in a file named tmp.dat Communication between this component and the C&C server is carried out on port HTTP (443). If this is not possible, it attempts to connect on port 80. In some cases, the communication is encrypted using 3DES and RSA. One important function of this backdoor is that it can load external components. It can achieve this goal by calling the init function of any dll. This is how the s plugin is loaded. The final component installed by APT28 is a module named pr.dll. This file was compiled 5 hours after the system was compromised. This discrepancy in time prompts us that the file is individually crafted for each target system. The file seems to be a modular framework that can accommodate different modules. It stores its configuration in an encrypted format, and saves it in the Registry key “HKU\S-1-5-19_Classes\Software\Microsoft\MediaPlayer\{some_clsid}\chnnl” . Once executed, the malware checks for the presence of a mutex (XSQWERSystemCriticalSection_for_1232321) to make sure that another instance of itself is not already running. After that, it contacts the server (the IP: 198.[redacted].74 or the domain name sec[redacted]win. com). During the initial communication, the backdoor sends an encrypted buffer to the C&C server that contains a RC4 key and the IDs of the plugins it has installed. The buffer is shown below: We can identify plugins with the following ids from the buffer above: 0x3302, 0x3303, 0x2103, 0x2106 An interesting aspect of the pr.dll is that it creates two pipes that are presumably used to collect data sent by other processes. The pr.dll seems to be a Windows version of a Linux file found on the server. The server hosts 4 elf files, two built for the x86 architecture (075b6695ab63f36af65f7ffd45cccd39, f3bf929a35c3f198226b88537d9ccb1a) and two for the x64 architecture (2683624eacc490238e98c449bddbb573, 5bf524a4860f3c33e3ad77b6b625db37). The elf file uses SQLite3 rather than Registry to store its configuration. The database named My_BD holds two values chnnl and prms. The files attempt to contact the server by constructing random requests. Each request is made of one of the verbs (watch/, search/, results/, search/, close) and two to nine arguments (selected from the list: text=, from=, itwm=, ags=, oe=, aq=, btnG=, oprnd=, utm=, channel=). The values of the arguments are randomly generated. Răzvan Benchea has been working as a malware researcher for more than eight years. He is an associate professor at the Alexandru Ioan Cuza university of Iaşi where he teaches operating systems and assembly language. Răzvan’s areas of expertise includes APT forensics and reverse engineering. His academic accomplishments include a PhD in machine learning algorithms for malware detection. Alexandru Maximciuc spent the past 10 years doing antimalware research at Bitdefender. He is an expert in reverse engineering and cryptanalysis. Alexandru has played a key role in the analysis and mapping of the PushDO botnet and is in charge with the automation of sinkholing operations. Cristina Vatamanu is a malware researcher with a focus on botnets. With more than six years of experience in reverse engineering, exploit analysis and cryptography, Cristina has brought her contribution to the threat intelligence scene at conferences such as AVAR and Virus Bulletin. Victor Luncasu is a junior malware researcher focused on algorithms and data structures. His experience includes reverse engineering and payload analysis as well as custom communication protocols between bots and command & control servers.