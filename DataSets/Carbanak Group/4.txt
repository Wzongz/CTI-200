This report shares actionable threat intelligence and proven threat hunting and incident response methods used by the RSA Incident Response (IR) Team to successfully respond to an intrusion in early-to-mid 2017 by the threat actor group known as CARBANAK1, also known as FIN7. The methodology discussed in this report is designed, and has been tested, to be effective on several currently available security technologies. While the majority of examples shown in this document use the RSA NetWitness® Suite in their illustrations, the methodology, query logic, and behavioral indicators discussed can be used effectively with any security product providing the necessary visibility. The intrusion and response described in this paper highlight key behavioral tactics, techniques, and procedures (TTP) unique to this engagement, giving significant insight into the thought processes, preparation, and adaptive nature of actors within the CARBANAK threat actor group. This paper also illustrates the RSA Incident Response Team’s Incident Response and Threat Hunting Methodology: an unorthodox, adaptive and highly effective methodology used to successfully detect, investigate, scope, track, contain, and ultimately expel these and many other advanced adversaries. Several intrusions associated with the CARBANAK actors have been reported within the last year, describing compromises of organizations within banking2, financial3, hospitality4, and restaurant verticals. However, they all describe a relatively equivalent progression, with only slight deviation in specific attacker actions. The intelligence surrounding recent CARBANAK incidents indicate that phishing attacks have been the group’s primary method of initial compromise. After gaining access to a user system, the attackers move laterally throughout the environment, conduct internal reconnaissance, establish staging points and internal network paths, harvest credentials, and move towards their intended target. However, this intrusion began with a significantly higher level of privilege due to the exploitation of the Apache Struts vulnerability CVE-2017-5638 that allowed the attackers to quickly gain administrative access within the client’s Linux environment. The intrusion outlined in this report discusses a case that presented substantial challenges due to:The toolset utilized by the attackers was a mix of custom tools, freely available code, and open source software utilities. RSA IR researched all 32 of the malicious files in the CARBANAK toolset using various publicly available and open source resources. Six of the tools used in this intrusion were found to have been uploaded to a publicly available antivirus aggregation site. Of these six, five of them have little to no detection or indication of malice from antivirus vendors. This observation explains the reason that the client’s signature-based host protection mechanisms were unable to identify or prevent the use of these tools.While the attackers used more than 30 unique samples of malware and tools, they also demonstrated a normalization across Windows and Linux with respect to their toolset. The toolsets they deployed can be broken down into five basic functionalities:In addition to following this distinct functionality in their toolsets, they normalized functions across different operating system environments in the forms of the two versions of AUDITUNNEL, PSCAN, and the use of WINEXE (Linux) and TINYP (Windows). This normalization of tools is discussed in more detail later in this paper, but it identifies that not only do CARBANAK actors have the capability to successfully compromise various operating system environments, they have actually standardized and operationalized this capability. This attribute indicates strategic operational thought and effort being invested in this group’s compromises, suggesting that the CARBANAK actors are working towards becoming a more organized, structured, resourceful and mature threat group. During an intrusion, time is the single most critical resource to an organization’s security team and is the most significant indicator of determining if the security team will be successful in containing, eradicating and remediating the extant threat. There are two specific sets of time related to an intrusion that may determine the difference between success and failure: the time that the attackers are in the environment prior to detection (dwell time) and the time it takes security teams to identify, investigate, understand, and contain the attackers’ actions (response time). In this specific incident, the attackers’ dwell time at intrusion declaration was 35 days, which is a significant amount of time given the level of access immediately available upon compromise. However, by utilizing the methodology and visibility described in this report, RSA IR was able to complete containment, eradication, and remediation in only nine days. Further below we discuss the methodology used by RSA IR to successfully detect, investigate, understand, and contain the attackers before the actors could achieve their intended goal. A significant number of organizations focus on majority systems software, such as Microsoft Windows, for the predominant amount of their visibility. This often leaves minority systems with very little visibility, protections, or investigative observational points. Additionally, these minority systems, Linux being the most significant example, often operate key public-facing or critical data-based services. Not planning for visibility to ensure minority systems are included in threat hunting, vulnerability assessments, network data captures and forensic investigations leads to a false sense of organizational security and ensures that attackers retain a refuge of critical systems inside environments. The incident discussed in this report illustrates the dangers present within this approach once attackers begin utilizing these systems against organizations. In this report, we discuss the ways the CARBANAK actors utilized these systems and the methodology used by RSA IR to successfully respond to this threat. It highlights the progression of analysis from threat hunting and initial detection to root cause analysis, incident scoping and follow-on investigation. The majority of the analysis conducted during this engagement was performed using RSA’s flagship product, RSA NetWitness Suite. During this investigation, RSA IR utilized RSA NetWitness Logs and Packets (formerly RSA Security Analytics) for network visibility and RSA NetWitness Endpoint (formerly RSA ECAT) for endpoint visibility. These marquee technologies allow RSA IR and client analysts to process massive data sets, find forensically interesting artifacts in near real time and do both more quickly than utilizing standard incident response and forensic procedures. The purpose of this report is to share actionable threat intelligence associated with a persistent adversary, discuss the RSA Incident Response Team’s Threat Hunting and Response Methodology in practice, and illustrate the use of this methodology as used by RSA IR analysts during a live intrusion. To that end, the Threat Hunting methodology, examples of detected activity and Incident Response procedures illustrated in this report have been described in a manner that can be effectively implemented by any security technology that affords the analyst the necessary visibility. RSA IR also includes a Digital Appendix containing file hashes, domain and IP addresses, and detection content for both RSA NetWitness Endpoint and RSA NetWitness Logs and Packets. While the detection content has been written specifically for the RSA NetWitness Suite, each parser and query contains detailed descriptions of their detection mechanisms for implementation into any available toolset with appropriate visibility. The hope is that by publishing this report, RSA IR encourages and empowers operational analysts to utilize Threat Hunting and the RSA IR Methodology within their own environments. The CARBANAK actors are financially motivated, advanced actors that have historically targeted financial and hospitality laterals, with a recent move into targeting restaurants.6 This threat actor group has shown themselves to be proficient and careful in their toolset utilization, consistently removing evidence of any actions-on-objective as they proceed through an environment. They have been observed utilizing various malware, methods and communications, with tools and techniques often differing greatly between targets. While this group has shown technical ingenuity in techniques such as point-of-sale implants,7 Google services command-andcontrol communications8 and persistence via application shim databases9, they have also shown a propensity for using freely available or open source toolsets for much of their lateral activities. Whatever the methods used, CARBANAK has shown themselves to be highly persistent and determined actors, able to rapidly compromise and traverse various environments while quickly adapting to internal security controls. This white paper covers a sampling of observed indicators derived and utilized during this engagement. Included are the details regarding the observed intrusion vector, entrenchment techniques, actions-on-objective, lateral movement tools and methods, unique malicious files, and behavioral indicators utilized in the identification, tracking and response of this actor group. Included with the publication of this report is a Digital Appendix, containing content for RSA NetWitness Logs and Packets and RSA NetWitness Endpoint used to identify and track attacker activity throughout the environment during this incident. All content should be tested before full integration into RSA NetWitness Endpoint, RSA NetWitness Logs and Packets or third-party tools to prevent any adverse effects from unknown environmental variables. More information on the associated Digital Appendix is found in Section 7. Disclaimer: This white paper and related graphics are provided for informational and/or educational purposes. The information contained in this document is intended only as general guidance and is not legal advice. Although the greatest care has been taken in the preparation and compilation of this white paper, RSA, its servants and/or agents will accept no liability or responsibility of any kind. This white paper is not intended to be a substitute for legal or other professional advice, and constitutes the opinions of the author(s). All information gathered is believed correct as of October 2017. Corrections should be sent to RSA for future editions. Redistribution or reproduction of this document is prohibited without written permission of RSA. In researching this white paper, the majority of intelligence and incident reports reviewed described phishing and malicious document-related tactics being utilized by CARBANAK actors as a method of initial compromise. However, the initial method of compromise observed during this engagement utilized the Apache Struts Content-Type arbitrary command execution vulnerability, CVE-2017-5638. 10 This vulnerability has since been patched by the Apache Software Foundation, and the recommended remediation process is available on their website.11 While the time-tested method of compromising the user base as the initial ingress method is still very effective, server-level compromises commonly give attackers a significant escalation in initial privilege, as well as a shorter path between initial compromise and end-target data. This allows them greater rights and versatility upon initial compromise while making it harder for defenders to stop them on the initially compromised system. An anatomy of the engagement, broken into the primary stages, is illustrated in Figure 2. Upon determining that the initially compromised web server, designated as system ALPHA, was vulnerable to CVE-2017-5638, the rest of the attacker actions could be grouped into the eight stages illustrated in Figure 2. These phases are described further in the remainder of Section 3. All binaries, with the exception of the ‘b’ Perl script, are described in detail in Section 4. Attackers from IP 185.117.88.97 utilize CVE-2017-5638 to download and execute a Perl script on ALPHA. The Perl script was downloaded via WGET from IP 95.215.45.116. This action constitutes the moment of initial compromise and is referenced in this document as “D.” All other times discussed in this report will use this moment as a reference in their notation, such that “D+2” refers to two days after initial compromise. The metadata created by RSA NetWitness Suite describing this action is shown in Figure 3.Six minutes after the download and execution of the Perl script, systemALPHA began communicating with lP address 95.215.46.116 via lRC. Whilethe available full packet capture retention did not extend to this date at thetime of analysis, the metadata created was still available. While RSA wasunable to review the raw data to determine actions taken, RSA lR was able todetermine traffc type, as well as infer the intention of the nature of actionstaken via this channel. lt appeared that this lRC communication was a methodof remote command execution conducted by the attackers, evidenced bythe presence of an output from the "w" User Activity Linux binary. This isillustrated in Figure 4.While the attackers attempted to use the ‘sudo’ administrative privilege binary to gain root access, the privilege-separation user the web server was running as did not have the necessary permission. In response to this, the attackers downloaded a copy of C source Proof of Concept (PoC) code written by “KrE80r” to exploit the Linux Kernel Copy-on-Write “Dirty COW” vulnerability, CVE-2016-5195. 12 This vulnerability has since been resolved by the major Linux distributions, with the list of patched kernels found on GitHub.13 At the same time, the attackers downloaded a Bash shell script as a driver for the exploit code, named ‘1.sh’. This allowed the attackers to gain root privileges on the system at the 27-minute mark. The observed download is shown in Figure 5.While the attackers now had root level access, they did not have user credentials to move laterally within the environment. In order to gain that access, the attackers downloaded versions of the OpenSSH 5.3p1 client and server binaries that had been trojanized with malware known as SSHDOOR, 14 and installed them onto host ALPHA. The SSHDOOR malware will beacon out to IP 185.61.148.96 every 10 minutes until a response is received. A secondary function of this malware was credential theft, by which SSHDOOR sends the username, password and source/destination host to the attackers. The attackers then disengage, leaving the malware to collect credentials until the next day.Upon gaining credentials via the SSHDOOR malware, attackers respond to the SSHDOOR beaconing and establish an SSH tunnel to IP 95.215.46.116 over TCP port 443. In reviewing the configuration and running processes on ALPHA, the attackers observed that the system was running winbind, the UNIX implementations of Microsoft RPC, Pluggable Authentication Modules (PAM) and the name service switch (NSS). This service allows for unified logins across UNIX systems and Microsoft Windows Active Directory (AD). Winbind is a component of samba, the Windows interoperability suite for Linux and UNIX, which stores information about Windows Active Directory in its configuration files. After observing this service running on the system, the attackers checked these configuration files for the DNS names of the Microsoft Windows Domain Controllers used by winbind to authenticate AD accounts. Upon conducting a DNS query for the domain name in the configuration file, the attackers gained the names and IP addresses of the two primary DNS servers (also Windows Domain Controllers) and the server listed in the configuration file. Subsequently, the attackers download a tool named WINEXE, a Linux binary that allows remote command execution on Windows systems.The attackers also observed that one of the Windows Domain-authenticated credentials stolen was the service account for the client’s authenticated vulnerability scans, and was present in the local ‘sudoers’ file. Having determined the current level of access available to them, the attackers decided to download additional tools in order to establish a static entry point into the environment ensuring they could avoid detection. To accomplish this, the attackers downloaded the PSCAN TCP port scanner and the ALW Advanced Log Wiper binaries and began identifying systems and services accessible from ALPHA.One of these systems was the Red Hat Satellite server, which is the primaryenterprise update server for Red Hat Enterprise Linux (RHEL) deployments.Given that the Satellite server requires the ability to interact with all othersystems under the root user in order to update software, the attackerschose this system as their initial primary staging system. This system wasdesignated system BRAVO. From BRAVO, the attackers traversed theLinux environment through stolen credentials and SSH pre-shared keys andconductedinternal reconnaissance on any Windows systems within directnetwork access. During this time, the attackers strictly contained all maliciousfles, secondary tools and ingress network communication to the Linuxenvironment, Additionally, they consistently tested the Struts vulnerabilityon host ALPHA to ensure the initial method of compromise was open, and toalert them to any possible remediation of that system.The discovery of the Struts vulnerability on host ALPHA, and its subsequentremediation, gave the attackers a moment of pause, and they migrated a copyof the $$HDOOR client and server to the centralized Syslog server, alongwith a copy of WlNEXE, the ALW Log Wiper and their own SSH pre-sharedkey, all of which they had installed on seven key systems at this point. They The discovery of the Struts vulnerability on host ALPHA, and its subsequentremediation, gave the attackers a moment of pause, and they migrated a copyof the $$HDOOR client and server to the centralized Syslog server, alongwith a copy of WlNEXE, the ALW Log Wiper and their own SSH pre-sharedkey, all of which they had installed on seven key systems at this point. They To ensure they could retain access, they replaced SSHDOOR withAUDITUNNEL on four of the key systems. They ceased any signifcantoperation into the environment until D+29, at which time both the SSHDOORand AUDlTUNNEL ingress methods were still operational. On D+30, theattackers migrate into the Windows server environment proper to fnd anappropriate staging system to install malware and begin stagingingress withinthe Windows environment. After three failed attempts, the attackers fnd aWindows Domain Controller with Internet access, designated system DELTA.Once frmly on DELTA, the attackers downloaded and installed the GOTROJmalware as their primary method of ingress into the Windows environment.At this point, they have secured nine methods of ingress into the environmentacross three different ingress methods. In order to ensure ingress via theGOTROJ channel, the actors execute the malware into memory on threeadditional systems, putting the system ingress count at twelve systems. Oncethe malware is persistent and tested on DELTA, the attackers download aWindows version of WGET and the TlNYP lateral movement tool to systemDELTA and begin traversing the Windows environment. As they move through the environment, they download a secondary version of TINYP, a host reconnaissance tool called INFOS, a process listing tool called CCS, a custom version of MIMIKATZ, a Windows version of the previously mentioned PSCAN scanner, and the PuTTY Secure Copy tool called PSCP.During this time, it becomes quickly apparent that the attackers are targetingritical fnancial data, based on commands, string searches and lateralmovement decisions conducted by the attackers. This continues until D+43/D+44, at which time a coordinated expulsion event took place and post-remediation activities began.The client contacted RSA lR when system administrators observed anomallesassociated with the 'root' user on system ALPHA during remediation. Theseanomalies were brought to the attention of client security personnel. TheCVE-2017-5638 vulnerability present on system ALPHA was identifed 25days (D+25) after the initial compromise when hundreds of thousands ofsuccessful vulnerabilityscanning and exploit sessions against the system wereobserved.The vulnerability was determined to have been introduced by anout-of-band source installation of an affected version of Apache Struts, whichhad been installed by the web developers. While the organization had takenthe necessary steps to remediate and patch all systems reported vulnerable toCVE-2017-5638, the vulnerable web page on system ALPHA was not detecteddue to the web server and operating system reporting that the affectedpackage was not installed. Based on the extensive number of successful exploitattempts that ranged from the return of a pre-defned character string tosuccessful downloading and execution ofmalicious code, system ALPHA wasremoved from service, a forensic image was obtained for in-depth analysisand the system was restored and remediated. The forensic image was made avallable to KsA ik upon engagement or services, with ksA ik beginning threathunting actions and follow-on investigations on D+35. During threat hunting operations conducted in concert with client analysts.RSA lR identifed increasingly suspect outbound binary and administrativenetwork communication being conducted with external internet hosts.Specifcally, RSA lR observed the GOTROJ traffc communicating outbound toIP 107.181.246.146, and client analysts observed the PSEXESVC.exe servicebinary present and executing on system DELTA. Both of these initial fndingsare shown in Figure 10 and Figure 11,respectively.Correlation of these suspect security events was declared an incident onD+35, with RSA IR being immediately engaged for incident response services.At this point in the intrusion, the attackers had just entered Stage 5, asdescribed in Section 3.1.5. Utilizing RSA NetWitness Logs and Packets for network visibility, RSA IRidentifed all network communication channels utilized by the attackers forthe duration of the incident. This assisted greatly in conducting root causeanalysis and intrusion scoping, as a signifcant amount of host forensicartifacts had been destroyed, bypassed or made unusable by the attackers.Additionally, the use of this level of visibility allowed RSA IR to conductnetwork protocol analysis on the command and control (C2)communicationpayloads, which led to the capability to decrypt attacker C2 communicationswithin minutes of their occurrence. This level of visibility into attacker activitygreatly assisted in containment, eradication and remediation efforts, whichconcluded on D+44. Upon conclusion of the incident, RSA lR determined thatthe attackers had accessed 154 systems, the majority of which were accessedlaterally via ingress channels established on systems ALPHA, BRAVO,CHARLlE and DELTA. Follow-on analysis of acquired host, network and diskforensic data occurred in parallel with continuous monitoring and ThreatHunting operations until incident closure on D+74. Utilizing RSA NetWitness Endpoint for host visibility, RSA IR was able toobserve and track specifc behavioral indicators of compromise (lOCs)identifying attacker activity within the environment, As the attackers wereparticularly careful to remove all traces of their activity upon completionand ensure their tools were on disk while in use, many traditional artifacts orlog-basedincident response and forensics methodologies would have beenineffective in identifying,investigating and responding to these attackers'methods. However, utilizing RSA NetWitness Endpoint in concert with RSANetWitness Logs and Packets allowed RSA IR to use the attackers' methodsas lOCs, such as specifc fle download methods with subsequent deletions,specifc command-line arguments used by the attackers for lateral movement,and specifc Windows user status command executions.In late March of 2017,in the midst of several hundred thousand externalvulnerability scanning attempts, an attacker using the lP address of185.117.88.97 executed an HTTP request against system ALPHA andexploited the Apache Struts Content-Type remote command executionvulnerability,CVE-2017-5638, in order to download and execute a Perl scriptnamed "b" from the lP address 95.215.45.116.Due to retention at the timeof analysis, neither the Perl script nor the complete command used to initiatethe download was obtained. Actions during this time were observed bynetwork metadata creation. Almost six minutes later, system ALPHA began communicating with lPaddress 95.216.45.116 via lRC over TCP port 80. This was the initial methodof direct system communication utilized by the actors, in which they beganimmediate attempts to escalate privilege to the root user.Since the privilege-separation account for the web application serverwas not sufhcient for follow-on actions, the attackers downloaded a shellscript named "1.sh" that exploited the "Dirty COW" Linux Kernel PrivilegeEscalation vulnerability,CVE-2016-5165, from IP address 185.61.148.145.The other downloaded fle was a modifed version of the PTRACE POKEDATAvariant ofCVE-2016-5195 POC code written by GitHub user“KrE80r"The contents of both fles are shown in Figure 12 and Figure 13, with thedetection of this activity shown in RSA NetWitness Suite in Figure 14.Both files were obtained via the legitimate WGET utility already present on the system. This would continue to be the attackers’ primary method of acquiring tools throughout this engagement. As such, the direct-to-IP address acquisition of tools before execution became an effective actionable IOC to track the adversary throughout this engagement. An example of this activity as seen in RSA NetWitness Logs and Packets is shown in Figure 15.Shortly after successfully executing the downloaded privilege escalation code, the attackers again utilized WGET to download three additional binaries from IP address 95.215.46.116 named ssh, sshd and auditd. The ssh binary was a trojanized version of the OpenSSH 5.3p1 client binary, with the sshd binary a trojanized version of the server binary. These backdoors are variants of the SSHDOOR Trojan that was observed and reported in 2013.15 While the previously observed SSHDOOR used an XOR scheme to store an SSH pre-shared key and its HTTP Request Format Strings, this version used RC4 encryption to store the same information. The decrypted SSH pre-shared key and HTTP Format Strings are shown in Figure 16.As was the case with the previous version of SSHDOOR, upon successful authentication using the client or server binary, the authenticated credentials are sent to the attacker via HTTP GET Request. In the case of these binaries, the source host’s MAC address would be normalized to lowercase and included in the first key-value pair of the URI, with the username, password and destination hostname and IP address encoded into a Base64 string and placed in the second key-value pair of the URI. These HTTP requests would be sent to the C2 domains of centos-repo.org or slpar.org, depending on the version of the binary executed. An example of this is shown in Figure 17.Additionally, both versions of SSHDOOR allow unauthorized access when authenticated with the decrypted SSH pre-shared key. These trojanized binaries allowed the attackers to gain additional credentials that would assist them in moving laterally into the internal server environment. The authorized_hosts entry the attackers utilized with the SSHDOOR binary is shown in Figure 18.The AUDITUNNEL binary is a reverse tunneling tool similar in functionality to netcat, but with support for multiple tunnels, Socks5 proxy and XOR encoded communication. It was downloaded, along with the SSHDOOR binaries from 95.215.46.116, under the name ‘auditd.’ Upon execution, it creates a TCP socket and connects to C2 IP address 95.215.46.116 over TCP/443, creating a reverse tunnel to allow access to the victim server. Once the connection was made, AUDITUNNEL would keep the connection alive to allow inbound or outbound connectivity through this tunnel. In order to better hide its network activity, this utility would XOR all data passed through the tunnel with a key of 0x41. This binary is also able to communicate via the Socks5 protocol using Basic authentication. These three binaries proved to be the attackers’ primary method of ingress and credential harvesting for the first half of the incident. An example of the XOR network traffic associated with AUDITUNNEL is shown in Figure 19.After the attackers observed little change to their malware C2 channels once system ALPHA was remediated, the attackers quickly moved to system CHARLIE, the Linux Syslog server. This allowed them a communication channel to all other systems within the Linux environment, as well as allowing the attackers to control both centralized and local log entries across all Linux systems accessed. At this time, the attackers moved the majority of their toolset to CHARLIE, leaving only the SSHDOOR server binary on system ALPHA for further credential harvesting. The Syslog server would remain one of their primary staging points throughout the rest of the incident. The file information for AUDITUNNEL is shown in Table 5.The attackers downloaded additional tools from IP address 95.215.46.116 for the purposes of conducting internal reconnaissance and moving laterally between the Linux and Windows environments. These tools included the WINEXE version 1.1 remote command execution utility, a version of the ALW “Advanced Log Wiper” posted by “security40bscurity at 0xbscured.net” posted to Pastebin on July 7, 2015, and SecPoint’s PSCAN multithreaded IP port scanner. With these tools, the attackers traversed the internal network beginning with the shortest hop points first and migrating outward. Example executions of each of these tools are shown in Figure 20 through Figure 23.WINEXE is the Windows Remote Command Execution tool for Linux. Its functionality is very similar to that of SysInternals PSEXEC, including the creation of a Windows service and file transfer of a service binary into the ADMIN$ Windows SMB shared location (C:\Windows). As is described in Figure 20, the command line options are very similar to that of PSEXEC as well. The ALW Advanced Log Wiper was initially downloaded to system BRAVO early in the intrusion as a method of removing specific indications of attacker activities from Linux host logs. ALW was originally written by “security40bscurity” and posted to Pastebin on July 7, 2015. This binary takes four arguments: the user to remove from the target logs, the host to removefrom the target logs, a specifc terminal TTY value to remove from the targetlogs, or a specifc target log hle to remove. The usage message for this binaryis shown in Figure 21.The PSCAN binary found on host BRAVO is a TCP port scanning tool that attempts to create TCP socket connections to a specified port for every IP within a specified range. This functionality allows the attacker to check if specific commonly used ports are open for communication in systems within an IP range, thereby identifying available services for internal reconnaissance. The usage message for PSCAN is shown in Figure 22. Their decisions in which systems to access indicated that their next intended action was to gain access to the Windows Server environment. The attackers continued to conduct internal reconnaissance within both the Linux and Windows environments using stolen credentials to access Linux systems via SSH and the WINEXE utility to access Windows systems. The actions-onobjective during this time was composed of mapping the internal network with the PSCAN utility and collecting host information via resident Linux and Windows administrative command-line utilities.On D+30, the attackers installed a Windows Trojan, written in Go, as a Windows Service on one of the two primary Active Directory Domain Controllers. They would move to utilizing the GOTROJ as their primary method of ingress for the duration of the engagement. The GOTROJ Trojan communicated with C2 IP address 107.181.246.146 over TCP/443 for its remote access channel. This Trojan was much more fully featured than the previous tools utilized by the attackers to this point, with eight primary functions designated by a command issued by the attackers. The commands and their functionality are shown in Table 10.The commands are stored within the binary in an XOR encrypted segment, which is decrypted shortly after execution with the XOR key of ‘dmdar,’ or 0x646D646172. The section of code which calls the c_gosh_xstr_XorCrypt() function to decrypt the commands is shown in Figure 24.This binary operates in one of two modes. The frst is an ad hoc, interactiveexecution mode, in which the malware executes within the context of auser account. However, if the malware is executed as a user, there has to be a fle named 'xname.txt' in that user's temporary directory referenced bythe environment variable '%TEMP%. As this fle was not found during thisengagement and is not dropped by any of the tools used by the attackers, itscontents are not known. However, when the malware begins to communicatewith its C2, the contents of the fle are the frst thing encrypted and sent tothe C2 server. The second method of GOTROJ utilization is execution under aWindows Service as a method of persistence.The attackers used this methodof execution during this engagement, installing the GOTROJ binary as aservice named WindowsCtlMonitor. The network communication protocol this malware uses contains a verysimplistic, but specifc, header and format. The trafhc sent and receivedby this malware is XOR encrypted with an XOR key that changes for everymessage sent or received. An example of the format in its encrypted form isshown in Figure 25.Once decrypted with the XOR key (byte BA in the example above), the formatting of the message becomes considerably clearer. An illustration of this is shown in Figure 26.Given this simplistic method of formatting and decryption, RSA analysts wereable to effectively decrypt this trafhc for review during the investigation,greatlyincreasing visibility into attacker actions. However, given that thismalware utilizes aTCP socket connection for transport communicationsin a tunneling form, the custom communications protocol does not takepacket boundaries into account in its design.Therefore, a single messagemay traverse multiple packets with no additional control bytes, such as theID byte or length. Given this case, the method of decrypting the trafhc wasmade more effective by extracting the payload above Layer 4 and decryptingthat data independent of any data within Layers 2-4. The fle information for the three versions of GOTROJ observed in this incident is shown in Table 11, Table 12 and Table 13. All binaries use the same C2 IP address of 107.181.246.146.The attackers also utilized a tunneling binary similar to the AUDITUNNEL binary used on the compromised Linux systems. The svcmd.exe binary’s primary purpose was to tunnel traffic to the attackers’ C2 using XOR encoding with a key of 0x41. This version of AUDITUNNEL is hard-coded to communicate with IP 185.86.151.174. The C2 IP address is clearly seen within the ASCII strings of the file, as shown in Figure 27.The IP address it communicates with is hard-coded, as is the encryption key used for its communications. After establishing the TCP connection and socket, svcmd.exe will XOR the send and receive buffers against a value of 0x41. Given it connects to the C2 IP address over TCP/443, without the necessary visibility, defenders might mistake it for HTTPS encrypted traffic. The encryption code segment is shown in Figure 28.While the WINEXE binary was used to migrate from the Linux environment to the Windows environment, a modified version of SysInternals PSEXEC was used to move throughout the Windows environment. This modified PSEXEC binary, named TINYP by the attackers, was the primary lateral movement mechanism. Two versions of TINYP were used during this intrusion (v.0.7.6.2 and v.0.7.7.4), with the attackers downloading the binaries under the filenames ti1.bmp, tinyp1.bmp, tinyp2.bmp, tineyp3.bmp, tinyp4.bmp and ps.bmp. Once downloaded, the binary was renamed to ps.exe for use in lateral movement. While both versions of TINYP have all of the features of normal SysInternals PSEXEC, they also include additional functionality. These functionalities are given at the command line at execution, just like PSEXEC. The usage list of all of TINYP’s functions is shown in Table 15.The primary modifications made to the base SysInternals PSEXEC are the functions associated with the –copyself, –cleanup, –getfiles, and –copyfiles arguments. The –copyself and –copyfiles arguments will copy a file to the target remote system via SMB/CIFS, with that file either being a copy of TINYP itself or an explicitly designated file, respectively. The –getfiles argument will move files in the opposite direction, downloading specified files from the target remote host to the source host via SMB/CIFS. Lastly, the TINYP tool contains an argument to specifically delete entries from the Windows System Event Log. While this is an attempt to cover tracks as the attacker moves throughout the environment, it is important to note that this only affects the System Event Log, leaving Application, Security and servicespecific Windows Event Logs to retain data useful to investigators. The TINYP tool was used primarily with the Windows Command Processor cmd.exe as the final argument for remote command shell access. Once the attacker closed the remote session, the TINYP tool would:As done previously, the attackers used WGET version 1.11.4 to download binaries before execution. However, the WGET used was renamed to UIAutomationCore.dll.bin. Evidence of this is shown in execution of the binary in Figure 30. For credential harvesting within the Windows environment, the attackers downloaded two files named image32.bmp and image64.bmp. These files were subsequently renamed to xxx32.exe and xxx64.exe, respectively. In reviewing these files and their activity, RSA IR determined that these were implementations of the sekurlsa_acquireLSA() functionality of the Mimikatz credential harvesting tool. The file information is shown in Table 20 and Table 21. CCS is a system process and library identifier that, when no arguments are given, will print the currently running processes and their process IDs to both STDOUT and a file named _out.log in the current working directory. If CCS executed with the “modules” argument, it printed the running processes and their process IDs, as well as all DLLs loaded by each process. This operation also prints the output to both STDOUT and the _out.log file. Additionally, the _out.log file will not be replaced; rather, it will be appended with every subsequent execution. The file information is shown in Table 22.The INFOS tool was a host reconnaissance tool obtaining browser history, browser login data and RDP logs from the system, and it outputs them to STDOUT. The attackers used this tool to harvest credentials, identify internal web applications and observe the common RDP connections and accounts used on the Windows servers. The file information is shown in Table 23.Given that the attackers left very little consistently running on anycompromised host, downloaded tools as they needed them and removedthose tools immediately after use, determining their movement throughoutthe environment via traditional forensic methods was not a timely option.In a signifcant portion of the attackers'actions-on-objective and lateralmovement, the majority of their activity was contained within the functions ofthe Windows Command Processor cmd.exe. Given this, much of their actionsdid not cause subsequent process execution. Additionally, the attackersutilized several different flenames for their toolsets, ensured a tool was notexecuted with the same name it was downloaded with, used multiple versionsto throw off atomic hashing lOCs and maintained at least two differentingress points with non-related lP addresses. Given that the attackers had been in the environment for over a month at thetime response began, traditional host and network intrusion detection systemswithin the organization's security stack proved ineffective to combat theseactors. Additionally, the attackers had full access to the Linux and Windowsenvironments at the time ofresponse. However, by engaging and enablinganalysts to periodically conduct RSA Threat Hunting with a solid methodology,this threat was still detected despite not being detected by lDS. or buried inineffective alerts.Once detected, the root cause was determined, the threatwas effectively and recursively scoped across the environment, additionalnext-level visibility into attacker actions was obtained, and a plan was createdand executed to successfully remediate the threat. Given that time is themost critical resource duringincident response, any reduction to the 10:1analysis time versus attack time ratio can signifcantly increase the chances of asuccessful eradication event and continued successful remediation. In this casedue to effective visibility, solid methodology and processes, and motivatedand properly enabled analysts, the threat was contained and remediated afternine days ofresponse efforts.The remediation involved signifcant internalinfrastructure changes be enacted before the expulsion event, includingimplementation of redesiened network segmentation, replacement of severalsignifcant environment-wide data and process automations. and removaland replacement of most administrative authentication methods within theenvironment.Consistent monitoring and RSA Threat Hunting operationsconducted post-remediation, with the necessary visibility, allowed for an activeand adaptive response in which any subsequent actor activity was observed. analyzed and responded to appropriately.With the care in which the attackers moved throughout the environment, RSAIR relied on RSA NetWitness Endpoint and RSA NetWitness Logs and Packetsto coordinate host and network visibility and create non-standard, aggregatebehavioral-based indicators, resulting in actionable lOCs that allowed RSAIR to track the attackers in near real time. Here, we discuss some of the waysin which RSA lR was able to determine and track attacker actions throughoutthe environment. 4.6.1 Network Visibility and IndicatorsThis section discusses the methodology and RSA NetWitness Suite queriesand content used by RSA lR during this investigation. The methodology in thissection uses the OCOKA defensive model*' and is described in detail in theRSA Incident Response NetWitness Hunting Guide.. The CARBANAK attackers conducted actions through a variety of networkcommunication methods.Additionally, as the attackers were prone todownloading tools when they needed them, in an effort to leave as littleon disk as possible, this became a primary method of tracking attackerlocation throughout the environment. The attackers primarily used WGET todownload tools when needed, and they consistently did so directly to an lPaddress over TCP port 443.This behavioral lOC could also be modifed to adhere to changes in attackeractions or increasing false positives by including the Directory Meta to onlyequal the root directory, or include the Action Meta to only include HTTP GETRequests. As we see in Figure 33, though the attackers would keep changingflenames, lP addresses and WGET versions used, actions associated with thisTTP were still able to be detected throughout the engagement. The primary method of interacting with the Linux Syslog server within theLinux environment consisted of communicating via $SH over a reverse tunnel(created by the AUDITUNNEL binary). Given that the $SH trafhc would beencapsulated within the reverse tunnel created by AUDITUNNEL, the Layer3 and Layer 4 headers would be representative of the tunnel itself, while the network payload above Layer 4 would be representative of the SSH protocol. With this knowledge, we can begin to build behavioral IOC queries to track this activity, beginning with the following： This query will return all results representative of both outbound SSH communication as well as inbound SSH communication over the reverse tunnel. However, this query is of particularly low fidelity, especially when in a Linux-heavy environment. By reviewing additional context around what we know of this attacker communication, this query can be narrowed significantly. In reviewing the activity associated with the AUDITUNNEL auditd and svcmd.exe tunneling binaries, both communicate outbound over TCP port 443. Adding this to our query gives additional context around the transport mechanism, though not the communication mechanism (SSH). As the SSH attacker traffic is associated with the SSHDOOR trojanized OpenSSH 5.3 binaries, and by specification SSH exchanges client and server version strings at the beginning of each session, we can add version context to the communication mechanism as well. The addition of these two aspects results in the following query:In the resulting data, we observe that in all sessions returned, the client version string and the server version string match. This can be added to the query to increase the fidelity of the IOC if there are still false positives present. However, there is still the case in which the AUDITUNNEL binary utilizes the XOR encoding. In this case, the traffic will appear as binary network communications. In order to ease the effort of detecting this activity, content for RSA NetWitness Logs and Packets were created based on the initial ‘Client Hello’ string passed when beginning AUDITUNNEL XOR communication. An example of this detection is shown in Figure 35.The GOTROJ utilized two methods of network communication. The first and primary method was a custom binary XOR encoded protocol communicating outbound over TCP port 443. We can begin building our IOC query here with the following: direction = outbound && risk.info = ‘unknown service over ssl port’ && tcpflags = ‘syn’ && ioc = ‘binary handshake’ This query will identify the beginning of all outbound communications over TCP port 443 in which data is being transmitted by both parties at the beginning of the communication (ioc = ‘binary handshake’). While this will find the GOTROJ control traffic, it will find many other things as well. This is due to service = 0 being representative of any protocol for which there is not an RFC standard parser built. This includes various proprietary protocols, malicious custom protocols and even sending cleartext over a network tunnel. To narrow this down some, we would want to look at byte transmission ratios between the payloads of the communication. What we are really looking for is conversational traffic, in which the ratio of the amount of data transmitted by both parties is roughly equivalent (25-75% or so). To identify this, we would add the Session Analysis Meta for this type of byte transmission ratio, as shown below：At this point in the analysis, we want to look at any contextually interesting meta within the analysis, compromise or risk meta groups. In Figure 36, meta is created on these sessions for ‘xor encoded executable’ and ‘windows cli admin commands.’ This indicates that RSA NetWitness Suite observed a Windows executable file in the network traffic that was XOR encrypted with a onebyte key. Adding this meta to the ‘windows cli admin commands’ indicates that common Windows administrative command line utilities, such as ‘whoami,’ ‘ipconfig’ or the command prompt string ‘C:\Windows\system32>,’ were observed either in cleartext or one-byte XOR encrypted. In extracting the payload and performing the XOR instruction with a key of 0xC0, we observe the command prompt string, as shown in Figure 37.While this query may include additional traffic not associated with the attackers, it allowed RSA IR to significantly reduce the network dataset to a level where any included traffic could be quickly reviewed for newly identified C2 IP addresses or false positive IP addresses that required filtering. In order to more accurately observe this communication, RSA IR created custom content for RSA NetWitness Suite. This content is released in the form of the Digital Appendix associated with this report. An example of the meta created for this communication is shown in Figure 38.In Figure 39, an additional HTTP User-Agent is observed: ‘go-http-client/1.1.’ The sessions associated with this User-Agent are the sessions in which files were downloaded via the GOTROJ Trojan. Adding this information to the query associated with Figure 33 returns the following: direction = outbound && service = 80 && tcp.dstport = 443 && session.analysis = ‘direct to ip http request’ && client begins ‘wget’,’go-’ With these queries built around behavioral attacker TTPs, as observed during the time of engagement, any reliance on traditional atomic indicators is removed from the investigation. Instead, the actions required of the attackers (such as operating system command execution and interaction, file download, etc.) are focused upon, as well as the way that their TTP and toolsets perform these actions. Thus any changes in C2, filenames, hashes, user-agents, etc., can be quickly identified and included in the continuing investigation.This section discusses the methodology and RSA NetWitness Endpoint Instant IOCs (IIOCs) and content used by RSA IR during this investigation. The methodology used in this section is described in detail in the RSA NetWitness Endpoint User Guide found here.18 The CARBANAK actors involved during this engagement were particularly careful to leave as little file, log or execution traces as possible. This included, but was not limited to, ad hoc download of tools as needed, preference for lateral tool movement, log deletion automatically built into tools, immediate deletion of tools and logs upon logout of systems, and removal of entries from centralized log repositories. During this engagement, the RSA NetWitness Endpoint agent was deployed to all Red Hat Enterprise Linux (RHEL) and CentOS 6 and 7 systems, as they could support it. The detection of attacker activity on these systems within RSA NetWitness Endpoint utilized aspects of the attacker actions and toolset utilizations that deviated from legitimate installed binary usage. An example of this is the usage of the AUDITUNNEL and the SSHDOOR client and server binaries. Originally, the attackers placed the SSHDOOR binaries in /usr/bin and /usr/sbin as a replacement for the system OpenSSH client and server binaries. However, upon the remediation of system ALPHA, the attackers utilized the SSHDOOR binaries in the non-standard location of /usr/share/ man/mann. The initial placement of SSHDOOR was observed by reviewing any binaries automatically started as part of systemd or init.d, and had a hash value that didn’t match the one in the RPM package list. These attributes are recorded in the IIOCs of RSA NetWitness Endpoint and are shown in the SSHDOOR detection in Figure 40.Once the attackers moved to a non-standard location, this was easilyidentifed, as they were the only common system service binaries not runningin either /sbin or /usr/sbin. The aspects of both instances of $SHDOOR use areillustrated in Figure 41.In Figure 41,we observe two separate sshd binaries running on the system.As SSH only requires one instance of its service binary running at a time,this is an anomaly. Add to this the non-standard location of /usr/share/man/mann in which the second sshd is executing, and the fact that this binarycannot be associated with a legitimatelyinstalled RPM package, this activityimmediately becomes suspect and warrants investigation. The legitimate sshdservice binary process is also highlighted as running from /usr/sbin. Another method of identifying the attacker activity during this engagementinvolved the command line arguments used by the attackers. Essentially,while the attackers could change directorylocations, flenames and evenhashes, the base functionality of the tools themselves could not readilyor easily be changed. Given that the command line arguments of the toolindicated the functionality being utilized, RSA lR analysts zeroed in on theunique command line arguments of the tools being use by the attackers. Asan example, the usage of any web address or lP address in the command linearguments became immediately suspect and reviewed, as shown in Figure 42.As a follow-up to these fndings, RSA lR analysts utilized some of the basefunctions of the RSA NetWitness Endpoint agent in order to gain additionalartifacts and information associated with known indicators. During thisengagement,the directory/usr/share/manmann was the primary workingiirectory for systemlBRAVO. In using this indicator during scopingnvestigations, the fle contents for /usr/share/man/mann were requestedrom every Linux server in the enironment. The purpose of this was tojetermine if this directory was being maliciously used on any systems withinhe environment and to gain additional evidence that may not have executedjuring the agent's tenure on the system.In requestingfles for this directory across all systems, analysts are ableto determine if there are additional tools or malware artifacts used bythe attackers within the same directory. Additionally, this action can alsodetermine if the binaries observed executing from this directory exist on anyother systems. Both cases are shown in the results of this action from theGlobal Downloads section shown in Figure 44.While contextual forensic data within host artifacts could identify someattacker activity, much of the most commonly utilized host forensic dataeither was not useful or was not available on the hosts affected during thisengagement.While aggregate analysis of artifacts, such as NTFS Master FileTables,AmCache,SYSTEM and SOFTWARE Registry Hives, and WindowsEvent Logs, could identify certain aspects of the attackers' actions, they wereconsistentlyineffective at providing the necessary level of granularity to trackthe attackers' actions appropriately. However, using the RSA NetWitnessEndpoint agent already present on the hosts to provide this critical host data,the aforementioned artifacts became force multipliers by providing additionalcontext to the actions observed in RSA NetWitness Suite. The attackers utilized a specifc staging directory on each host in which theytook any signifcant action. In order to appear more legitimate to securityanalysts and tools, they utilized the legitimate Microsoft Windows directoryfor 32-bit applications utilizing the Taiwan Chinese language pack on 64-bitversions of Windows, C:WindowslSysWoW64lzh-TW, While this directoryis a legitimate Windows system directory, no server systems within thisemironment were legitimately utilizing the Taiwan Chinese language directory.As such, this became a useful and actionable lOC for scoping and trackingany systems with substantial actor activity. An example of attacker use of thisdirectory, as observed in RSA NetWitness Endpoint, is shown in Figure 45.In Figure 45 above, the usage of the UlAutomationCore.dll.bin WGET binaryto download attacker tools and the immediate renaming of those tools areshown. This, again, became an excellent actionable lOC to track adversaryactivity. The same contextual aspects that were utilized in the network lOCfor WGET usage in Figure 33 are also used here. Byidentifying any commandexecutions that utilize a command line argument of 'http:// followed byan lP address, RSA lR was able to identify any and all instances in whichthe attackers downloaded tools. In hunting for this activity, we use thesame methodologyused in Section 3.3.1, identifying aspects of the activityassociated with llOCs and reviewing those llOCs for activity. In this case,the UlAutomationCore.dllbin WGET binary download is an unsigned module,located within a legitimate Windows directory, communicates to an externalsource directly to lP address and writes an executable to disk. The llOCsshown in Figure 46 reflect this activity.As stated in the section associated with Table 15, the TlNYp binary is a.modifcation of the Syslnternals PSEXEC remote access utility. Just likePSEXEC, the TlNYP binary sends a service binary to the ADMIN$ share (C:\Windows) of the target host. The target host executes this service binary, andthe TlNYP tool connects to that service binary. When identifying attackerlateral movement from the perspective of the target system, the PSEXESVCexe TiNYP service binary executes the remote command requested by theattacker system. The view of this activity in RSA NetWitness Endpoint isillustrated in Figure 47.As stated in the section associated with Table 15, the TlNYp binary is a.modifcation of the Syslnternals PSEXEC remote access utility. Just likePSEXEC, the TlNYP binary sends a service binary to the ADMIN$ share (C:\Windows) of the target host. The target host executes this service binary, andthe TlNYP tool connects to that service binary. When identifying attackerlateral movement from the perspective of the target system, the PSEXESVCexe TiNYP service binary executes the remote command requested by theattacker system. The view of this activity in RSA NetWitness Endpoint isillustrated in Figure 47.In Figure 48, we see that the PSEXESVC.exe service binary used by TINYP hasa valid Microsoft signature, though it is about 40KB smaller than the legitimatePSEXEC service binary, While the signature for this binary is valid, even validinformation can become an actionable lOC.In this particular engagement, theversion of PSEXEC that was legitimately being used by system administratorswas signed by SysInternals, much like the fgure above. With this being thecase, any PSEXESVC service binaries that were Microsoft signed becameimmediately suspect during this investigation. Additionally, the TlNYP binaryitself was unsigned, standing in stark difference from its legitimate PSEXECcounterpart.The differences in these binaries are shown in Figure 49.Given this, should the attackers change flename or location, this can behunted for by viewing only unsigned binaries with no Description values andsorted by compile time to identify binaries compiled within close proximity tothe compile time of this binary. In order to reduce time to detection ofthis activity, llOC content for RSANetWitness Endpoint has been created and included in the Digital Appendixassociated with this document. The majority of the attackers' actions-on-objective were conducted usingcommands residing within, and are functions of, the Windows CommandProcessor cmd.exe. While there are a variety of commands available to usersat the Windows Command Prompt, a specific subset of these commands areinternal to the cmd.exe binary and therefore will not cause additional processcreation. These commands are listed in Table 25.Throughout this engagement, the primary attacker actions consisted oftraversing directories and outputting fles, looking for hles that may containadditional credentials, database information,internal infrastructuredocumentation, and fnancial data such as PCl data. The majority of thecommands utilized consisted of the CD, TYPE, ECHO, DATE and DIR. As noneof these commands call additional binaries, the attackers would reside almostcompletely within the cmd.exe process for the majority of their host actions.Four distinct external commands were utilized by the attackers in traversingthe host flesystems as part of their internal reconnaissance activities: net.exe.ipconfg.exe, fnd.exe and qwinsta.exe. Knowing this, any time cmd.exe called anyof these binaries, it was considered suspect activity. However, two of thesecommands were specifc to the actor activity and were thereby utilized as ahigh-fdelity indication of attacker activity. The fnd.exe command searchesa specifed fle or piped input for a defned string given in the commandarguments, much like the grep binary does on Linux and UNlX hosts. Theattackers would use this binary in the following command string. The attackers in this engagement primarily used modifed versions of legitimateadministrative tools, commonly used penetration testing utilities and commonnetwork fle acquisition tools. Though specialty malware was observed duringthis intrusion, the attackers used basic XOR encoding just above Layer 4 tofacilitate communication, communicated via SSH tunnel directly over TCP/443.or just transmitted and received data in clear text across the network. Of theobserved actions during this intrusion, none of the attacker tools, techniques orprocedures was particularly advanced. However, they were still able to bypassa signifcant security stack, obtain initial access and lateral access effectively.deploy malware and toolsets with impunity, and traverse over 150 systems inthe span of six weeks. While, at frst glance, this attack was not sophisticatedin its toolset, it was sophisticated in its operationalization and agility of actionstaken by the attackers. Upon reviewing the entirety of tools used in thisengagement, operational correlations can be made between the Linux andWindows toolsets, as illustrated in Table 26.The CARBANAK actors not only showed the capability to successfullycompromise both Linux and Windows systems but they chose a toolset thatwas either directly cross-platform or extremely similar in both functionand command line usage.This indicates a level of tactical organization andoperationalization not previously observed by this actor group. Additionally,they were signifcantly cognizant and aware of actions taken by the securityteam, switching to new methods of ingress after initial compromise, detectedremediation actions and environmental migration. Theywere methodical intheir choice of staging systems, basing the system utilized on:a critical function of lateral access (such as systems BRAVO and DELTA) oreresponder detection and investigation (such as system CHARLIE) They chose key systems based on their needs rather than systems theorganization would consider "key' assets. They ensured the toolsets theywould interact with most often contained very similar functions andcommands across environments in order to limit mistakes made at the While a frst look at the tools used in this engagement may appear simplistic,upon review of the entire intrusion it becomes quickly apparent that eachof them was purpose-chosen with an overall operationalized capability inmind. CARBANAK has shown themselves to be a coordinated and extremelypersistent group of actors that are consistently moving towards more agilemethods ofintrusion and standardization of processes across heterogeneousenvironments. They have proven their capability to use that persistenceand agility to defeat or bypass organizational security controls. Even withthe least advanced of their capabilities, they can be a difhcult adversary totrack within an environment due to their speed, efhciency, adaptability andcare in leaving little trace of any activity. However, this difhculty compoundsexponentially for organizations without the necessary visibility, practices,methodologies or trusted partner relationships necessary to effectivelydetect and respond to these types of threats. This case study shows thatwith the necessary visibility, planning, methodology and analyst enablement,organizations can be successful against these types of threats. Disclaimer: This white paper and related graphics are provided forinformational and/or educational purposes. RSA is not responsible for errors,omissions or for results obtained from the use of this information. Thiswhite paper is being provided "as-is," with no guarantee of completeness,timeliness or accuracy, and without warranty of any kind. This white paperis not intended to be a substitute for legal or other professional advice, andconstitutes the opinions of the author(s).