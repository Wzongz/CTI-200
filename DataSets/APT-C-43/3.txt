Machete is a cyberespionage toolset developed by a Spanish-speaking group that has been operating since at least 2010. This group is very active and continues to develop new features for its malware, and implement infrastructure changes in 2019. Their long run of attacks, focused in Latin American countries, has allowed them to collect intelligence and refine their tactics over the years. ESET researchers have detected an ongoing, highly targeted campaign, with a majority of the targets being military organizations. Key points in this white paper:Many events occurred in the first half of 2019 that have put Venezuela in the spotlight. From the uprising of the opposition against President Nicolás Maduro to plots in the military forces, the situation in Venezuela has been open to international scrutiny. There is, however, an ongoing case of cyberespionage against the Venezuelan military that has managed to stay under the radar. First described by Kaspersky in 2014 [1] and later, by Cylance in 2017 [2], Machete is a piece of malware found to be targeting high profile individuals and organizations in Latin American countries. In 2018 Machete reappeared with new code and new features. As of June 2019, ESET has seen over 50 victims being actively spied upon by Machete, with more than half of them being computers belonging to the Venezuelan military forces. Several GBs of confidential documents and private information have been exfiltrated to a server controlled by the attackers. Machete has Latin American targets and has been developed by a Spanish-speaking group, presumably from a LATAM country. They are active and constantly working on very effective spearphishing campaigns. In some cases, they trick new victims by sending real documents that had been stolen on the very same day. They seem to have specialized knowledge about military operations, as they are focused on stealing specific files such as those that describe navigation routes. This white paper presents a technical analysis of the malware, as well as data related to these targeted attacks.Machete relies on spearphishing to compromise its targets. In other words, very specific emails are sent directly to the victims, and they change from target to target. These emails contain a link to download (or an attachment with) a compressed file with the malware and a document that serves as decoy. Figure 1 is a typical PDF file displayed to a potential victim before compromise. To trick unsuspecting targets, Machete operators use real documents they have previously stolen; Figure 1 is a classified military document that is dated May 21st, 2019, the same day the related .zip file was first sent to targets.The kind of documents used as decoys are sent and received legitimately several times a day by targets. For example, Radiogramas are documents used for communication in the military forces. Attackers take advantage of that, along with their knowledge of military jargon and etiquette, to craft very convincing phishing emails. In order to get a general idea of Machete’s capabilities to steal documents and spy on its targets, we’ll describe its main features as they appeared, in chronological order.Some of these early versions cannot have their code or configuration updated from the remote server. However, the binaries seen since late April do have these capabilities.An extra layer of obfuscation was added, using zlib compression and base64 encoding. It managed to evade detection by most security products. Physical exfiltration to removable drives was added, but both features added in November 2018 were removed from the code. Also, logs were changed to Spanish.On May 5th, 2019, subdomains used by Machete to communicate with the remote server were taken down. New samples with new features started to emerge on May 16th.Machete is a highly targeted backdoor that has managed to stay under the radar for years. Emails with malicious attachments are only sent in small numbers. Operators behind Machete apparently already have information about individuals or organizations of interest to them in Latin America, how to reach them, and how best to trick them into getting compromised. Real documents are used as decoys, so it is not rare that victims never realize they were compromised and are even compromised again after Machete C&C servers change. Since the end of March up until the end of May 2019, ESET observed that there were more than 50 victimized computers actively communicating with the C&C server. This would amount to gigabytes of data being uploaded every week. By analyzing filenames and metadata of exfiltrated documents, it was possible to determine that more than half of the compromised computers were in the Venezuelan military forces. This would include several brigades or divisions across Venezuela. Other compromised computers were related to education, police, and foreign affairs sectors. This extends to other countries in Latin America, with the Ecuadorean military being another organization highly targeted by Machete. These countries are shown in Figure 2.Machete is malware that has been developed and is actively maintained by a Spanish-speaking group. This has been affirmed by other researchers for previous versions of Machete; these reasons, in conjunction with those we describe below, lead us to agree with this attribution. First of all, there are some words in Spanish present within the code of the malware. Variable names are mostly random but the operators forgot to rename some of them. Examples include: datos (data), canal (channel), senal (signal), and unidad (unit, drive). Another example is shown in Figure 3.Also, as was previously mentioned, logs with keystrokes and clipboard data are generated in Spanish. Initially they were in English, perhaps indicating copied code, but were later translated, for example to indicate which window the data is coming from. The presence of code for physical exfiltration of documents may indicate that Machete operators could have a presence in one of the targeted countries, although we cannot be certain.Between 2014 and 2017 inclusive, the malware was distributed in NSIS-packed files. These would extract and execute several py2exe components of Machete; py2exe [3] is a tool that converts Python scripts into Windows executables. These executables don’t require a Python installation to run, but can be quite large, as they need to include all Python libraries used by the script and the Python virtual machine. For example, py2exe would convert the classic one-liner “Hello, world” script into a 4 MB executable. This new version of Machete, first seen in April 2018, uses a downloader as a first stage, which installs the backdoor components of Machete on a compromised system.In Figure 4 we can see that the downloader comes as a self-extracting file (made with 7z SFX Builder [4]). It opens a PDF or Microsoft Office file that serves as a decoy and then runs the downloader executable. The downloader is a RAR SFX that contains the actual downloader binary (a py2exe component) and a configuration file with the downloader’s target URL as an encrypted string. All download URLs we have seen are either Dropbox or Google Docs. The files at these URLs have all been self-extracting (RAR SFX) archives containing encrypted configuration and malicious py2exe components.The .exe file inside is a RAR SFX that is very similar in structure to the final Machete payload itself. It contains a py2exe executable and a configuration file with the URL from which to download Machete. The config file is named mswe and it is the base64-encoded text of an AES-encrypted string.For each binary the decryption key is the same for both URL and payload, but the key varies across binaries. In contrast, decryption keys used in the Machete payload itself have remained the same across all binaries up until June 2019, when they changed. Part of the code is shown in Figure 6.Later downloaders added version check features, similar to what we’ll describe in the GoogleCrash.exe: scheduling and persistence section below. In these cases, version information is read from a file bsw.as, included in the downloader. Some names were also changed: for example, the task was renamed to AdobeR, and downloaded payload renamed to ders.exe.Since August 2018, all the main Machete backdoor components (which will be described in the next section) have been delivered with an extra layer of obfuscation. The executable py2exe files now contain a block of zlib-compressed, base64-encoded text which, after being decoded, corresponds to the same code that was seen before. This obfuscation is produced using pyminifier [5] with the -gzip parameter. Part of the obfuscated code is shown in Figure 7. After that obfuscation is removed, there is code with further obfuscation including random names for variables and lots of junk code. Once again, this was not developed by the Machete operators: pyobfuscate [6] is an old project that has been used in previous Machete versions as well. A sample of this obfuscated code is shown in Figure 8.It must be noted that one of the Machete binaries had a chunk of commented code that is produced by NXcrypt [7]. However, in the end, it seems the Machete operators decided not to use NXcrypt after all.Machete’s dropper is a RAR SFX executable. Three py2exe components are dropped: GoogleCrash.exe, Chrome.exe and GoogleUpdate.exe. GoogleCrash.exe is executed first and launches the other two. A single configuration file, jer.dll, is dropped, and it contains base64-encoded text that corresponds to AES-encrypted strings. A schema summarizing the components is shown in Figure 9.This is the main component of the malware. It schedules execution of the other two components and creates Windows Task Scheduler tasks to achieve persistence. First, a version number is read from the configuration file jer.dll. Version numbers have 4 digits since this new distribution in 2018, although sometimes they also have ‘.0’ at the end (for example, version number ‘1111.0’). If a victim’s PC was already compromised and the version number in the new configuration file is bigger than in the existing one (see Figure 10), the existing Machete installation (tasks, files, processes) is cleaned and the new version installed.This component is responsible for recollection of data from the victim. Figure 12 contains the code for the main() routine. It runs indefinitely, performing operations based on timers.Stolen data are stored in different subfolders, depending on what data type it is (screenshots, logs of keystrokes, etc.). Then the communication component takes the data and sends them to a remote server. This folder structure will be described later.Screenshots are taken every five minutes, using ImageGrab from PIL [8] (Python Imaging Library). The filename is encoded with ROT13 (only for lowercase letters) and then the image is encrypted and moved to the Winde folder. Here is the naming convention:The encryption used is AES and the code was copied from this page: https://eli.thegreenplace.net/2010/06/25/ aes-encryption-of-files-in-python-with-pycrypto The key is hardcoded and has not changed in any of the binaries we have analyzed, except for those that were released in mid-June 2019 (this will be discussed later). It is a 16-byte key, whereas the key used for configurations is 32 bytes long.One text file is created for every year, containing a listing of files that were last modified in that year. This process runs every 60 seconds, checking for files on every fixed and removable drive (only when the list doesn’t already exist for the current year). If the list was already created but there are newly modified files, the communication component can delete listings to get newer files, as will be described later. It’s interesting to note the exclusion of the folder Archivos de Programa, which is Program Files in Spanish. The resulting listings will be saved to the Loc folder.Access to the clipboard is achieved by creating a window and hooking its WM_DRAWCLIPBOARD, WM_ CHANGECBCHAIN and WM_DESTROY messages. The code was inspired by this: https://mail.python.org/pipermail/ python-list/2006-October/399603.html The payload has been inserted into the OnDrawClipboard function, and is shown in Figure 14.The content of the clipboard, along with the window the operation came from, is saved in an HTML file named Hser, which will be stored under the same directory as screenshots. It is encrypted and copied the same way, with some differences in the naming convention.This is achieved by creating a top-level window. The code was copied from here: http://timgolden.me.uk/ python/win32_how_do_i/detect-device-insertion.html Curiously, when the window is created, the name Device Change Demo is used, which hasn’t been modified by the Machete developers. The payload is located in the onDeviceChange function. When a removable drive has been inserted, malware executables located in the Gchrome folder (of extension .scr) are copied to the root folder of the newly inserted drive. Then every file in that drive that matches a desired extension is copied and encrypted to the Winde folder on the local drive. These extensions are shown in Figure 15.This feature is related to the one that was described previously. When the insertion of a removable drive is detected, the existence of a specific filename is checked in the root of that drive. If found, then files from every drive are copied (encrypted) onto the removable drive, in a hidden folder. That specific file is not created anywhere in the code of Machete and the filename may vary from one target to another. In other words, this is a way to exfiltrate data in cases where the attacker has physical access to a computer that was already compromised with Machete. A file usb.txt is created in the main directory where the malware is located. Only one line is written: the drive letter where data was copied. Figure 16 lists the extensions sought and, if found, copied. Note that the list differs to that of Figure 15: compressed files are ignored, as well as pdf files; now included are specific files that contain encrypted passwords. This task is performed in just 4 lines of code by creating a compressed archive of the user’s data folder, both for Chrome and Firefox. The resulting zipped files are stored in the Winde folder. Original files are located in the following folders：Information about available Wi-Fi networks is collected by running the following Windows commands:The output from these commands is parsed and a dictionary object is created containing information about the Access Point’s MAC address and signal strength for every available Wi-Fi network. Here is an example:This information is sent as a JSON object to the Mozilla Location Service’s API [9]. In short, this application provides geolocation coordinates when it’s given other sources of data such as Bluetooth beacons, cell towers or Wi-Fi access points.The Machete operators copied the code to do this from Python Wi-Fi Positioning System [10]. However, that project uses Google’s Geolocation API, which requires a valid API key. Registering an API key might be a hassle (it requires a credit card), but Mozilla’s API is the same as Google’s, with the difference that it does not require a private API key. The string ‘test’ can be used as API key, which is exactly what Machete uses. They copied the code (and got the idea) from this blog: https://zuidt.nl/blog/html/2014/07/04/tinkering_with_mozilla_location_services.html Mozilla’s API returns geolocation information from where latitude and longitude coordinates are taken to build a Google Maps URL. An extract of this part of the code in Machete can be seen in Figure 19The advantage of using Mozilla Location Service is that it permits geolocation without an actual GPS and can be more accurate than other methods. For example, an IP address can be used to obtain an approximate location, but it is not so accurate. On the other hand, if there is available data for the area, Mozilla Location Service can provide information such as in which building the target is located. The URL and full output from netsh commands are written in the Winde folder to a text file with a name generated as follows:This component is responsible for communicating with the remote server. The configuration to set the connection is read from the jer.dll file: domain name, username and password. The principal means of communication for Machete is via FTP, although HTTP communication was implemented as a fallback in 2019. Another line read from the configuration is a folder name on the server that identifies the campaign. Victim info is retrieved from the chrom.dll file and a folder on the server is created as /[folder_name]/MACaddr-HOSTNAME. Decryption is the inverse process to the one described for encryption of data in chrom.dll file (see section GoogleCrash.exe: scheduling and persistence). Then, the main functionality of this component is to upload encrypted files located in the Winde folder to different subdirectories on the C&C server. Figure 20 shows how the folder is processed to upload documents. The listing of files generated by the Chrome.exe component (stored in the Loc folder) is read and those files are encrypted (temporarily to the Winde folder) and uploaded to the C&C server. All of this is done by this component and not the spy component, although that would make more sense. Encryption is the usual AES routine and for naming, only ROT13 on the filename is performed. Once a file is uploaded, it is deleted from the Winde folder, as well as the corresponding line in the list of files.Not only is confidential information exfiltrated to the server, but Machete operators can, by leaving specific files on the server, update configurations, malware files, listings of files, or execute other binaries. Therefore, they can customize the malware behavior if they want to retrieve more specific data. If a file jer.dll exists on the server when GoogleUpdate.exe runs, then the local config file jer.dll gets overwritten by this file. After being used, it gets deleted from the server. The code is shown in Figure 21.If a file bers.dll exists, then it replaces the list of files for current year, located in the Loc folder. This way, the Machete operators can retrieve specific files from a compromised system.There can also be executable files on the server. They will be copied to the %APPDATA% folder on the compromised computer and will be executed from there, as seen in Figure 23.Finally, there can be .scr executables with updated components (.asae extension on the server), which will be copied to the Ansrome folder on a compromised PC. However, they are not executed. If a file bsera.txt is in the same folder as the executables, the GoogleUpdate.exe component will proceed to delete all files from the Ansrome folder.Since May 16th, 2019, new Machete binaries have emerged. After we had domain names related to the FTP server taken down, Machete’s operators had to come up with a new plan to make the malware more reliable and maintain control of their victims. Information is still being sent to an FTP server but, if for some reason the connection fails, then the information is sent over HTTP. The HTTP server is the same as the FTP server (same IP address), but the domain name used is different (more details in the section Domain names below). For HTTP communication, proxy settings are retrieved and files in the Winde folder are sent if they are no bigger than 8 MB. If more than 5 files could not be successfully sent without errors, then the transfer is stopped. Both size and error-checking are new features first seen in May 2019. Documents are sent by calling urlopen() [11] with the following parameters in the query string of the URL:For file listings in the Loc folder, documents are encoded in base64 and sent in the same manner. If five or more files generated errors when sending, then an alternative transfer method is executed. First, processes running on the system are inspected, looking for web browsers: Firefox, Chrome, Internet Explorer, Microsoft Edge and Opera. If any of those is running, then only five files under 1 MB will be sent. Files bigger than 1 MB will be deleted from the Winde folder. The information will be sent as a query string with the same parameters described above, but once for all five documents. As can be seen in Figure 25, now there will be parameters menrut0, menrut1, etc.Then a file google.html is written to disk and opened with the default web browser (which the Machete operators must have assumed would be open if a process for a web browser was found to be running). This will cause information to be sent to the C&C server via a http POST request. In June 2019 Machete started being delivered with several changes to its structure, while keeping essentially the same functionalities. Curiously enough, Machete seems to have been rewritten to use different libraries since this update, perhaps with the intent to evade detection. This version’s malicious tasks are divided into six components, which are no longer py2exe executables. Python scripts for malicious components, an original executable for Python 2.7, and all libraries used are packed into a self-extracting file called python27.exe. This binary is distributed along with a decoy document, as we’ve seen before. Figure 26 shows the configuration for self-extraction of the payload.A folder C:\Python2.7 is created, holding malicious scripts and Python libraries in the DLLs subdirectory. The first component to be executed is _hashlbi.pyw, which is similar to GoogleCrash.exe, but with different code. Before describing the components, it is worth mentioning that a component may perform tasks that are unrelated. This means that, in the future, Machete operators could swap parts of code between components, rename them, etc. trying to avoid detections.This component sets up malware folders and schedules tasks to run the other components. Folders and files are created under C:\Python2.7 with the same name as the ones in a common Python installation. They are bogus and have no contents. The following Windows Task Scheduler tasks are created. Note that there isn’t a task for this component itself.This component also copies Microsoft Office files, .pdf, .jpg/.jpeg and .rar/.zip files from every drive to %LOCALAPPDATA%\Microsoft\Dropbox\Crashpad and creates directories with names based on the SHA-256 hash of those files, in C:\Python2.7\DLLs\hhd. Part of the code is shown in Figure 27.The hash is calculated using 3 MB chunks and its only purpose is keeping track of what files have already been copied.This component checks running processes (every three or four hours) looking for web browsers. It makes a .zip file with profile data from each of these browsers if they are not currently running: Chrome, Firefox, Opera and Internet Explorer. Filenames are different for every browser – see Figure 28 for details – but they all include the UTC time instead of local time, which is new for Machete. These files are saved in %LOCALAPPDATA%\Microsoft\Dropbox\avatar_cache\.To perform its tasks this component uses different libraries than the ones we described before. To access the clipboard the ctypes library is used and the contents are saved to a file wwancgf_.html in the avatar_cache folder. Screenshots are also saved in this folder. They are taken with shot() function from mss library [12]. Dumped screenshot: ‘shopt-’ + utcnow().strftime(‘%Y-%m-%d-%H_%M_%S.%f’) + ‘.png’ Example: shopt-2019-06-20-22_37_16.176.png The code for copying files and hashing is again present, but this time it has been modified to copy only files from removable devices. Copied files will have ‘usb-’ prepended. Part of the code has been taken again from Tim Golden’s site: http://timgolden.me.uk/python/win32_how_do_i/find-drive-types.html _elementree.pyw: geolocation and updates from the server This component performs geolocation with code similar to that described previously but with some added information. A file gt.txt is created in the avatar_cache folder; a Google Maps URL with the location of the victimized computer and the output of the systeminfo Windows command are appended. The inclusion of that command is a new feature and it shows installed security patches, among other information. Another file is created as utc_time + ‘-gtn.txt’. It contains the same information as the other file, but adds all nearby wireless networks and information about the WLAN to which the computer is connected (including the passphrase to connect). Part of the code is shown in Figure 30.The second part of this component extracts the C&C server from the file C:\Python2.7\DLLs\date.dll (configuration file, base64-encoded) and downloads and executes binaries or scripts from there.The code in Figure 31 shows that a .exe or .vbe file will be downloaded (from the PSLte or PSLtv folders respectively) and executed (not shown in the snippet) if the operators have placed some files there for that specific target. There is also code to download a new configuration file and replace the one in use: a file date.html is retrieved from the PSLte directory on the server. A folder QuitReports is used to store downloaded files on the victimized computer.Two C&C servers are read from the date.dll configuration file: one will be the primary server and the other one the fallback server. Every victimized computer will have a folder on the server with the following format: folder_campaign/MACaddr-HOSTNAME. As of this writing, we have seen ‘02’, ‘03’ and ‘04’ for folder_campaign. Files to be exfiltrated are moved to other folders on a compromised computer before being encrypted and sent to the server. All documents, which were stored in the Crashpad folder, are moved to the CrashReports folder. Logs, screenshots and browser data are moved from avatar_cache to the events folder. If there are any files larger than 120 MB, they are deleted. Not every document is sent to the server. The latest code of Machete does not keep listings with modified files. Instead, as seen in the code snippet in Figure 32, the date of modification is retrieved and only the 20 newest documents are copied from CrashReports to the events folder to be exfiltrated. Encryption is AES and a 64-byte key is used: a SHA-256 digest of a 40-byte string. Part of this code is shown in Figure 33. After that, files are base64 encoded and ROT13 is applied to the filenames.Before they are actually sent, files are copied one last time, from events to the instance_db folder. Then, files are sent over HTTP via a POST request, similar to what was described in the HTTP communication section. The folder names have changed, as shown in Figure 34. If for some reason the server could not be contacted, then the fallback server is used to exfiltrate documents in the same manner. If after this there are still files in the folder that could not be sent, a file handle to the binary stream is passed in the POST request instead of the contents of the file itself. This is done for both the main and fallback servers, meaning that these files will be mirrored on both servers.Initially, we saw three domain names being used in Machete’s configuration files. They all pointed to the same IP address during 2019, but a passive DNS query showed two other IP addresses active during 2018. Table 2 shows information about these domain names.Those three subdomains were reported to the dynamic DNS service No-IP (which provisions the second-level domains) and they have pointed to 0.0.0.0 since May 5th, 2019. Some days later in May, the operation was moved to an FTP server on a different IP address (158.69.9[.]209), and a new No-IP subdomain was found in configuration files, adtiomtardecessd.zapto[.]org. To prevent losing their victims if that domain name is taken down, Machete operators developed new code to send stolen data over HTTP, with a domain name specific to that purpose. That domain, artyomt[.]com, was registered on May 10th, 2019 but there is not much more information available, so it’s less likely to be taken down. As was mentioned before, Machete operators stopped using downloaders since their update in May 2019. Phishing emails would contain a link to download a zipped file from lawyersofficial.mipropia[.]com (free hosting). Some files and their timestamps can be seen in Figure 35.In June 2019 Machete operators stopped using FTP communication and started to use HTTP for both the main and fallback C&C servers. The domain name tobabean[.]expert points to the IP address 142.44.236[.]215, which has been used before by Machete. The other server is u929489355.hostingerapp[.]com and the related IP address is 156.67.222[.]88 at the time of this writing.Latin America is usually overlooked when it comes to persistent threats and groups targeting the region. There have been, however, several attacks resonating in the news in the past few years, such as those targeting banks in Mexico [13] and Chile [14]. The group behind Machete has managed to continue operating even after researchers have published technical descriptions and indicators of compromise for this malware. By introducing small changes to their code and infrastructure, the group has bypassed several security products. It is the targeted organizations, though, who have failed in raising awareness and applying security policies so that employees don’t fall for these attacks in the first place.