Herein we release our analysis of a previously undocumented backdoor that has been targeted against embassies and consulates around the world leads us to attribute it, with high confidence, to the Turla group. Turla is a notorious group that has been targeting governments, government officials and diplomats for years. They are known to run watering hole and spearphishing campaigns to better pinpoint their targets. Although this backdoor has been actively deployed since at least 2016, it has not been documented anywhere. Based on strings found in the samples we analyzed, we have named this backdoor “Gazer”. Recently, the Turla APT group has seen extensive news coverage surrounding its campaigns, something we haven’t seen for a long time. The Intercept reported that there exists a 2011 presentation by Canada’s Communication Security Establishment (CSE) outlining the errors made by the Turla operators during their operations even though the tools they use are quite advanced. The codename for Turla APT group in this presentation is MAKERSMARK. Gazer is, similar to its siblings in the Turla family, using advanced methods to spy and persist on its targets. This whitepaper highlights the campaigns in which Gazer was used and also contains a technical analysis of its functionalities. Based on our research and telemetry on the different campaigns where Gazer was used,we believe that Southeastern Europe as well as countries in the former Soviet Union Republichas recently been the main target. The witnessed techniques, tactics and procedures (TTPs) are in-line with what we usuallysee in Turla’s operation: a first stage backdoor, such as Skipper, likely delivered through spearphishingfollowed by the appearance on the compromised system of a second stage backdoor, Gazerin this case. Although we could not find irrefutable evidence that this backdoor is truly another tool in Turla’s arsenal, several clues lead us to believe that this is indeed the case. First, their targets are in line with Turla’s traditional targets: Ministries of Foreign Affairs (MFAs) and embassies. Second, the modus operandi of spearphishing, followed by a first stage backdoor and a second stage, stealthier backdoor is what has been seen over and over again. Skipper, which has been linked to Turla in the past, was found alongside Gazer in most cases we investigated. Finally, there are many similarities between Gazer and other second stage backdoors used by the Turla group such as Carbon and Kazuar. As usual, the Turla APT group makes an extra effort to avoid detection by wiping files securely, changing the strings and randomizing what could be simple markers through the different backdoor versions. In the most recent version we have found, Gazer authors modified most of the strings and inserted “video-game-related” sentences throughout the code. An example of such a string is depicted in Figure 1. Gazer is written in C++ and shares several similarities with other malware from the Turla APT family. Indeed, Gazer, Carbon and Kazuar can receive encrypted tasks from a C&C server, which can be executed either by the infected machine or by another machine on the network. They all use an encrypted container to store the malware’s components and configuration and they also log their actions in a file. The list of C&C servers is encrypted and embedded in Gazer’s PE resources. They are all compromised, legitimate websites (that mostly use the WordPress CMS) that act as a first layer proxy. This is also a common tactic for the Turla APT group. Another interesting linkage is that one of the C&C servers embedded in a Gazer sample was known to be used in a JScript backdoor documented by Kaspersky as Kopiluak. Last but not least, these three malware families (Gazer, Carbon and Kazuar) have a similar list of processes that may be employed as a target to inject the module used to communicate with the C&C server embedded in the binary. The resource containing this list can change from one sample to another, it is likely tailored to what is installed on the system (for example, on some samples, the process name “safari.exe” can appear on the list). Gazer’s authors make extensive use of encryption. They don’t use the Windows Crypto API and don’t seem to use any public library. It looks as if they are using their own library for 3DES and RSA. The RSA keys embedded in the resources contains the attacker’s public key which is used to encrypt the data sent to the C&C server, and a private key to decrypt resources embedded in its binaries. These keys are unique in each sample. These resources are structured in the same way as RSA from OpenSSL, but these values (p, q, etc.) are computed by the custom implementation of Gazer’s authors. For 3DES, the IV and a static key are hardcoded and are the same in all samples. This 3DES key is randomly generated and XORed with the static key. The random data used to XOR the static key is prepended to the logfile header. This key is then used in the regular 3DES algorithm. The pattern “FFFF-F” is replaced with values computed from the security identifier (SID) of the current user and the current timestamp. Let’s take for example the current date as: “2017/04/24” and the SID: “S-1-5-21-84813077 3085987743-2510664113-1000”. To generate the pattern at the end of the named pipe, some arithmetic is performed: Once this message is received by the orchestrator, the loader is securely deleted by overwriting the file content and deleted through the DeleteFile function. Afterwards, the persistency is set up. The persistency information is retrieved from the resource “105” and stored in the Gazer storage. Among these data, there is a dword value that is used to choose which persistency mode will be applied. If the resource 105 begins with the dword value “3”, a LNK file will be created in the Start Menu. The resource will also provide a description for the shortcut file, the path for the target and the filename for the LNK. All the files related to Gazer (except the logs) are stored encrypted within the registry. The orchestrator’s resource “109” contains the root storage path (it will be designated %RootStoragePath% in the rest of this paper). In every sample we examined, this resource pointed to the same storage path: Each resource is decrypted on the fly; the signature is compared with the decrypted data to check the integrity. Decrypted resources that pass this integrity check are encrypted with a new RSA key generated randomly by the orchestrator code. The private key and the encrypted resource are then stored in the registry under a specific GUID subkey. When a task is retrieved from the C&C, it is either executed by the infected machine or by another computer on the same network through a P2P mechanism (in the same way this was done in Carbon and Snake). The task can be: The communication module is used to retrieve tasks from the C&C server and to dispatch them to the orchestrator. This library is injected into a process which can legitimately communicate over the Internet. The injection library is the same as the one found in the loader to inject the orchestrator into “explorer.exe”. If a proxy server exists, it is retrieved and used by Gazer to make the HTTP requests. There are two different methods used to retrieve this value, either by requesting the following registry key: The malware communicates with its C&C server to retrieve tasks (through HTTP GET requests) and to send the tasks results (through HTTP POST requests). Before sending a request to the C&C, the command CMC_GIVE_SETTINGS is sent to the orchestrator through its communication channel (a named pipe, more on this in the next section). The message (MSG) contained in the packet in this case is a single byte set by the orchestrator for the command result status. The orchestrator replies on the same channel with the settings retrieved from the working directory with the object id, the list of the C&C servers and the last connection date. A GET request is performed to retrieve a task from the C&C. The parameters of the GET request are chosen from amongst a hardcoded list of keywords that does not look suspicious. Their values are generated randomly in the charset [a-z0-9] with a random size from a range given for each parameter: A timeout of 10 minutes is set for each request (send/receive/connect) through InternetSetOption. Once the request is sent, the response is handled only if the returned HTTP status code is 404. The content of the response is encrypted and can be decrypted with the private RSA key generated by the orchestrator. The response body contains a blob of data and an MD5 hash of the data. The blob is hashed and compared to the MD5 to ensure the integrity of the server’s response. If the response size is 20 bytes (a blob of 4 bytes + the hash), there are no tasks to retrieve. A command CMC_TAKE_TASK is sent to the orchestrator with the encrypted task received from the C&C server and its size. The orchestrator will be in charge of executing the task and will send the results to the communication module. Once the blob of the tasks results (encrypted by the orchestrator) is received, it is sent to the C&C server through a POST request in the same way that it was done for the GET request (using parameters with random values). Four different versions have been identified. In the first version, the function used to write logs has as its parameter the real function name where the log occurs. There were also different methods used to inject code (the one documented in this whitepaper and one based on window injection). In a second version, the function names used as parameters are replaced by an ID and only one method is used for code injection. Also, the string “NO OLD METHODS” appears in this part of the code. Some samples from the first versions were signed with a valid certificate issued by Comodo for “Solid Loop Ltd”. The compilation date appears to be 2002 but is likely to be faked because the certificate was issued in 2015. Some efforts have been made to obfuscate strings that can be used as IoCs. The mutex name and the named pipe do not appear in cleartext anymore; they are now encoded with a XOR key. On the previous versions, the logfile names were hardcoded in the binary. The function GetTempFileNameA is now used to generate a random filename. The C&C server returns a 404 or 502 status code page, whereas it was only a 404 in the previous versions. In the latest versions compiled in 2017, the log messages are different (although they have the same meaning). For example: “PE STORAGE” is replaced by “EXE SHELTER”, “PE CRYPTO” by “EXE CIPHER” etc… Last but not least, the compilation timestamp seems not to be faked anymore. In conclusion, Gazer is a very sophisticated piece of malware that has been used against different targets in several countries around the world. Through the different versions we found and analyzed, we can see that this malicious backdoor is still being actively developed and used by its creators. Indicators of Compromise can also be found on github. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.