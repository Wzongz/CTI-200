Turla, also known as Snake, is an espionage group notorious for having breached some heavily- protected networks such as the US Central Command in 2008 [1]. Since then, they have been busy attacking diplomats and military targets around the world. Among the notable victims were the Finnish Foreign Ministry in 2013 [2], the Swiss military firm RUAG between 2014 and 2016 [3] and more recently, the German government at the end of 2017/beginning of 2018 [4]. In the latter case, several newspapers quickly released some information [5] about the modus- operandi used by the attackers: they used email attachments to control the malware and also to transfer the stolen data from the system. However, no technical information about this backdoor was publicly available. Herein, we release our in-depth analysis of this Turla backdoor, controlled via PDF attachments sent via email. As media reported [6], several computers of the German Foreign Office were infected by this backdoor. The attack apparently started in 2016 and was detected by the German security services at the end of 2017. The attackers first infected the Federal College of Public Administration (Hochschule des Bundes), a federal administrative university, and moved through its network until they were able to access the Foreign Office network in March 2017. Thus, Turla operators had access to some highly sensitive information (such as emails sent by the German Foreign Office staff) for almost a year. Our investigation also reveals this piece of malware targeting Microsoft Outlook was used against various political and military organizations. We were able to ascertain that the Foreign Offices of two other European governments and a large defense contractor were compromised. Our investigation also led to the discovery of dozens of email addresses registered by Turla operators for this campaign and used to receive exfiltrated data from the victims.The Turla Outlook backdoor has two interesting functionalities. First, it steals emails by forwarding all outgoing emails to the attackers. It mainly targets Microsoft Outlook, a widely used mail client, but also targets The Bat! [7], a mail client very popular in Eastern Europe. Second, it uses email messages as a transport layer for its Command & Control (C&C) protocol. Data, such as files requested via a command of the backdoor, is exfiltrated in specially-crafted PDF documents attached to emails, and commands are also received in PDF attachments. Thus, its behavior is particularly stealthy. It is important to note that no vulnerabilities were used either in PDF readers nor in Outlook. What actually happens is that the malware is able to decode data from the PDF documents and interpret it as commands for the backdoor. The targets are in line with traditional Turla operations. We identified several European governments and defense companies compromised with this particular backdoor. Thus, it seems the attackers use it to maintain persistence in the most restricted networks where well-configured firewalls, or other network security systems, could effectively block traditional C&C communication through HTTP(S). Figure 1 shows that the strings within the malware include some government-related top level domains. MFA stands for Ministry of Foreign Affairs, .gouv is the subdomain used by the French government (.gouv.fr) and ocse refers to the Organization for Security and Co-operation in Europe. Based on our research and telemetry, we identified this backdoor as having been in the wild since at least 2013. As usual with Turla, it is not possible to rely on compilation timestamps as they are gen erally faked. However, we believe the first versions have been compiled earlier than 2013 as the version released in 2013 was already pretty advanced. We then found a more basic version, whose compilation timestamp is 2009, but we were unable to identify its release date with reasonable accuracy. Figure 2 is the timeline based on our telemetry and publicly available information. In the most recent versions, the backdoor is a standalone Dynamic Link Library (DLL) that has code for installing itself and interacting with the mail clients Outlook and The Bat!, even if only the installa tion for Outlook is implemented. Thus, it can easily be dropped by any other Turla component that is able to execute additional processes. In this section, our analysis is based on a sample released somewhere during the first six months of 2017. Some specific information about older or newer samples may also be included.In order to install the backdoor, attackers execute the DLL export called Install or register it using regsvr32.exe. The argument is the targeted mail client. Figure 3 shows the different possible values. However, in the most recent versions, only the installation for Outlook is implemented. Once again, the Turla developers rely on COM object hijacking to establish persistence for their malware. This is a well-known technique used for many years in the wild and in particular by the Turla group [8]. It consists in redirecting a COM object used by the targeted application, by modifying the corresponding CLSID entry in the Windows registry. In that case, the following modifications are made in the Windows registry: Once the modification is made, the backdoor DLL will be loaded every time Outlook loads this COM object. Based on our observations, it seems to happen during the launch of Outlook. This COM redirection does not need administrative privileges as it only applies for the current user. Some protections exist to prevent these kinds of malicious redirections. According to MSDN [9]:However, the Outlook process runs at medium integrity level, as shown in Figure 4. Thus, it is not protected against per-user COM redirections. Finally, using COM hijacking allows the backdoor to remain stealthy, as the path to the backdoor, C:\Users\User\Documents\mapid.tlb in this example, is not displayed in the plugin list as shown in Figure 5.Even if the malware is not displayed in the Add-Ins list, it uses a standard Microsoft API, called MAPI (Messaging Application Programming Interface), to interact with Outlook. As explained in the timeline in Section 2, recent versions of the backdoor no longer include the code to register a The Bat! plugin. However, all the code for managing mailboxes and emails is still there. Thus, it could be manually setup if needed. To register as a plugin for The Bat!, the malware was modifying the file %appdata%\The Bat!\Mail\ TBPlugin.INI. This is the legitimate method to register a plugin for The Bat! and some plugins such as anti-spam plugins also rely on it. After registration, each time The Bat! is launched, the backdoor DLL is called. Figure 6 shows that the DLL implements some exports needed for the plugins. Microsoft maintains an API, the Messaging Application Programming Interface (MAPI), which allows applications to interface with Outlook [10]. This Turla backdoor leverages this API to access and manage the mailbox(es) of the person(s) using the compromised system. First, it connects to the messaging system using MAPILogonEx as shown in Figure 7. We believe Outlook opens the default session with the flag MAPI_ALLOW_OTHERS. Thus, the backdoor will use this previously opened session to gain access to the default mailbox profile. This explains why there is no prompt for a profile name and password when the backdoor plugin initializes. Having done so, it has access to the full mailbox and can easily manage it using other MAPI functions. It will iterate through the various message stores, parse the emails and add callbacks on the inbox(es) and outbox(es). The log file summarizes this process: It then parses the email, and its attachment(s), to check if they contain commands from the attacker. This functionality will be studied in detail in Section 3.3. Finally, it intercepts Non Delivery Report (NDR) emails by checking if the incoming email contains the operator’s email address. Consequently, any email containing the operator’s email address will also be discarded. This might cause a problem if victims become suspicious and contact their IT support, as the victims will not be able to see the replies. However, you may notice that it also forwards each outgoing email to the attacker’s email address, [redacted]@gmx[.]com. GMX is a popular, free email service. Both characteristics explain why the attackers chose to register their email there, as it is very unlikely that an organization would routinely block the gmx.com domain. This email address is hardcoded in the sample we studied, as shown in Figure 12, but it can be updated via one of the backdoor functions. They seem to register at least one email address per targeted organization using the format firstname.lastname@gmx[.]com, by impersonating the name of a real employee. This maintains stealth as it might be difficult to differentiate the illicit address from the real private email address of the victim. In addition, the address was unreachable when we analyzed the sample in June 2018.At regular intervals, the backdoor sends a report to the attacker’s email address. It contains some unique identifiers such as the MAC address, the full log file and the command results, if any. Then, it encrypts the data, using MISTY1 as described later in Section 3.3.2.2, and constructs a valid PDF containing the encrypted content. Just before the encrypted blob of data, the document contains a white 1x1 jpeg image, which is hardcoded in the malware. It allows them to create a valid PDF document which, when opened, display a single blank page only. Finally, it attaches the PDF and sends the email to the attacker’s address. Figure 13 is an example of a PDF created by the backdoor. This report is sent by the outbox callback function, meaning the email will be sent at the same time as the user sends a legitimate email. In this way, it prevents the backdoor from sending exfiltration emails at unusual times, which could facilitate detection. This is a very stealthy Command & Control mechanism that can be hard to catch in the wild. As the backdoor works at the same time as the user is using their computer and Outlook, efforts are made to hide the various malicious behaviors that could appear on the screen, such as incoming emails from the attacker. First, the backdoor always deletes all the emails that are sent to or received from the attacker. As shown in Figure 14, it is possible to see for a few seconds that a new message arrived but it is not displayed in the mailbox. Second, it hooks the CreateWindowsEx function as shown in Figure 15 and Figure 16. It prevents the creation of windows of type NetUIHWND, the type of windows used by Outlook for its notifications displayed at the bottom right of the screen. Figure 17 is an example of a NetUIHWND window that is normally triggered in Outlook when a new message is received. As a result of the CreateWindowEx hook, no notification is displayed to the user when the attacker sends an email to the backdoor. Even though the installation function to register a plugin for The Bat! is no longer present, there is legacy code that implements the same functionality as for Outlook, but using The Bat! API. As shown in Figure 18, it uses a pipe to communicate with The Bat! in order to fetch users’ information, read and send emails. However, all the remaining functions, such as those used to log emails or execute commands, are completely identical to Outlook. As detailed in the previous section, this malware is able to manipulate and exfiltrate emails. This is also a full-featured backdoor controlled by email, and which can work independently of any other Turla component. Therefore, the backdoor does not need a full-internet connection and can work on any computer able to send external emails. This could be very useful in strictly controlled environments with, for example, a highly filtered internet connection. Moreover, even if the attackers’ email address is disabled, they can still regain control of it by sending a command from another address. This email would be hidden from the user too, as it would contain commands interpreted by the backdoor. Thus, this malware is almost as resilient as a rootkit inspecting the incoming network traffic.In early 2018, multiple media claimed that Turla operators used mail attachments to control infected machines. It turns out that this information is accurate. In-depth analysis of the Turla Outlook backdoor enabled us to ascertain how the commands are sent and interpreted by the malware. The commands are sent via email messages with specially crafted PDF attachments. We were not able to capture any real sample of PDFs containing commands but they are probably valid PDF documents, as are the PDFs generated by the backdoor for exfiltration purposes. From the PDF documents, the backdoor is able to recover what attackers call a container in the logs. This is a binary blob with a special format that contains encrypted commands for the backdoor. Figure 19 shows the routine responsible for extracting this container. Technically, the attachment does not have to be a valid PDF document. The only requirement is that it includes a container in the right format. The container has a very complex structure, with many different checks. While it could have been designed to prevent communication errors, we believe the structure was mostly created to hamper the reverse engineering process. Figure 20 summarizes the structure of the container. The descriptors of IDs 2 and 4 are used to retrieve the encryption and decompression functions, as shown in Figure 21. However, only one encryption algorithm and one compression algorithm are implemented in the malware. Thus, the only objective of these fields is to complicate the analysis of the backdoor. The commands are in the last part of the structure. They are encrypted using MISTY1 and compressed with bzip2. In the same PDF, many different commands can be included, and each command can have multiple arguments. A part of the container (starting at the first CRC32) is XORed with a byte stream generated by a custom function. It takes a seed, which is passed to srand, to generate a second seed by calling rand. This second seed is used in the function, shown in Figure 22, as an argument, with the data to XOR: For function 0x29, Turla developers copied code from the Empire project PSInject [16]. It allows them to run PowerShell code in a special executable called a PowerShell Runner, without calling powershell.exe. The main advantage is that the malware is still able to execute PowerShell commands even if powershell.exe is blocked on the compromised computer. Following thorough analysis of the malware, we were able to craft a PDF that can be successfully interpreted by the backdoor. Figure 26 shows the execution of a MessageBox and the launch of a calculator (calc.exe) after Outlook received an email containing that PDF document. It demonstrates that this backdoor, apparently designed to receive commands via PDF email attachments, is functional and may be controlled by anybody who understands its custom format. As mentioned before, the program maintains a log that is regularly exfiltrated to the operator via a crafted PDF document attached to an email message. It is stored in %appdata%/Microsoft/Windows/ scawrdot.db and encrypted using a hardcoded 512-byte XOR key. The log file is cleaned each time it is exfiltrated to the attackers. Thus, while performing forensic analysis, it might not be possible to see all the past activities of the backdoor, but only the most recent. The logs are particularly verbose and may allow the Turla operators to monitor in detail the activities of the backdoor. Figure 27 is an example of a decrypted log. This report shows that the Turla developers never run out of ideas when it comes to developing stealthy backdoors. To our knowledge, Turla is the only espionage group that currently uses a backdoor entirely controlled by emails, and more specifically via PDF attachments. While the Turla Backdoor is not the first backdoor that uses the real mailbox of the victim to receive commands and exfiltrate data, it is the first publicly known backdoor using a standard API (MAPI) to in teract with Microsoft Outlook. This is a substantial improvement over an older mail-controlled backdoor we analyzed [17] which was using Outlook Express, just reading inbox files and writing in outbox ones. In contrast, the Turla backdoor works even with recent versions of Outlook. Thanks to its ability to be controlled by seemingly legitimate communication to and from the infected machine, and its non-dependence on any particular email address, the Turla backdoor is extremely stealthy and resilient. In this sense, this Outlook backdoor is similar to rootkits, such as Uroburos, that receive their commands from incoming network traffic. Our research shows that compromised organizations are at risk of not only being spied on by the Turla group who planted the backdoor, but also by other attackers. The backdoor simply executes any com mands it receives, without being able to recognize the operator. Thus, it is possible that other attackers have already reverse-engineered the backdoor and figured out how to control it - and are also spying on victims using the backdoor. Given the severity of this threat, we’ve decided to document the format of PDF documents that can control the Turla backdoor to help defenders understand, monitor and mitigate its activity. ESET researchers will continue to monitor Turla developments to help defenders to protect their networks. Indicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.