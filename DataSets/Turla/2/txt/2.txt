Turla, also known as Snake, is one of oldest, still-active cyberespionage groups, with more than a decade of experience. Its operators mainly focus on high-profile targets such as governments and diplomatic entities in Europe, Central Asia and the Middle East. They are known for having breached major organizations such as the US Department of Defense in 2008 and the Swiss defense company RUAG in 2014. More recently, several European countries including France and the Czech Republic went public to denounce Turla’s attacks against their governments. To perform these operations, Turla’s operators own a large arsenal of malware including a rootkit, several complex backdoors (with a notable one for Microsoft Outlook), and a large range of tools to pivot on a network. In this white paper, we present the analysis of LightNeuron, a backdoor specifically designed to target Microsoft Exchange mail servers. Turla, also known as Snake, is an infamous espionage group active for at least a decade. The group is well known for its advanced custom tools and its ability to run highly targeted operations.Over the past ten years, Turla has been responsible for numerous high-profile breaches. The targets include the United States Central Command in 2008 [1], the Swiss military company RUAG in 2014 [2] and more recently, the French Armed Forces in 2018 [3]. The timeline in Figure 1 presents some of the major attacks attributed to Turla.As opposed to some other APT (Advanced Persistent Threat) groups, Turla is far from being opportunistic in the selection of its targets. The group is interested in collecting information from strategic people or organizations. In addition, to our knowledge, Turla has never conducted cybersabotage operations, such as those made by GreyEnergy [4] or TeleBots [5]. With several years of tracking this espionage group, we have identified the most at-risk types of organizations:Most parts of the world are targeted by Turla’s operations, with the exception, perhaps, of Eastern Asia. Moreover, over the past few years, we have noticed that geographical areas of conflict, such as Eastern Europe and the Middle East, are under heavy attacks from this APT group. However, even with this new focus, they did not abandon their traditional targets in Western Europe and Central Asia.The usual modus operandi used by Turla’s operators is to use basic first-stage malware for initial reconnaissance. In some cases they even use generic tools such as Metasploit [6] [7]. Once they deem the victim interesting enough, they switch to more advanced malware such as Carbon [8] or Gazer [9]. The initial compromise is generally tailored towards specific types of victims. In the past, they mainly relied on spearphishing emails [10], watering hole attacks [11] or Man-in-the-Middle attacks [12]. After this initial compromising step, they move laterally on the network and collect many credentials. To avoid suspicious communications to the internet, they developed tools such as DarkNeuron [13] and RPCBackdoor, to forward commands and exfiltrate data on the local network. They also regularly create user accounts that they use later if they lose access to a compromised machine. It means that once compromised, it is very hard to eject the attacker from the network without rebuilding most of it. Finally, collected data is exfiltrated through various channels such as HTTP and emails. They usually rely on compromised web servers as first stage servers. They are also known for using SATCOM IP addresses to hide the real destination of the traffic [14].Turla’s operators have a wide arsenal at their disposal for all major desktop platforms: Windows, macOS and Linux. Some of their tools stand out for their complexity, such as the Snake rootkit, which relies on a vulnerable VirtualBox driver to bypass Windows Driver Signature Enforcement [15]. Some others stand out by their originality, such as the Outlook backdoor we analyzed in 2018 [16]. During our several years of tracking Turla activities, we also noticed that they were reacting quickly to both publication and detection. Apparently, they do not hesitate to clean all the traces and potentially lose control of a machine if they feel they will be detected soon. They probably do not want their more-advanced malware to be exposed publicly.LightNeuron is a piece of malware specifically designed to target Microsoft Exchange servers. It has two facets: spying on emails and acting as a full-feature backdoor.While rootkits and bootkits have an unmatched stealthiness in the malware domain, LightNeuron is uncommonly stealthy for “regular” malware. To our knowledge, leveraging a Microsoft Exchange Transport Agent for persistence is something unique and never before seen. Moreover, in the few cases we studied, LightNeuron was running with SYSTEM privileges. It is typically hard to gain this level of privilege on a Microsoft Exchange server, as it is one of the most critical assets in an organization. Thus, once compromised, it is likely that it will stay undetected for months or years. The Command and Control protocol is fully based on emails and uses steganography to store data in PDF and JPG attachments. Given that, in the Microsoft Exchange architecture, the malware is installed at the same level as anti-spam and other email security solutions, it allows the malware to bypass them easily. Using a nearly undetectable Command and Control channel allows the malware to stay under the radar for a long period. During the course of our investigation, we noticed alongside LightNeuron the presence of several tools used to control other machines on the local network. These tools include Remote Administration Software, RPCbased malware or .NET web shells targeting Outlook Web Access. By leveraging them, attackers are able to control other machines on the local network using emails sent to the Exchange server. This strategy allows avoiding typical, noisy methods such as an HTTP-based C&C protocol or connection via RDP from outside the compromised network.We believe that LightNeuron development started before 2014 as the versions compiled in 2014, according to the compilation timestamp, appear to be in a late development state. Even if the development occurred several years ago, LightNeuron is still used in recent compromises. Figure 2 is a timeline of some important events related to LightNeuron.These targets are in line with traditional Turla targets. Figure 3 shows the geographical location of the identified targets. The Eastern European and Middle East targets are diplomatic organizations. Regarding the Brazilian target, the sample was uploaded to VirusTotal. Thus, we cannot know the exact nature of the victim or even be sure that the victim was based in Brazil.We believe with high confidence that Turla operates LightNeuron. The following artefacts we collected during our investigation back this:While analyzing a compromised asset, we were able to retrace part of the attackers’ activities. In particular, we were able to map the working hours of the operators, using the time at which the compromised Exchange server received emails containing commands for the backdoor. Our first observation is that the activity matches well a typical 9-to-5 workday in the UTC+3 time zone, as shown in Figure 4.Our second observation is that no activity was observed between December 28, 2018 and January 14, 2019, while previously and afterwards, the attackers sent several emails per week. This break in activities corresponds to holidays around the Orthodox Christmas. Even if it is not sufficient for a strong attribution, one might correlate these two observations with other artefacts used for attribution. We also compiled the type of commands used by the attackers, as shown in Figure 5. Even if we were not able to retrieve the command arguments, it is already a good insight into the operators’ goals. It turns out that LightNeuron is used mostly to exfiltrate data. The remaining activity is most likely dropping and executing tools to perform lateral movements across the local network. Two main components comprise LightNeuron: a Transport Agent [18], registered in the Microsoft Exchange configuration, and a companion 64-bit Dynamic Link Library (DLL) containing most of the malicious code.Microsoft Exchange allows extending its functionalities using Transport Agents that can process and modify all email messages going through the mail server [18]. Transport Agents can be created by Microsoft, third-party vendors, or directly within an organization. They have many legitimate purposes, such as:The typical events handled by a Transport Agent occur when the mail server sends or receives an email. Before the event is actually executed, the Transport Agents are called and have the possibility to modify or block the email. Figure 6 shows the typical workflow in a Microsoft Exchange server. It also shows where the malicious Transport Agents are inserted in this flow. In order to register a Transport Agent to a Microsoft Exchange Installation, one could modify the list of agents in \TransportRoles\Agents\agents.config. The PowerShell function Install-TransportAgent is another way to register a new Transport Agent. This component is responsible for communicating with Microsoft Exchange and with the main malicious DLL. To our knowledge, this is the first time a Transport Agent has been used for malicious purposes.The malicious Transport Agent is a 32-bit Windows DLL developed in .NET. Our analysis is based on the sample with SHA-1 3C851E239FBF67A03E0DAE8F63EEE702B330DB6C, apparently compiled on 26/10/2016. In Figure 7, you can see the seven different classes used by the malicious Transport Agent. Common_utl is the class used to process the email and call the second DLL. ContentFilterAgent and SecurityInteropAgent are, respectively, inheriting from the standard base classes RoutingAgent and SmtpReceiveAgent. The attackers drop this executable in the Exchange folder located in the Program Files folder. This first step requires Administrative privileges. Then, they execute the script in Figure 8 to register the DLL as a Transport Agent. This second step is required before the malware starts receiving events from Exchange.This Transport Agent implements two classes: SmtpReceiveAgent and RoutingAgent. These classes inherit from standard Microsoft Exchange classes, allowing them to receive events from the mail server. Figure 9 shows a part of the class implementing SmtpReceiveAgent.One of the events registered is EndofData, which the server calls once it has received the entire email. This event’s callback then calls the Process function. The behavior is the same for all the callbacks. The class common_utl contains the Process function. As shown in Figure 10, it first logs the date and the sender of the email. Then, it calls the CheckMessage function that then calls the companion DLL to process email data. Finally, depending on the return value of CheckMessage, it does nothing, modifies the email, or blocks it. Figure 11 summarizes the behavior of the LightNeuron Transport Agent. A detailed explanation of the behavior of the companion DLL is available in the Backdoor section. This second component implements most of the malicious functions that are needed by the Transport Agent.The companion DLL is a 64-bit Windows DLL developed in C. Our analysis is based on the sample with SHA-1 76EE1802A6C920CBEB3A1053A4EC03C71B7E46F8, apparently compiled on 02/09/2016.The exports’ full names were present in the oldest versions of the DLL, while in the most recent one, they were shortened.When the Transport Agent loads the DLL, the DLL’s main function performs various initialization tasks. First, it decrypts, using an XOR operation; most of the strings with the hardcoded key 0xA9. Figure 12 shows some interesting strings once decrypted. Then, it decrypts the configuration file stored in %tmp%\winmail.dat. Microsoft Outlook uses the same filename when people send messages from an incorrectly configured mail client [19]. We believe they choose this filename to hide their configuration file in plain sight as a Microsoft Exchange administrator might be accustomed to see many legitimate files named winmail.dat. The configuration is encrypted with AES-256, with the first 32 bytes of the file being the RSA-encrypted AES key. The 1024-bit RSA private key is hardcoded in the binary and it uses the mode PKCS1-v1_5 for encryption. Figure 13 is an example of a decrypted configuration. Please note that we have redacted some confidential information. The configuration does not necessarily specify all the possible parameters. Some parameters, such as CRYPT_KEY, have their default values hardcoded in the DLL, which could be used in case none is specified in the winmail.dat file. The different configuration parameters handled by the sample we analyzed are:While most of the parameter names are self-explanatory, an interesting one is CONFIG_FILE_NAME. This second configuration file contains the rules used to process the emails. We detail this behavior in the next section.In our example, the rules are defined in c:\Windows\ServiceProfiles\NetworkService\appdata\ Local\Temp\msmocf.xml. This file is encrypted in a similar way as winmail.dat and the RSA private key is defined in the configuration parameter DECRYPT_KEY. Once decrypted, this is an XML file describing rules, as shown in Figure 14. It contains several class nodes, each one corresponding to a different function (aka handler) implemented in the DLL. Each class node contains a set of rules describing conditions using the logical operators AND and OR. In addition, each conditional node has three parameters.These rules are applied to every email processed by the DLL. Thus, the behavioral characteristics of LightNeuron reside in this configuration file. This configuration is highly flexible, allowing it to perform different actions depending on various fields of the email. For example, it is possible to collect all the emails sent by one particular email address. Moreover, the operators customize the rules for each victim. In the sample we analyzed, all the email addresses contained in the rules belonged to the targeted organization. In one case, they were monitoring around thirty different email addresses, which probably were the people about whom they were the most interested in collecting information. There are eleven different handlers implemented in the DLL and described in Table 1.All the handlers are implemented in the same way. In the arguments, there is the email in the form of a linked-list with the different fields parsed (From, To, body, etc.). The handler can modify this linked-list and will return a code corresponding to the action it performed, as listed in Table 2.Then, the Transport Agent interprets this return code to know if it should modify the email, block it or execute .NET assembly code. Figure 15 is the handler function for zip. Interestingly, it will dump, encrypt the email and store it on disk but does not compress it. We believe these files are sent back to the attackers using a backdoor command.Some handlers, such as changeSubject, were not used in the rules we analyzed. However, by creating a new set of rules, we were able to trigger this handler. The modification is easily noticed, as you can see in Figure 16. Other handlers, such as changeBody or changeTo, might be used to hide some information or to redirect emails. Although this may sound very similar to the Turla Outlook backdoor controlled by PDF attachments that we analyzed in 2018 [16], the format of the attachment is quite different. Thus, we believe a different programmer or team developed it. As shown in the configuration example, the rule to execute the command handler applies to every attachment of type image/jpeg going through the Exchange server. It is not very efficient, as most of the images do not contain commands. As an example, for one victim, the command handler processed around 7000 pictures while only 178 actually contained commands for the backdoor. Every time the handler is called, it will first check whether the attachment is a PDF document or a JPG image, as shown in Figure 17.In the case of a PDF document, the routine first checks for a signature by performing XOR operations with the data from offset 0x0B to offset 0x10. One way to satisfy this signature condition is by setting all the values from offset 0x0B to 0x10 to 0x00. If the previous signature is satisfied, the routine reads the offset of the blob of data containing the command, which we call the container, from offset 0x11. It also reads the size of the container from offset 0x15. Finally, it copies the container data. Figure 18 shows these operations.In case of a JPG image, it first computes a signature using 16 bytes from the first quantization table. The quantization table is a part of the JPG format and contains data used during the compression of the picture. It performs several XOR operations on these 16 bytes and compares the result against a hardcoded signature, as shown in Figure 21.Once we have the set of equations, we can easily solve it manually or use a SMT (Satisfiability Modulo Theories) solver such as Microsoft Z3 [20] to find out whether a solution exists and, if so, to find one possible solution. It turns out this set of equations is solvable and we use the solution to create a JPG image that can pass the check.If the previous equation is satisfied, it gets the length of the container from offset 0x0F of the quantization table. Finally, it extracts the container from the last Start of Scan section, another standard field of the JPG format. By modifying the quantization table, the resulting picture is also affected. However, the image is still valid, as shown in Figure 22. Regardless of the attachment type delivering it, the container format is strictly identical. The first four bytes are the size of the container and the following bytes are encrypted with AES-256 with a key hardcoded in the binary. Figure 23 shows an example of an encrypted container.Once decrypted, we see the different fields used to store information about the commands to be executed. In Figure 24, we can see some of the most important fields:If an email containing this particular container, embedded in a JPG or in a PDF, is sent to a server compromised by LightNeuron, a calculator will be executed on the Microsoft Exchange server. In addition to the instruction code 0x04, which runs the executable given by the first argument, there are eight other instruction codes having up to three arguments. Table 2 describes the nine different backdoor instructions.When processing a container, the backdoor writes the CmdId value to a log file, located at the path c:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\Microsoft\Windows\thumbcache_32. db. The backdoor checks it just before processing a new container, to check whether this container has already been processed. This is an anti-replay mechanism, probably to avoid duplicate execution if the mail server somehow receives the same email multiple times. Finally, the command output is encrypted with AES and a PDF document or a JPG image is built using a format similar to that described earlier. Interestingly, it reuses the incoming PDF or JPG and replaces the command container with a container holding the output data. An email is then created using data from the configuration and the destination address provided in the incoming container. For instance, it uses the following fields from winmail.dat:To send the email, it simply drops it in the folder \TransportRoles\PickUp\ and the filename starts with msg followed by the result of the GetTickCount function. According to the Microsoft documentation [21]:Moreover, Exchange does not perform any security check on the email sent via this folder [22]:Thus, security solutions will not see the data exfiltrated through LightNeuron, which makes this malware very stealthy. An example of an email containing the result of LightNeuron executing a command is shown in Figure 26. The recipient is reply@example.com, as specified in the incoming command container. The sender is noreply@ example.com, which is the address we choose to use to replace the redacted one specified in the original configuration. The subject header and the attachment name were selected from the lists in the configuration and the incoming PDF was re-used to transport output data.The companion DLL uses logging extensively. The log level can be customized in the configuration file, allowing logging only relevant information when the malware is implanted on a victim machine. The log files are encrypted with AES-256. Each log entry contained in the log files is encrypted separately and the thirty-two first bytes of each log file contain the key. Regardless of the log’s purpose, each log entry has the same format, as described in Figure 27 in C-like syntax.The log file names vary across the different samples but for the sample we analyzed, we identified the following six log files:If the configuration parameters SEND_TIME and SEND_AT_NIGHT are set, a thread launched by the DLL main function will loop indefinitely. As shown in Figure 28, it first waits SEND_TIME seconds and then checks if the exfiltration should only occur during the night or during working hours. In the latter case, it checks whether the hour is between 17:00 and 09:00 and if it is true, it re-enters the sleep loop without exfiltrating any files.The exfiltration function, shown in Figure 29, loops over the files that match the SEND_FILE specification. It is possible to include wildcards in the filename specification to match several different files. Then, for each file, it will send an email containing the file in either a JPG or a PDF attachment. The Backdoor section details the sending of the emails.Even though we did not see Turla make use of it in the wild, we believe this functionality might be used to exfiltrate automatically the emails archived by the zip handler, as this handler does not implement any exfiltration mechanism. Even without the earliest versions of LightNeuron, we noticed some development effort between the different versions we have seen:In a previous section, we explained that most of the strings used by LightNeuron are encrypted. It turns out that some decrypted strings contain strings that make sense only in a Unix environment. Figure 30 shows some of these strings that refer to Unix. For example, sendmail is a common executable used to send an email on Linux. Thus, piping email content with cat to sendmail is actually a common way to send an email in a Linux environment. Further, Postfix is an alternative mail server to sendmail.These Unix artefacts in the Windows malware could be explained by the possible sharing of code between Windows and Unix implementations. Hence, the presence of these strings suggests LightNeuron exists for Linux. That would not be surprising, given that many organizations have Linux mail servers.The cleaning of LightNeuron is not an easy task. Simply removing the two malicious files will break Microsoft Exchange, preventing everybody in the organization from sending and receiving emails. Note to other AV vendors: before adding a detection for the Transport Agent files, be aware that doing so without a proper cleaning routine will render your infected customer’s exchange servers inoperable, so proceed with caution. Before actually removing the files, the malicious Transport Agent should be disabled. First, open \TransportRoles\Agents\agents.config and check every DLL. All of the genuine Transport Agents should be signed either by Microsoft a trusted software vendor. The agents.config file should be similar to Figure 31.In that example, the malicious DLL is Microsoft.Exchange.Security.Interop.dll and two related Transport Agents are registered:The malicious Transport Agents are now disabled. After that, it is possible to remove the two malicious files without breaking Microsoft Exchange. If you do not plan to re-install the mail server, an important last step is to modify the passwords of all accounts that have administrative rights on the compromised server. Otherwise, attackers could access the server again to compromise it again.Given that attackers have gained administrative privileges on the Exchange server, there are no bulletproof mitigations against this threat. However, these few recommendations can help to detect the compromise and to make the attacker’s work harder.In addition to their Turla Outlook backdoor [16], LightNeuron is another example that Turla operators have a large set of sophisticated, custom malware at their disposal. To our knowledge, this is the first time a malicious actor has leveraged a Microsoft Exchange Transport Agent to enable persistence on a mail server. This technique is very interesting as it allows them to receive commands and exfiltrate data without any filtering. LightNeuron is a very powerful piece of malware. It can spy on all the emails of the compromised organization but also execute commands, for example, to control other machines on the local network. This makes it a main hub in the breached network for Turla operators. We will continue to monitor Turla developments to help defenders to protect their networks.