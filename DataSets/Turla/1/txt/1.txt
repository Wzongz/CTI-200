You may remember that in autumn 2019 we published a story about how a COMpfun successor known as Reductor infected files on the fly to compromise TLS traffic. If you’re wondering whether the actor behind the malware is still developing new features, the answer is yes. Later in November 2019 our Attribution Engine revealed a new Trojan with strong code similarities. Further research showed that it was obviously using the same code base as COMPFun. The campaign operators retained their focus on diplomatic entities, this time in Europe, and spread the initial dropper as a spoofed visa application. It is not clear to us exactly how the malicious code is being delivered to a target. The legitimate application was kept encrypted inside the dropper, along with the 32- and 64-bit next stage malware. We observed an interesting C2 communication protocol utilizing rare HTTP/HTTPS status codes (check IETF RFC 7231, 6585, 4918). Several HTTP status codes (422-429) from the Client Error class let the Trojan know what the operators want to do. After the control server sends the status “Payment Required” (402), all these previously received commands are executed. The authors keep the RSA public key and unique HTTP ETag in encrypted configuration data. Created for web content caching reasons, this marker could also be used to filter unwanted requests to the C2, e.g., those that are from network scanners rather than targets. Besides the aforementioned RSA public key to communicate with the C2, the malware also uses a selfgenerated AES-128 key. We should mention here once again that the COMPfun malware was initially documented by GDATA in 2014; and although the company did not identify which APT was using the malware. Based mostly on victimology, we were able to associate it with the Turla APT with medium-to-low level of confidence. ts functions include the ability to acquire the target’s geolocation, gathering host- and networkrelated data, keylogging and screenshots. In other words, it’s a normal full-fledged Trojan that is also capable of propagating itself to removable devices. As in previous malware from the same authors, all the necessary function addresses resolve dynamically to complicate analysis. To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption. To hide data locally, the Trojan implements LZNT1 compression and one-byte XOR encryption. ts functions include the ability to acquire the target’s geolocation, gathering host- and networkrelated data, keylogging and screenshots. In other words, it’s a normal full-fledged Trojan that is also capable of propagating itself to removable devices. As in previous malware from the same authors, all the necessary function addresses resolve dynamically to complicate analysis. To exfiltrate the target’s data to the C2 over HTTP/HTTPS, the malware uses RSA encryption. To hide data locally, the Trojan implements LZNT1 compression and one-byte XOR encryption. The following files are dropped to the disk in addition to the original application that the malware tries to mimic: The dropper urges users to run the file as administrator (using messages such as “need to run as admin”), then drops a version corresponding to the host’s architecture and sets the file system timestamp to 2013.12.20 22:31. Interestingly, the dropper’s abilities aren’t limited to PE lures; as an alternative, this stage is also able to use .doc and .pdf files. In such cases, the dropper will open the files using the “open” shell command instead of running the legitimate spoofed executable application.The analysis below is based on the 32-bit sample from the table above. The legitimate ExplorerFrame.dll.mui is a language resource for the ExplorerFrame.dll file used by Windows Explorer. As usual in this malware family’s code, a huge number of short standalone functions return all the readable strings. This is done to complicate analysis by not allowing the strings to be visible at a glance for researchers. The module’s preparation stage dynamically resolves all required Windows API function addresses into corresponding custom structures. Afterwards the malware uses indirect function calls only. The module obtains the processor architecture (32- or 64-bit) and Windows OS version. It includes a number of anti-analysis checks for virtual machine-related devices (VEN_VMWARE, VBOX_HARDDISK, Virtual_DVD_ROM, etc.) to avoid controlled execution. It also notes which security products are running on the host (Symantec, Kaspersky, Dr.Web, Avast). Before every communication with the C2, the malware checks if software such as debuggers (WinDbg, OllyDbg, Visual Studio) and host (Process Explorer or Monitor, etc.) or network monitoring (Wireshark, TCPView, etc.) programs are running. It also checks for internet connectivity and does not attempt to communicate if the checks fail. The DLL also checks for potentially available launch processes that it can inject itself into. In the case of PaymentRequired, this could be system, security product or browser processes. Then the malware forms the corresponding code to drop files, delete files, etc. The last step in the initialization procedure is to decrypt and decompress the configuration file. Decryption is done via a one-byte XOR using the 0xAA key, followed by decompression using the LZNT1 algorithm. From the configuration, the malware parses the RSA public key, ETag and IP addresses to communicate with its control servers. Firstly, the module generates the following: The module then chooses a process to inject the code into, in order of decreasing priority, starting from Windows (cmd.exe, smss.exe), security-related applications (Symantec’s nis.exe, Dr.Web’s spideragent.exe) and browsers (IE, Opera, Firefox, Yandex browser, Chrome). The main thread checks if the C2 supports TLS in its configuration. If it does, communication will be over HTTPS and port 443; otherwise, the HTTP protocol and port 80 are used. The first GET request sent contains an ETag “If-Match” header that is built using data from its decrypted configuration. ETags are normally used by web servers for caching purposes in order to be more efficient and save bandwidth by not resending redundant information if an ETag value matches. The implementation of ETags means the C2 may ignore all requests that are not sent from its intended targets if they don’t have the required ETag value.If initialization is successful, the malware starts one more thread for dispatching Windows messages, looking for removable devices related to a WM_DEVICECHANGE event. The module runs its own handlers in the event of a USB device being plugged into or unplugged from the host.The user’s activity is monitored using several hooks. All of them gather the target’s data independently of any C2 command. Keystrokes are encrypted using the RSA public key stored in the configuration data and sent once every two seconds, or when moreа than 512 bytes are recorded. These 512 characters also include left mouse button clicks (written as the “MSLBTN” string) and Windows title bar texts. For clipboard content, the module calculates an MD5 hash and if it changes, encrypts the clipboard content with the same RSA public key and then sends it. In a separate thread, the Trojan takes a bitmap screenshot using the GDIPlus library, compresses it with the LZNT1 algorithm, encrypts it using the key from the configuration data and sends it to the control server. A screenshot will be taken of the target and sent anyway, independently of any C2 command. There are several choices – albeit not major additional technical ones – that the malware author made which we consider to be noteworthy. The COM-hijacking-based persistence method injects its corresponding code and structure as a parameter into a legitimate process’s memory. The malware geolocates victims using legitimate web services: geoplugin.net/json.gp, ip-api.com/json and telize.com/geoip. The unusual thread synchronization timeout calculation in the HTTP status thread is peculiar. Mathematically, the partial sum of the series is precisely:This series, in the case of a full sum, is just a representation of the exponent. The developers probably used the exponent to make timeouts in the communication thread more unpredictable and grow at a fast rate, and the compiler calculated it this way. We saw innovative approaches from the COMpfun developers twice in 2019. First, they bypassed TLS encrypted traffic via PRNG system function patching, and then we observed a unique implementation of C2 communications using uncommon HTTP status codes. The malware operators retained their focus on diplomatic entities and the choice of a visa-related application – stored on a directory shared within the local network – as the initial infection vector worked in their favor. The combination of a tailored approach to their targets and the ability to generate and execute their ideas certainly makes the developers behind COMPFun a strong offensive team.Turla, also known as Snake, is an infamous espionage group active for at least a decade. The group is well known for its advanced custom tools and its ability to run highly targeted operations.Over the past ten years, Turla has been responsible for numerous high-profile breaches. The targets include the United States Central Command in 2008 [2], the Finnish Ministry of Foreign Affairs in 2013 [3], the Swiss military company RUAG in 2014 [4] and the German Foreign Office in 2017 [5]. More recently, they allegedly compromised the French Armed Forces in 2018 [6] and the Austrian Foreign Ministry in 2019 [7]. The timeline in Figure 1 presents some of the major attacks attributed to Turla.As opposed to some other APT (Advanced Persistent Threat) groups, Turla is far from being opportunistic in the selection of its targets. The group is interested in collecting information from strategic organizations. In addition, to our knowledge, Turla has never conducted cybersabotage operations, such as those made by GreyEnergy or TeleBots. With several years of experience tracking this espionage group, we have identified the most at-risk types of organizations：Other APT groups might also be targets of interest for Turla. In June 2019, Symantec reported [10] that Turla had hijacked OilRig infrastructure and used it to drop its own malware onto existing OilRig victims’ networks. According to our telemetry and public information, Turla seems to target organizations in most parts of the world. Moreover, over the past few years, we have noticed that geographical areas of conflict, such as Eastern Europe and the Middle East, are under heavy attack from this APT group. However, even with this recent focus, it has not abandoned its traditional targets in Western Europe and Central Asia. The usual modus operandi of Turla’s operators is to use basic first-stage malware for initial reconnaissance. In some cases they even use generic tools such as Metasploit. If they deem a victim interesting enough, they switch to more advanced malware such as Carbon or Gazer. The initial compromise is generally tailored towards specific types of victims. They mainly rely on spearphishing emails, watering hole attacks or Man-in-the-Middle attacks. After this initial compromise step, they move laterally on the network and collect credentials. To avoid suspicious communications to the internet, they developed tools such as DarkNeuron [19] and RPC Backdoor [1], to forward commands and exfiltrate data from the local network. They also regularly create user accounts that they use later if they lose access to a compromised machine. This all means that once compromised, it is very hard to eject the attacker from the network without rebuilding most of it. Finally, collected data are exfiltrated through various channels such as HTTP, email or cloud storage. Turla’s operators usually rely on compromised web servers for the first C&C level. They are also known for using Cloudflare and SATCOM IP addresses to hide the real destination of this traffic. Turla’s operators have at their disposal a wide arsenal of malware tools for all major desktop platforms: Windows, macOS and Linux. Some of these tools stand out for their complexity, such as the Snake rootkit, which relies on a vulnerable VirtualBox driver to bypass Windows Driver Signature Enforcement [21]. Some others stand out for their originality, such as the Outlook backdoor we analyzed in 2018 or LightNeuron, a backdoor targeting Microsoft Exchange. During our several years of tracking Turla’s activities, we have also noticed that its operators react quickly to both detection and publication. Apparently, they do not hesitate to remove their tools and clean some artefacts such as malware logs, and potentially lose control of a machine, if they feel they will be detected soon. They probably do not want their more-advanced malware to be exposed publicly. Agent.BTZ is a Remote Access Trojan (RAT) that became infamous after its use in a breach of the US military in 2008 . The first version of this malware, seen in 2007, exhibited worm capabilities by spreading through removable drives. Later, this malware family, along with other families such as the Snake rootkit, was attributed to an APT group dubbed Turla. From 2007 to 2012, two new major versions of the RAT, later named ComRAT, were released as described by G DATA . Interestingly, both employed the well-known Turla XOR key:Then, and until mid-2017, Turla developers made a few changes to ComRAT but it was still using a very similar code base. In 2017, we noticed that a very different version of ComRAT was released. As shown in Figure 2, it is version 4 of a malware family its authors dubbed Chinch. It was also the internal name the developers used for the previous versions.This new version uses a completely new code base and is far more complex than its predecessors. It takes some inspiration from Snake, the rootkit used by Turla with, for instance, a Virtual File System formatted in FAT16. Figure 3 provides an overview of ComRAT history.During our investigation, we were able to get insights about what Turla operators were doing on the compromised machines. The main use of ComRAT is discovering, stealing and exfiltrating confidential documents. In one case, its operators even deployed a .NET executable to interact with the victim’s central MS SQL Server database containing the organization’s documents. Figure 4 is the redacted SQL command.These documents were then compressed and exfiltrated to a cloud storage provider such as OneDrive or 4shared. Cloud storage is mounted using the net use command as shown in Figure 5.In addition to document stealing, the operators also run many commands to gather information about the Active Directory groups or users, the network or Microsoft Windows configurations such as the group policies. Figure 6 is a list of commands executed by Turla operators.Finally, we also noticed that Turla operators are aware of and try to evade security software. For instance, they regularly exfiltrate security-related log files in order to understand whether their malware samples have been detected. This shows the level of sophistication of this group and its intention to stay on the same machines for a long time. We also extracted the times at which Gmail received the emails sent by the operators, which should be very close to the time at which commands were sent by the operators through the email C&C channel. We believe this is a good metric because the emails are later processed by the backdoor. Thus, it shows the time at which the operators were working and not the time at which the infected computer executed malicious commands. Figure 7 represents the time of day that commands were sent, in a one-month period. Given the distribution, it is likely that the operators are working in the UTC+3 or UTC+4 time zone.According to its compilation timestamp, which is likely genuine, the first known sample of ComRAT v4 was compiled in April 2017. The most recent iteration of the backdoor was, to the best of our knowledge, compiled in November 2019. In this section, we will describe a sample compiled in March 2019, but it is very similar to the latest version.Based on ESET telemetry, we believe that ComRAT is installed using an existing foothold such as compromised credentials or via another Turla backdoor. For instance, we’ve seen ComRAT installed by PowerStallion, a PowerShell-based backdoor we described in 2019 [1]. The ComRAT installer is a PowerShell script that creates a Windows scheduled task and fills a registry value with the encrypted payload. The registry value is usually.Note that the password used to decrypt the ComRAT payload is different on each machine. It is interesting to note that while ComRAT’s name is derived from its use of COM object hijacking, in this new version the developers no longer use this method for ensuring persistence.The PowerShell loader is executed every time the user logs in. It is very similar to the cluster of loaders we described in 2019 [1] and is based on the Invoke-DllInjection loader from the PowerSploit framework. It loads the ComRAT orchestrator DLL into explorer.exe as shown in Figure 8.This is a C++ DLL existing in 32- and 64-bit versions. It has two exports named UMEP and VFEP. The 64-bit version is called x64_Release.dll as shown in Figure 9.The orchestrator embeds an encrypted (XORed with a hardcoded key) communication module (a 32- or 64-bit DLL) that will be injected into the default web browser. The orchestrator interacts with the ComRAT communication module (described in more detail later) through a named pipe. Thus, all of the malware’s network communications will be initiated in the browser process, which is stealthier than if it was done directly by the orchestrator. The orchestrator has some interesting features such as a Virtual File System (VFS) in FAT16 format, which we describe later, and it can use Gmail to receive commands and to exfiltrate information to the operators. Figure 10 is an overview of ComRAT’s architecture.Our in-depth analysis of this malware family leads us to believe that the ComRAT developers are both experienced and spent time designing the malware architecture. We noticed that they used several design patterns. For example, they use the so-called Abstract Factory pattern [26] in the code responsible for parsing and creating instructions based on C&C communications, as shown in Figure 12. It is interesting to note that it was implemented using a C++ template. Thus, there is a lot of duplicated code in the compiled binary because each templated class or function will have a different implementation for each type it is used with.It should be noted that, in addition to complex elements such as a FAT16 VFS, ComRAT’s developers use some obfuscation. Most of the strings in their binaries are string-stacked and encrypted, with a different key per sample, with the apparent goal of preventing easy detection of this malware family.Overall, it tells us that the Turla group tasked experienced developers for this new version of ComRAT. Both the development effort and the technologies used, such as the Virtual File System, make it a counterpart of Carbon [13] and Gazer [14]. All the files related to ComRAT, except the orchestrator DLL and scheduled task, are stored in a Virtual File System. This is a regular file stored at one of these locations:The encryption key is unique per machine, as it is generated during the installation. It uses a variant of Mersenne Twister and takes its seed from std::_Random_device. This 32-byte key is then stored in (HKLM|HKCU)\Software\Microsoft\Windows\CurrentVersion\Explorer\CLSID\ {59031A47-3F72-44A7-80C5-5595FE6B30EE}\Order The VFS is encrypted using AES-256 in XTS mode. This mode of operation is a standard for disk encryption. The first 16-bytes of the key are used for the block encryption while the last 16-bytes are used to derive the initialization vector from the sector number. The default VFS container file is hardcoded in the orchestrator and dropped the first time it is executed. Then, most of the files can be updated using backdoor commands. It uses UNIX-like paths so, for example, the log file is located at /var/log/working.c4log. The malware uses a third-party library, fat_io_lib, to read the partition. Figure 16 is an overview of the files and folders in the VFS. The orchestrator retrieves the default browser, by checking HKCR\http\shell\open\command, and injects the communication DLL, either 32- or 64-bit, into it. These DLLs are hardcoded in the orchestrator and XORed with a static key. This module is quite simple as it is just a “bridge” between the orchestrator and the C&C server. The goal is probably to make the malware’s HTTP requests to its C&C appear to be from a process that would be expected to connect to the internet and make HTTP requests. The orchestrator uses a named pipe to interact with the communication module. The pipe name is derived from the computer name as shown on Figure 18.The orchestrator sends C&C requests to the communication module, which sends them to the C&C server, and that module sends any responses or new commands from the C&C server to the orchestrator, using the same pipe. The communication DLL is slightly obfuscated, in a very similar way to many other Turla malware families. All the strings are string-stacked, some of them XORed, and most of the Windows APIs it uses are resolved dynamically.The most basic C&C mode is what the ComRAT developers called legacy mode. Indeed, it is the exact same protocol as implemented in ComRAT v3.x. We believe that it is intended to be compatible with C&C servers already in place, avoiding the need to deploy a whole new set of servers. It also gives the operators the flexibility to control old ComRAT instances without the need to upgrade all the victims to version 4. Even if this is an old C&C protocol, it was still being used in the wild in 2020. Two lists of C&C servers are stored in the VFS at the paths: /etc/transport/legacy/get.list and /etc/transport/legacy/post.list They generally each contain two or three different domains, separated with a pipe character. The format of the URL is quite easy to recognize as it hasn’t changed for years: http[s]:///index/index.php?h=&d= The h parameter contains an 8-byte XOR key encoded in base64. It is generated using the rand function seeded by the result of a call to the GetTickCount function. The d parameter contains the base64-encoded data. It is encrypted using the XOR key in the h parameter. The second C&C mode is called mail by ComRAT developers. The code is actually very specific to Gmail and we haven’t seen any other version of ComRAT able to use another email provider. A basic overview of the email C&C mode is shown Figure 19.The orchestrator reads the email address in /etc/transport/mail/mailboxes/0/command_addr It also reads the cookies to authenticate on Gmail in /etc/transport/mail/mailboxes/0/cookie These cookies typically have a limited lifetime so they should be updated from time to time. Figure 20 is a redacted screenshot of the contents of the cookie file.It connects to the basic HTML view of Gmail at the URL https://mail.google.com/mail/?ui=html&zy=g using the cookies described above. An example of such a view is shown Figure 21.It parses the inbox HTML page using the Gumbo HTML parser in order to extract the list of emails. It will only read emails for which the Subject: is in the list at /etc/transport/mail/service/subject, as shown in Figure 22.Then, for each email, it extracts the link to download the attachment. The attachments are generally masquerading as documents with names such as document.docx and documents.xlsx. The body of the email is generally empty. Figure 23 is an example of an email sent by Turla operators to a ComRAT C&C mailbox.It downloads all the relevant attachments from Gmail. The email is then deleted so that it is not processed a second time.Despite their extensions, the attachments are not docx or xslx files. They contain a blob of data in the following format:The AES-256 key is stored in the VFS in /etc/pki/aes_key and it uses AES in CBC mode with a null initialization vector.Once decrypted, we have access to the backdoor commands and parameters. We provide more details about the backdoor commands in section 4.6. Figure 24 is an example of a decrypted email attachment. 0x67 is the ID for “Execute a command with cmd.exe” and it is followed by the command to execute. We believe that the beginning of the decrypted data is filled with random bytes.The backdoor creates an attachment containing the result of the commands. The attachment name consists of 20 random digits and of the .jpg.bfe so-called double extension. Its content has the following format:The AES key is different for each email as it is randomly generated. Then, it is encrypted using RSA-2048 with the public key stored in /etc/pki/public_cert.pki. The format of the key is quite unusual as it is raw bytes representing the concatenation of n and e. Turla’s developers did not implement the RSA encryption themselves; they used code from the wolfSSL library and more specifically from a commit before March 2016.Finally, and using the Gmail web interface as before, the backdoor sends the email to the address contained in /etc/transport/mail/mailboxes/0/answer_addr. This address is typically not hosted on Gmail but rather on GMX or VFEmail. It is also the email address from which the operators send commands to the Gmail address. Figure 25 is an example of an email created by ComRAT. The operators can send commands using either of the C&C channels. The backdoor will receive the command ID and the arguments, if any. As seen in Table 1, the commands implemented in ComRAT v4 are not surprising and allow control of almost everything on the machine: manage files, execute additional processes or gather logs.Version four of ComRAT is a totally revamped malware family released in 2017. Its developers took inspiration from other Turla backdoors, such as Snake, to build a very complex piece of malware. Its most interesting features are the Virtual File System in FAT16 format and the ability to use the Gmail web UI to receive commands and exfiltrate data. Thus, it is able to bypass some security controls because it doesn’t rely on any malicious domain. We also noticed that this new version abandoned the use of COM object hijacking for persistence, the method that gave the malware its common name. We found indications that ComRAT v4 was still in use at the beginning of 2020, showing that the Turla group is still very active and a major threat for diplomats and militaries. We will continue to monitor Turla developments to help defenders protect their networks. Indicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.